### YamlMime:ManagedReference
items:
- uid: Mewdeko.Common.MewdekoModule
  commentId: T:Mewdeko.Common.MewdekoModule
  id: MewdekoModule
  parent: Mewdeko.Common
  children:
  - Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  - Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  - Mewdeko.Common.MewdekoModule.Config
  - Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.CultureInfo
  - Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  - Mewdeko.Common.MewdekoModule.GetText(System.String)
  - Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.Localization
  - Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
  - Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
  - Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  - Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  - Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
  - Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.Strings
  - Mewdeko.Common.MewdekoModule.ctx
  langs:
  - csharp
  - vb
  name: MewdekoModule
  nameWithType: MewdekoModule
  fullName: Mewdeko.Common.MewdekoModule
  type: Class
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: MewdekoModule
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 10
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Base class for Discord command modules with support for localization and string resources.
  example: []
  syntax:
    content: 'public abstract class MewdekoModule : ModuleBase, IModuleBase'
    content.vb: Public MustInherit Class MewdekoModule Inherits ModuleBase Implements IModuleBase
  inheritance:
  - System.Object
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  - Discord.Commands.ModuleBase
  derivedClasses:
  - Mewdeko.Common.MewdekoModuleBase`1
  - Mewdeko.Common.MewdekoSubmodule
  - Mewdeko.Modules.Moderation.Moderation
  implements:
  - Discord.Commands.IModuleBase
  inheritedMembers:
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.Context
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Mewdeko.Common.MewdekoModule.Mewdeko.Extensions.Extensions.ThrowIfNull``1(System.String)
- uid: Mewdeko.Common.MewdekoModule.CultureInfo
  commentId: P:Mewdeko.Common.MewdekoModule.CultureInfo
  id: CultureInfo
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: CultureInfo
  nameWithType: MewdekoModule.CultureInfo
  fullName: Mewdeko.Common.MewdekoModule.CultureInfo
  type: Property
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: CultureInfo
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 15
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Gets or sets the CultureInfo for the current module.
  example: []
  syntax:
    content: protected CultureInfo? CultureInfo { get; set; }
    parameters: []
    return:
      type: System.Globalization.CultureInfo
    content.vb: Protected Property CultureInfo As CultureInfo
  overload: Mewdeko.Common.MewdekoModule.CultureInfo*
- uid: Mewdeko.Common.MewdekoModule.Strings
  commentId: P:Mewdeko.Common.MewdekoModule.Strings
  id: Strings
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: Strings
  nameWithType: MewdekoModule.Strings
  fullName: Mewdeko.Common.MewdekoModule.Strings
  type: Property
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Strings
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 20
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Gets or sets the string resources provider for the current module.
  example: []
  syntax:
    content: public IBotStrings Strings { get; set; }
    parameters: []
    return:
      type: Mewdeko.Services.strings.IBotStrings
    content.vb: Public Property Strings As IBotStrings
  overload: Mewdeko.Common.MewdekoModule.Strings*
- uid: Mewdeko.Common.MewdekoModule.Localization
  commentId: P:Mewdeko.Common.MewdekoModule.Localization
  id: Localization
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: Localization
  nameWithType: MewdekoModule.Localization
  fullName: Mewdeko.Common.MewdekoModule.Localization
  type: Property
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Localization
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 25
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Gets or sets the localization service for the current module.
  example: []
  syntax:
    content: public ILocalization Localization { get; set; }
    parameters: []
    return:
      type: Mewdeko.Services.ILocalization
    content.vb: Public Property Localization As ILocalization
  overload: Mewdeko.Common.MewdekoModule.Localization*
- uid: Mewdeko.Common.MewdekoModule.ctx
  commentId: P:Mewdeko.Common.MewdekoModule.ctx
  id: ctx
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: ctx
  nameWithType: MewdekoModule.ctx
  fullName: Mewdeko.Common.MewdekoModule.ctx
  type: Property
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ctx
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 31
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Gets the command context for the current module.
  example: []
  syntax:
    content: protected ICommandContext ctx { get; }
    parameters: []
    return:
      type: Discord.Commands.ICommandContext
    content.vb: Protected ReadOnly Property ctx As ICommandContext
  overload: Mewdeko.Common.MewdekoModule.ctx*
- uid: Mewdeko.Common.MewdekoModule.Config
  commentId: P:Mewdeko.Common.MewdekoModule.Config
  id: Config
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: Config
  nameWithType: MewdekoModule.Config
  fullName: Mewdeko.Common.MewdekoModule.Config
  type: Property
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Config
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 36
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Gets or sets the bot configuration for the current module.
  example: []
  syntax:
    content: public BotConfig Config { get; set; }
    parameters: []
    return:
      type: Mewdeko.Common.Configs.BotConfig
    content.vb: Public Property Config As BotConfig
  overload: Mewdeko.Common.MewdekoModule.Config*
- uid: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  commentId: M:Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  id: BeforeExecute(Discord.Commands.CommandInfo)
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: BeforeExecute(CommandInfo)
  nameWithType: MewdekoModule.BeforeExecute(CommandInfo)
  fullName: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: BeforeExecute
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 42
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Performs tasks before executing a command.
  example: []
  syntax:
    content: protected override void BeforeExecute(CommandInfo command)
    parameters:
    - id: command
      type: Discord.Commands.CommandInfo
      description: The command being executed.
    content.vb: Protected Overrides Sub BeforeExecute(command As CommandInfo)
  overridden: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecute(Discord.Commands.CommandInfo)
  overload: Mewdeko.Common.MewdekoModule.BeforeExecute*
- uid: Mewdeko.Common.MewdekoModule.GetText(System.String)
  commentId: M:Mewdeko.Common.MewdekoModule.GetText(System.String)
  id: GetText(System.String)
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: GetText(string?)
  nameWithType: MewdekoModule.GetText(string?)
  fullName: Mewdeko.Common.MewdekoModule.GetText(string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetText
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 50
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Retrieves a localized text string using the specified key.
  example: []
  syntax:
    content: protected string GetText(string? key)
    parameters:
    - id: key
      type: System.String
      description: The key identifying the text string.
    return:
      type: System.String
      description: The localized text string.
    content.vb: Protected Function GetText(key As String) As String
  overload: Mewdeko.Common.MewdekoModule.GetText*
  nameWithType.vb: MewdekoModule.GetText(String)
  fullName.vb: Mewdeko.Common.MewdekoModule.GetText(String)
  name.vb: GetText(String)
- uid: Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
  id: GetText(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: GetText(string?, params object?[])
  nameWithType: MewdekoModule.GetText(string?, params object?[])
  fullName: Mewdeko.Common.MewdekoModule.GetText(string?, params object?[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetText
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 58
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Retrieves a formatted localized text string using the specified key and arguments.
  example: []
  syntax:
    content: protected string GetText(string? key, params object?[] args)
    parameters:
    - id: key
      type: System.String
      description: The key identifying the text string.
    - id: args
      type: System.Object[]
      description: The arguments to format into the text string.
    return:
      type: System.String
      description: The formatted localized text string.
    content.vb: Protected Function GetText(key As String, ParamArray args As Object()) As String
  overload: Mewdeko.Common.MewdekoModule.GetText*
  nameWithType.vb: MewdekoModule.GetText(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.GetText(String, ParamArray Object())
  name.vb: GetText(String, ParamArray Object())
- uid: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
  id: ErrorLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: ErrorLocalizedAsync(string?, params object?[])
  nameWithType: MewdekoModule.ErrorLocalizedAsync(string?, params object?[])
  fullName: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(string?, params object?[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ErrorLocalizedAsync
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 66
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Sends an error message to the channel with localized text.
  example: []
  syntax:
    content: public Task<IUserMessage> ErrorLocalizedAsync(string? textKey, params object?[] args)
    parameters:
    - id: textKey
      type: System.String
      description: The key identifying the text string.
    - id: args
      type: System.Object[]
      description: The arguments to format into the text string.
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: A task representing the asynchronous operation.
    content.vb: Public Function ErrorLocalizedAsync(textKey As String, ParamArray args As Object()) As Task(Of IUserMessage)
  overload: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync*
  nameWithType.vb: MewdekoModule.ErrorLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(String, ParamArray Object())
  name.vb: ErrorLocalizedAsync(String, ParamArray Object())
- uid: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
  id: ReplyErrorLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: ReplyErrorLocalizedAsync(string?, params object?[])
  nameWithType: MewdekoModule.ReplyErrorLocalizedAsync(string?, params object?[])
  fullName: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(string?, params object?[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ReplyErrorLocalizedAsync
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 78
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Sends an error message to the channel with localized text, mentioning the user who invoked the command.
  example: []
  syntax:
    content: public Task<IUserMessage> ReplyErrorLocalizedAsync(string? textKey, params object?[] args)
    parameters:
    - id: textKey
      type: System.String
      description: The key identifying the text string.
    - id: args
      type: System.Object[]
      description: The arguments to format into the text string.
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: A task representing the asynchronous operation.
    content.vb: Public Function ReplyErrorLocalizedAsync(textKey As String, ParamArray args As Object()) As Task(Of IUserMessage)
  overload: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync*
  nameWithType.vb: MewdekoModule.ReplyErrorLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(String, ParamArray Object())
  name.vb: ReplyErrorLocalizedAsync(String, ParamArray Object())
- uid: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
  id: ConfirmLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: ConfirmLocalizedAsync(string?, params object?[])
  nameWithType: MewdekoModule.ConfirmLocalizedAsync(string?, params object?[])
  fullName: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(string?, params object?[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ConfirmLocalizedAsync
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 90
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Sends a confirmation message to the channel with localized text.
  example: []
  syntax:
    content: public Task<IUserMessage> ConfirmLocalizedAsync(string? textKey, params object?[] args)
    parameters:
    - id: textKey
      type: System.String
      description: The key identifying the text string.
    - id: args
      type: System.Object[]
      description: The arguments to format into the text string.
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: A task representing the asynchronous operation.
    content.vb: Public Function ConfirmLocalizedAsync(textKey As String, ParamArray args As Object()) As Task(Of IUserMessage)
  overload: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync*
  nameWithType.vb: MewdekoModule.ConfirmLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(String, ParamArray Object())
  name.vb: ConfirmLocalizedAsync(String, ParamArray Object())
- uid: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
  id: ReplyConfirmLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: ReplyConfirmLocalizedAsync(string?, params object?[])
  nameWithType: MewdekoModule.ReplyConfirmLocalizedAsync(string?, params object?[])
  fullName: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(string?, params object?[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ReplyConfirmLocalizedAsync
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 102
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Sends a confirmation message to the channel with localized text, mentioning the user who invoked the command.
  example: []
  syntax:
    content: public Task<IUserMessage> ReplyConfirmLocalizedAsync(string? textKey, params object?[] args)
    parameters:
    - id: textKey
      type: System.String
      description: The key identifying the text string.
    - id: args
      type: System.Object[]
      description: The arguments to format into the text string.
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: A task representing the asynchronous operation.
    content.vb: Public Function ReplyConfirmLocalizedAsync(textKey As String, ParamArray args As Object()) As Task(Of IUserMessage)
  overload: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync*
  nameWithType.vb: MewdekoModule.ReplyConfirmLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(String, ParamArray Object())
  name.vb: ReplyConfirmLocalizedAsync(String, ParamArray Object())
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
  id: PromptUserConfirmAsync(System.String,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: PromptUserConfirmAsync(string, ulong)
  nameWithType: MewdekoModule.PromptUserConfirmAsync(string, ulong)
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(string, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: PromptUserConfirmAsync
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 114
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Prompts the user with a confirmation message asynchronously.
  example: []
  syntax:
    content: public Task<bool> PromptUserConfirmAsync(string message, ulong userid)
    parameters:
    - id: message
      type: System.String
      description: The message to be displayed to the user.
    - id: userid
      type: System.UInt64
      description: The ID of the user to prompt.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task representing the asynchronous operation, containing a boolean indicating the user's response.
    content.vb: Public Function PromptUserConfirmAsync(message As String, userid As ULong) As Task(Of Boolean)
  overload: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync*
  nameWithType.vb: MewdekoModule.PromptUserConfirmAsync(String, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(String, ULong)
  name.vb: PromptUserConfirmAsync(String, ULong)
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  id: PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: PromptUserConfirmAsync(EmbedBuilder, ulong)
  nameWithType: MewdekoModule.PromptUserConfirmAsync(EmbedBuilder, ulong)
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: PromptUserConfirmAsync
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 123
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Prompts the user with a confirmation message asynchronously.
  example: []
  syntax:
    content: public Task<bool> PromptUserConfirmAsync(EmbedBuilder embed, ulong userid)
    parameters:
    - id: embed
      type: Discord.EmbedBuilder
      description: The embed to be displayed to the user.
    - id: userid
      type: System.UInt64
      description: The ID of the user to prompt.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task representing the asynchronous operation, containing a boolean indicating the user's response.
    content.vb: Public Function PromptUserConfirmAsync(embed As EmbedBuilder, userid As ULong) As Task(Of Boolean)
  overload: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync*
  nameWithType.vb: MewdekoModule.PromptUserConfirmAsync(EmbedBuilder, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder, ULong)
  name.vb: PromptUserConfirmAsync(EmbedBuilder, ULong)
- uid: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  commentId: M:Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  id: CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: CheckRoleHierarchy(IGuildUser, bool)
  nameWithType: MewdekoModule.CheckRoleHierarchy(IGuildUser, bool)
  fullName: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser, bool)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: CheckRoleHierarchy
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 148
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Checks if the invoking user has a higher role hierarchy than the target user.
  example: []
  syntax:
    content: public Task<bool> CheckRoleHierarchy(IGuildUser target, bool displayError = true)
    parameters:
    - id: target
      type: Discord.IGuildUser
      description: The target user to check against.
    - id: displayError
      type: System.Boolean
      description: Determines whether to display an error message if hierarchy check fails.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task representing the asynchronous operation, containing a boolean indicating the result of the hierarchy check.
    content.vb: Public Function CheckRoleHierarchy(target As IGuildUser, displayError As Boolean = True) As Task(Of Boolean)
  overload: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy*
  nameWithType.vb: MewdekoModule.CheckRoleHierarchy(IGuildUser, Boolean)
  fullName.vb: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser, Boolean)
  name.vb: CheckRoleHierarchy(IGuildUser, Boolean)
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  id: PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ulong)
  nameWithType: MewdekoModule.PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ulong)
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage, Discord.EmbedBuilder, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: PromptUserConfirmAsync
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 173
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Prompts the user with a confirmation message asynchronously using an existing message.
  example: []
  syntax:
    content: public Task<bool> PromptUserConfirmAsync(IUserMessage message, EmbedBuilder embed, ulong userid)
    parameters:
    - id: message
      type: Discord.IUserMessage
      description: The existing message to modify with the prompt.
    - id: embed
      type: Discord.EmbedBuilder
      description: The embed to be displayed to the user.
    - id: userid
      type: System.UInt64
      description: The ID of the user to prompt.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task representing the asynchronous operation, containing a boolean indicating the user's response.
    content.vb: Public Function PromptUserConfirmAsync(message As IUserMessage, embed As EmbedBuilder, userid As ULong) As Task(Of Boolean)
  overload: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync*
  nameWithType.vb: MewdekoModule.PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage, Discord.EmbedBuilder, ULong)
  name.vb: PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ULong)
- uid: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  commentId: M:Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  id: GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: GetButtonInputAsync(ulong, ulong, ulong, bool)
  nameWithType: MewdekoModule.GetButtonInputAsync(ulong, ulong, ulong, bool)
  fullName: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(ulong, ulong, ulong, bool)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetButtonInputAsync
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 196
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Gets the user input from a button interaction asynchronously.
  example: []
  syntax:
    content: public Task<string>? GetButtonInputAsync(ulong channelId, ulong msgId, ulong userId, bool alreadyDeferred = false)
    parameters:
    - id: channelId
      type: System.UInt64
      description: The ID of the channel where the interaction occurred.
    - id: msgId
      type: System.UInt64
      description: The ID of the message where the interaction occurred.
    - id: userId
      type: System.UInt64
      description: The ID of the user who interacted with the button.
    - id: alreadyDeferred
      type: System.Boolean
      description: Determines whether the interaction has already been deferred.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A task representing the asynchronous operation, containing the user input string.
    content.vb: Public Function GetButtonInputAsync(channelId As ULong, msgId As ULong, userId As ULong, alreadyDeferred As Boolean = False) As Task(Of String)
  overload: Mewdeko.Common.MewdekoModule.GetButtonInputAsync*
  nameWithType.vb: MewdekoModule.GetButtonInputAsync(ULong, ULong, ULong, Boolean)
  fullName.vb: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(ULong, ULong, ULong, Boolean)
  name.vb: GetButtonInputAsync(ULong, ULong, ULong, Boolean)
- uid: Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
  id: NextMessageAsync(System.UInt64,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: NextMessageAsync(ulong, ulong)
  nameWithType: MewdekoModule.NextMessageAsync(ulong, ulong)
  fullName: Mewdeko.Common.MewdekoModule.NextMessageAsync(ulong, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: NextMessageAsync
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 250
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Gets the next message sent by the user asynchronously.
  example: []
  syntax:
    content: public Task<string>? NextMessageAsync(ulong channelId, ulong userId)
    parameters:
    - id: channelId
      type: System.UInt64
      description: The ID of the channel where the message is expected.
    - id: userId
      type: System.UInt64
      description: The ID of the user whose message is awaited.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A task representing the asynchronous operation, containing the user's message content.
    content.vb: Public Function NextMessageAsync(channelId As ULong, userId As ULong) As Task(Of String)
  overload: Mewdeko.Common.MewdekoModule.NextMessageAsync*
  nameWithType.vb: MewdekoModule.NextMessageAsync(ULong, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.NextMessageAsync(ULong, ULong)
  name.vb: NextMessageAsync(ULong, ULong)
- uid: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
  id: NextFullMessageAsync(System.UInt64,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  langs:
  - csharp
  - vb
  name: NextFullMessageAsync(ulong, ulong)
  nameWithType: MewdekoModule.NextFullMessageAsync(ulong, ulong)
  fullName: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(ulong, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Common/MewdekoModuleBase.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: NextFullMessageAsync
    path: src/Mewdeko/Common/MewdekoModuleBase.cs
    startLine: 294
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Common
  summary: Gets the next message sent by the user asynchronously, including the message object.
  example: []
  syntax:
    content: public Task<SocketMessage>? NextFullMessageAsync(ulong channelId, ulong userId)
    parameters:
    - id: channelId
      type: System.UInt64
      description: The ID of the channel where the message is expected.
    - id: userId
      type: System.UInt64
      description: The ID of the user whose message is awaited.
    return:
      type: System.Threading.Tasks.Task{Discord.WebSocket.SocketMessage}
      description: A task representing the asynchronous operation, containing the user's message.
    content.vb: Public Function NextFullMessageAsync(channelId As ULong, userId As ULong) As Task(Of SocketMessage)
  overload: Mewdeko.Common.MewdekoModule.NextFullMessageAsync*
  nameWithType.vb: MewdekoModule.NextFullMessageAsync(ULong, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(ULong, ULong)
  name.vb: NextFullMessageAsync(ULong, ULong)
references:
- uid: Mewdeko.Common
  commentId: N:Mewdeko.Common
  href: Mewdeko.html
  name: Mewdeko.Common
  nameWithType: Mewdeko.Common
  fullName: Mewdeko.Common
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  commentId: T:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  parent: Discord.Commands
  definition: Discord.Commands.ModuleBase`1
  name: ModuleBase<ICommandContext>
  nameWithType: ModuleBase<ICommandContext>
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>
  nameWithType.vb: ModuleBase(Of ICommandContext)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext)
  name.vb: ModuleBase(Of ICommandContext)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: <
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase
  commentId: T:Discord.Commands.ModuleBase
  parent: Discord.Commands
  isExternal: true
  name: ModuleBase
  nameWithType: ModuleBase
  fullName: Discord.Commands.ModuleBase
- uid: Discord.Commands.IModuleBase
  commentId: T:Discord.Commands.IModuleBase
  parent: Discord.Commands
  isExternal: true
  name: IModuleBase
  nameWithType: IModuleBase
  fullName: Discord.Commands.IModuleBase
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  nameWithType: ModuleBase<ICommandContext>.ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.ReplyAsync(string, bool, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker[], Discord.Embed[], Discord.MessageFlags)
  nameWithType.vb: ModuleBase(Of ICommandContext).ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).ReplyAsync(String, Boolean, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker(), Discord.Embed(), Discord.MessageFlags)
  name.vb: ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  name: BeforeExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.BeforeExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).BeforeExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).BeforeExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
  name: AfterExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.AfterExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.AfterExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).AfterExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).AfterExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  name: AfterExecute(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.AfterExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.AfterExecute(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).AfterExecute(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).AfterExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  name: OnModuleBuilding(CommandService, ModuleBuilder)
  nameWithType: ModuleBase<ICommandContext>.OnModuleBuilding(CommandService, ModuleBuilder)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  nameWithType.vb: ModuleBase(Of ICommandContext).OnModuleBuilding(CommandService, ModuleBuilder)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.Context
  commentId: P:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.Context
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.Context
  name: Context
  nameWithType: ModuleBase<ICommandContext>.Context
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.Context
  nameWithType.vb: ModuleBase(Of ICommandContext).Context
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).Context
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Mewdeko.Common.MewdekoModule.Mewdeko.Extensions.Extensions.ThrowIfNull``1(System.String)
  commentId: M:Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  parent: Mewdeko.Extensions.Extensions
  definition: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  name: ThrowIfNull<MewdekoModule>(MewdekoModule, string)
  nameWithType: Extensions.ThrowIfNull<MewdekoModule>(MewdekoModule, string)
  fullName: Mewdeko.Extensions.Extensions.ThrowIfNull<Mewdeko.Common.MewdekoModule>(Mewdeko.Common.MewdekoModule, string)
  nameWithType.vb: Extensions.ThrowIfNull(Of MewdekoModule)(MewdekoModule, String)
  fullName.vb: Mewdeko.Extensions.Extensions.ThrowIfNull(Of Mewdeko.Common.MewdekoModule)(Mewdeko.Common.MewdekoModule, String)
  name.vb: ThrowIfNull(Of MewdekoModule)(MewdekoModule, String)
  spec.csharp:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(Mewdeko.Common.MewdekoModule,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: <
  - uid: Mewdeko.Common.MewdekoModule
    name: MewdekoModule
    href: Mewdeko.Common.MewdekoModule.html
  - name: '>'
  - name: (
  - uid: Mewdeko.Common.MewdekoModule
    name: MewdekoModule
    href: Mewdeko.Common.MewdekoModule.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(Mewdeko.Common.MewdekoModule,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Common.MewdekoModule
    name: MewdekoModule
    href: Mewdeko.Common.MewdekoModule.html
  - name: )
  - name: (
  - uid: Mewdeko.Common.MewdekoModule
    name: MewdekoModule
    href: Mewdeko.Common.MewdekoModule.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Commands.ModuleBase`1
  commentId: T:Discord.Commands.ModuleBase`1
  isExternal: true
  name: ModuleBase<T>
  nameWithType: ModuleBase<T>
  fullName: Discord.Commands.ModuleBase<T>
  nameWithType.vb: ModuleBase(Of T)
  fullName.vb: Discord.Commands.ModuleBase(Of T)
  name.vb: ModuleBase(Of T)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Discord.Commands
  commentId: N:Discord.Commands
  isExternal: true
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
  spec.csharp:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.Commands
    name: Commands
    isExternal: true
  spec.vb:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.Commands
    name: Commands
    isExternal: true
- uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  commentId: M:Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  nameWithType: ModuleBase<T>.ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  fullName: Discord.Commands.ModuleBase<T>.ReplyAsync(string, bool, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker[], Discord.Embed[], Discord.MessageFlags)
  nameWithType.vb: ModuleBase(Of T).ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  fullName.vb: Discord.Commands.ModuleBase(Of T).ReplyAsync(String, Boolean, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker(), Discord.Embed(), Discord.MessageFlags)
  name.vb: ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  isExternal: true
  name: BeforeExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<T>.BeforeExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).BeforeExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).BeforeExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
  isExternal: true
  name: AfterExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<T>.AfterExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.AfterExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).AfterExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).AfterExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  isExternal: true
  name: AfterExecute(CommandInfo)
  nameWithType: ModuleBase<T>.AfterExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.AfterExecute(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).AfterExecute(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).AfterExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  commentId: M:Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  isExternal: true
  name: OnModuleBuilding(CommandService, ModuleBuilder)
  nameWithType: ModuleBase<T>.OnModuleBuilding(CommandService, ModuleBuilder)
  fullName: Discord.Commands.ModuleBase<T>.OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  nameWithType.vb: ModuleBase(Of T).OnModuleBuilding(CommandService, ModuleBuilder)
  fullName.vb: Discord.Commands.ModuleBase(Of T).OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.Context
  commentId: P:Discord.Commands.ModuleBase`1.Context
  isExternal: true
  name: Context
  nameWithType: ModuleBase<T>.Context
  fullName: Discord.Commands.ModuleBase<T>.Context
  nameWithType.vb: ModuleBase(Of T).Context
  fullName.vb: Discord.Commands.ModuleBase(Of T).Context
- uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  commentId: M:Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  isExternal: true
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  name: ThrowIfNull<T>(T, string)
  nameWithType: Extensions.ThrowIfNull<T>(T, string)
  fullName: Mewdeko.Extensions.Extensions.ThrowIfNull<T>(T, string)
  nameWithType.vb: Extensions.ThrowIfNull(Of T)(T, String)
  fullName.vb: Mewdeko.Extensions.Extensions.ThrowIfNull(Of T)(T, String)
  name.vb: ThrowIfNull(Of T)(T, String)
  spec.csharp:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Mewdeko.Extensions.Extensions
  commentId: T:Mewdeko.Extensions.Extensions
  parent: Mewdeko.Extensions
  href: Mewdeko.Extensions.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: Mewdeko.Extensions.Extensions
- uid: Mewdeko.Extensions
  commentId: N:Mewdeko.Extensions
  href: Mewdeko.html
  name: Mewdeko.Extensions
  nameWithType: Mewdeko.Extensions
  fullName: Mewdeko.Extensions
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Extensions
    name: Extensions
    href: Mewdeko.Extensions.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Extensions
    name: Extensions
    href: Mewdeko.Extensions.html
- uid: Mewdeko.Common.MewdekoModule.CultureInfo*
  commentId: Overload:Mewdeko.Common.MewdekoModule.CultureInfo
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CultureInfo
  name: CultureInfo
  nameWithType: MewdekoModule.CultureInfo
  fullName: Mewdeko.Common.MewdekoModule.CultureInfo
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.globalization.cultureinfo
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Globalization
    name: Globalization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.globalization
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Globalization
    name: Globalization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.globalization
- uid: Mewdeko.Common.MewdekoModule.Strings*
  commentId: Overload:Mewdeko.Common.MewdekoModule.Strings
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_Strings
  name: Strings
  nameWithType: MewdekoModule.Strings
  fullName: Mewdeko.Common.MewdekoModule.Strings
- uid: Mewdeko.Services.strings.IBotStrings
  commentId: T:Mewdeko.Services.strings.IBotStrings
  parent: Mewdeko.Services.strings
  href: Mewdeko.Services.strings.IBotStrings.html
  name: IBotStrings
  nameWithType: IBotStrings
  fullName: Mewdeko.Services.strings.IBotStrings
- uid: Mewdeko.Services.strings
  commentId: N:Mewdeko.Services.strings
  href: Mewdeko.html
  name: Mewdeko.Services.strings
  nameWithType: Mewdeko.Services.strings
  fullName: Mewdeko.Services.strings
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
  - name: .
  - uid: Mewdeko.Services.strings
    name: strings
    href: Mewdeko.Services.strings.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
  - name: .
  - uid: Mewdeko.Services.strings
    name: strings
    href: Mewdeko.Services.strings.html
- uid: Mewdeko.Common.MewdekoModule.Localization*
  commentId: Overload:Mewdeko.Common.MewdekoModule.Localization
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_Localization
  name: Localization
  nameWithType: MewdekoModule.Localization
  fullName: Mewdeko.Common.MewdekoModule.Localization
- uid: Mewdeko.Services.ILocalization
  commentId: T:Mewdeko.Services.ILocalization
  parent: Mewdeko.Services
  href: Mewdeko.Services.ILocalization.html
  name: ILocalization
  nameWithType: ILocalization
  fullName: Mewdeko.Services.ILocalization
- uid: Mewdeko.Services
  commentId: N:Mewdeko.Services
  href: Mewdeko.html
  name: Mewdeko.Services
  nameWithType: Mewdeko.Services
  fullName: Mewdeko.Services
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
- uid: Mewdeko.Common.MewdekoModule.ctx*
  commentId: Overload:Mewdeko.Common.MewdekoModule.ctx
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ctx
  name: ctx
  nameWithType: MewdekoModule.ctx
  fullName: Mewdeko.Common.MewdekoModule.ctx
- uid: Discord.Commands.ICommandContext
  commentId: T:Discord.Commands.ICommandContext
  parent: Discord.Commands
  isExternal: true
  name: ICommandContext
  nameWithType: ICommandContext
  fullName: Discord.Commands.ICommandContext
- uid: Mewdeko.Common.MewdekoModule.Config*
  commentId: Overload:Mewdeko.Common.MewdekoModule.Config
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_Config
  name: Config
  nameWithType: MewdekoModule.Config
  fullName: Mewdeko.Common.MewdekoModule.Config
- uid: Mewdeko.Common.Configs.BotConfig
  commentId: T:Mewdeko.Common.Configs.BotConfig
  parent: Mewdeko.Common.Configs
  href: Mewdeko.Common.Configs.BotConfig.html
  name: BotConfig
  nameWithType: BotConfig
  fullName: Mewdeko.Common.Configs.BotConfig
- uid: Mewdeko.Common.Configs
  commentId: N:Mewdeko.Common.Configs
  href: Mewdeko.html
  name: Mewdeko.Common.Configs
  nameWithType: Mewdeko.Common.Configs
  fullName: Mewdeko.Common.Configs
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
  - name: .
  - uid: Mewdeko.Common.Configs
    name: Configs
    href: Mewdeko.Common.Configs.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
  - name: .
  - uid: Mewdeko.Common.Configs
    name: Configs
    href: Mewdeko.Common.Configs.html
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecute(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.BeforeExecute(Discord.Commands.CommandInfo)
  name: BeforeExecute(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.BeforeExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.BeforeExecute(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).BeforeExecute(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).BeforeExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecute(Discord.Commands.CommandInfo)
    name: BeforeExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecute(Discord.Commands.CommandInfo)
    name: BeforeExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Mewdeko.Common.MewdekoModule.BeforeExecute*
  commentId: Overload:Mewdeko.Common.MewdekoModule.BeforeExecute
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_BeforeExecute_Discord_Commands_CommandInfo_
  name: BeforeExecute
  nameWithType: MewdekoModule.BeforeExecute
  fullName: Mewdeko.Common.MewdekoModule.BeforeExecute
- uid: Discord.Commands.CommandInfo
  commentId: T:Discord.Commands.CommandInfo
  parent: Discord.Commands
  isExternal: true
  name: CommandInfo
  nameWithType: CommandInfo
  fullName: Discord.Commands.CommandInfo
- uid: Discord.Commands.ModuleBase`1.BeforeExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.BeforeExecute(Discord.Commands.CommandInfo)
  isExternal: true
  name: BeforeExecute(CommandInfo)
  nameWithType: ModuleBase<T>.BeforeExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.BeforeExecute(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).BeforeExecute(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).BeforeExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.BeforeExecute(Discord.Commands.CommandInfo)
    name: BeforeExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.BeforeExecute(Discord.Commands.CommandInfo)
    name: BeforeExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Mewdeko.Common.MewdekoModule.GetText*
  commentId: Overload:Mewdeko.Common.MewdekoModule.GetText
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_
  name: GetText
  nameWithType: MewdekoModule.GetText
  fullName: Mewdeko.Common.MewdekoModule.GetText
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Object[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object[]
  nameWithType: object[]
  fullName: object[]
  nameWithType.vb: Object()
  fullName.vb: Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync*
  commentId: Overload:Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ErrorLocalizedAsync_System_String_System_Object___
  name: ErrorLocalizedAsync
  nameWithType: MewdekoModule.ErrorLocalizedAsync
  fullName: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync
- uid: System.Threading.Tasks.Task{Discord.IUserMessage}
  commentId: T:System.Threading.Tasks.Task{Discord.IUserMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IUserMessage>
  nameWithType: Task<IUserMessage>
  fullName: System.Threading.Tasks.Task<Discord.IUserMessage>
  nameWithType.vb: Task(Of IUserMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IUserMessage)
  name.vb: Task(Of IUserMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Discord.IUserMessage
    name: IUserMessage
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Discord.IUserMessage
    name: IUserMessage
    isExternal: true
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync*
  commentId: Overload:Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyErrorLocalizedAsync_System_String_System_Object___
  name: ReplyErrorLocalizedAsync
  nameWithType: MewdekoModule.ReplyErrorLocalizedAsync
  fullName: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync
- uid: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync*
  commentId: Overload:Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ConfirmLocalizedAsync_System_String_System_Object___
  name: ConfirmLocalizedAsync
  nameWithType: MewdekoModule.ConfirmLocalizedAsync
  fullName: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync
- uid: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync*
  commentId: Overload:Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyConfirmLocalizedAsync_System_String_System_Object___
  name: ReplyConfirmLocalizedAsync
  nameWithType: MewdekoModule.ReplyConfirmLocalizedAsync
  fullName: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync*
  commentId: Overload:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_System_String_System_UInt64_
  name: PromptUserConfirmAsync
  nameWithType: MewdekoModule.PromptUserConfirmAsync
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Discord.EmbedBuilder
  commentId: T:Discord.EmbedBuilder
  parent: Discord
  isExternal: true
  name: EmbedBuilder
  nameWithType: EmbedBuilder
  fullName: Discord.EmbedBuilder
- uid: Discord
  commentId: N:Discord
  isExternal: true
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy*
  commentId: Overload:Mewdeko.Common.MewdekoModule.CheckRoleHierarchy
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CheckRoleHierarchy_Discord_IGuildUser_System_Boolean_
  name: CheckRoleHierarchy
  nameWithType: MewdekoModule.CheckRoleHierarchy
  fullName: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy
- uid: Discord.IGuildUser
  commentId: T:Discord.IGuildUser
  parent: Discord
  isExternal: true
  name: IGuildUser
  nameWithType: IGuildUser
  fullName: Discord.IGuildUser
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Discord.IUserMessage
  commentId: T:Discord.IUserMessage
  parent: Discord
  isExternal: true
  name: IUserMessage
  nameWithType: IUserMessage
  fullName: Discord.IUserMessage
- uid: Mewdeko.Common.MewdekoModule.GetButtonInputAsync*
  commentId: Overload:Mewdeko.Common.MewdekoModule.GetButtonInputAsync
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetButtonInputAsync_System_UInt64_System_UInt64_System_UInt64_System_Boolean_
  name: GetButtonInputAsync
  nameWithType: MewdekoModule.GetButtonInputAsync
  fullName: Mewdeko.Common.MewdekoModule.GetButtonInputAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Mewdeko.Common.MewdekoModule.NextMessageAsync*
  commentId: Overload:Mewdeko.Common.MewdekoModule.NextMessageAsync
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextMessageAsync_System_UInt64_System_UInt64_
  name: NextMessageAsync
  nameWithType: MewdekoModule.NextMessageAsync
  fullName: Mewdeko.Common.MewdekoModule.NextMessageAsync
- uid: Mewdeko.Common.MewdekoModule.NextFullMessageAsync*
  commentId: Overload:Mewdeko.Common.MewdekoModule.NextFullMessageAsync
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextFullMessageAsync_System_UInt64_System_UInt64_
  name: NextFullMessageAsync
  nameWithType: MewdekoModule.NextFullMessageAsync
  fullName: Mewdeko.Common.MewdekoModule.NextFullMessageAsync
- uid: System.Threading.Tasks.Task{Discord.WebSocket.SocketMessage}
  commentId: T:System.Threading.Tasks.Task{Discord.WebSocket.SocketMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<SocketMessage>
  nameWithType: Task<SocketMessage>
  fullName: System.Threading.Tasks.Task<Discord.WebSocket.SocketMessage>
  nameWithType.vb: Task(Of SocketMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.WebSocket.SocketMessage)
  name.vb: Task(Of SocketMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Discord.WebSocket.SocketMessage
    name: SocketMessage
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Discord.WebSocket.SocketMessage
    name: SocketMessage
    isExternal: true
  - name: )
