### YamlMime:ManagedReference
items:
- uid: Mewdeko.Extensions.Extensions
  commentId: T:Mewdeko.Extensions.Extensions
  id: Extensions
  parent: Mewdeko.Extensions
  children:
  - Mewdeko.Extensions.Extensions.AddFakeHeaders(System.Net.Http.Headers.HttpHeaders)
  - Mewdeko.Extensions.Extensions.AddFakeHeaders(System.Net.Http.HttpClient)
  - Mewdeko.Extensions.Extensions.AddPaginatedFooter(Discord.EmbedBuilder,System.Int32,System.Nullable{System.Int32})
  - Mewdeko.Extensions.Extensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})
  - Mewdeko.Extensions.Extensions.AddTypeReaders``1(Discord.Commands.CommandService,Discord.Commands.TypeReader[])
  - Mewdeko.Extensions.Extensions.DeleteAfter(Discord.IMessage,System.Int32)
  - Mewdeko.Extensions.Extensions.DeleteAfter(Discord.IUserMessage,System.Int32)
  - Mewdeko.Extensions.Extensions.GetCtNames(Discord.IApplicationCommand)
  - Mewdeko.Extensions.Extensions.GetFullUsage(System.String,System.String,System.String)
  - Mewdeko.Extensions.Extensions.GetGuildIds(Discord.WebSocket.DiscordSocketClient)
  - Mewdeko.Extensions.Extensions.GetImageSize(System.Net.Http.HttpResponseMessage)
  - Mewdeko.Extensions.Extensions.GetMembersAsync(Discord.IRole)
  - Mewdeko.Extensions.Extensions.GetRealName(Discord.WebSocket.SocketInteraction)
  - Mewdeko.Extensions.Extensions.GetRoles(Discord.IGuildUser)
  - Mewdeko.Extensions.Extensions.GetTopLevelModule(Discord.Commands.ModuleInfo)
  - Mewdeko.Extensions.Extensions.IsAuthor(Discord.IMessage,Discord.IDiscordClient)
  - Mewdeko.Extensions.Extensions.IsImage(System.Net.Http.HttpResponseMessage)
  - Mewdeko.Extensions.Extensions.IsImage(System.Net.Http.HttpResponseMessage,System.String@)
  - Mewdeko.Extensions.Extensions.IsValidAttachment(System.Collections.Generic.IReadOnlyCollection{Discord.IAttachment})
  - Mewdeko.Extensions.Extensions.Map``2(``0[],System.Func{``0,``1})
  - Mewdeko.Extensions.Extensions.MethodName(Discord.Commands.CommandInfo)
  - Mewdeko.Extensions.Extensions.RealRemarksArr(Discord.Commands.CommandInfo,Mewdeko.Services.strings.IBotStrings,System.Nullable{System.UInt64},System.String)
  - Mewdeko.Extensions.Extensions.RealSummary(Discord.Commands.CommandInfo,Mewdeko.Services.strings.IBotStrings,System.Nullable{System.UInt64},System.String)
  - Mewdeko.Extensions.Extensions.RedisKey(Mewdeko.Services.IBotCredentials)
  - Mewdeko.Extensions.Extensions.RemoveRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})
  - Mewdeko.Extensions.Extensions.ReplaceAsync(System.Text.RegularExpressions.Regex,System.String,System.Func{System.Text.RegularExpressions.Match,System.Threading.Tasks.Task{System.String}})
  - Mewdeko.Extensions.Extensions.SendConfirmAsync(Discord.IDiscordInteraction,System.String)
  - Mewdeko.Extensions.Extensions.SendConfirmFollowupAsync(Discord.IDiscordInteraction,System.String)
  - Mewdeko.Extensions.Extensions.SendConfirmFollowupAsync(Discord.IDiscordInteraction,System.String,Discord.ComponentBuilder)
  - Mewdeko.Extensions.Extensions.SendEphemeralConfirmAsync(Discord.IDiscordInteraction,System.String)
  - Mewdeko.Extensions.Extensions.SendEphemeralErrorAsync(Discord.IDiscordInteraction,System.String,Mewdeko.Common.Configs.BotConfig)
  - Mewdeko.Extensions.Extensions.SendEphemeralFollowupConfirmAsync(Discord.IDiscordInteraction,System.String)
  - Mewdeko.Extensions.Extensions.SendEphemeralFollowupErrorAsync(Discord.IDiscordInteraction,System.String,Mewdeko.Common.Configs.BotConfig)
  - Mewdeko.Extensions.Extensions.SendErrorAsync(Discord.IDiscordInteraction,System.String,Mewdeko.Common.Configs.BotConfig)
  - Mewdeko.Extensions.Extensions.SendErrorFollowupAsync(Discord.IDiscordInteraction,System.String,Mewdeko.Common.Configs.BotConfig)
  - Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  - Mewdeko.Extensions.Extensions.ToIEmote(System.String)
  - Mewdeko.Extensions.Extensions.ToPrettyStringHm(System.TimeSpan)
  - Mewdeko.Extensions.Extensions.ToSkImage(System.Byte[])
  - Mewdeko.Extensions.Extensions.ToStream(SkiaSharp.SKImage,SkiaSharp.SKEncodedImageFormat)
  - Mewdeko.Extensions.Extensions.ToStream(System.Collections.Generic.IEnumerable{System.Byte},System.Boolean)
  - Mewdeko.Extensions.Extensions.TryGetConfig(System.Collections.Generic.List{Mewdeko.Database.Models.GuildConfig},System.UInt64,Mewdeko.Database.Models.GuildConfig@)
  - Mewdeko.Extensions.Extensions.TryGetUrlPath(System.String,System.String@)
  - Mewdeko.Extensions.Extensions.TryToIEmote(System.String,Discord.IEmote@)
  - Mewdeko.Extensions.Extensions.UrlRegex
  - Mewdeko.Extensions.Extensions.WithErrorColor(Discord.EmbedBuilder)
  - Mewdeko.Extensions.Extensions.WithErrorColor(Fergun.Interactive.PageBuilder)
  - Mewdeko.Extensions.Extensions.WithOkColor(Discord.EmbedBuilder)
  - Mewdeko.Extensions.Extensions.WithOkColor(Fergun.Interactive.PageBuilder)
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: Extensions
  fullName: Mewdeko.Extensions.Extensions
  type: Class
  source:
    id: Extensions
    path: System.Text.RegularExpressions.Generator\System.Text.RegularExpressions.Generator.RegexGenerator\RegexGenerator.g.cs
    startLine: 110
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Most of the extension methods for Mewdeko.
  example: []
  syntax:
    content: public static class Extensions
    content.vb: Public Module Extensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Mewdeko.Extensions.Extensions.UrlRegex
  commentId: F:Mewdeko.Extensions.Extensions.UrlRegex
  id: UrlRegex
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: UrlRegex
  nameWithType: Extensions.UrlRegex
  fullName: Mewdeko.Extensions.Extensions.UrlRegex
  type: Field
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: UrlRegex
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 26
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Regular expression for matching URLs.
  example: []
  syntax:
    content: public static readonly Regex UrlRegex
    return:
      type: System.Text.RegularExpressions.Regex
    content.vb: Public Shared ReadOnly UrlRegex As Regex
- uid: Mewdeko.Extensions.Extensions.Map``2(``0[],System.Func{``0,``1})
  commentId: M:Mewdeko.Extensions.Extensions.Map``2(``0[],System.Func{``0,``1})
  id: Map``2(``0[],System.Func{``0,``1})
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: Map<TIn, TOut>(TIn[], Func<TIn, TOut>)
  nameWithType: Extensions.Map<TIn, TOut>(TIn[], Func<TIn, TOut>)
  fullName: Mewdeko.Extensions.Extensions.Map<TIn, TOut>(TIn[], System.Func<TIn, TOut>)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Map
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 36
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Maps each element in the input array to an output array using the provided function.
  example: []
  syntax:
    content: public static TOut[] Map<TIn, TOut>(this TIn[] arr, Func<TIn, TOut> f)
    parameters:
    - id: arr
      type: '{TIn}[]'
      description: Input array.
    - id: f
      type: System.Func{{TIn},{TOut}}
      description: Mapping function.
    typeParameters:
    - id: TIn
      description: Input array element type.
    - id: TOut
      description: Output array element type.
    return:
      type: '{TOut}[]'
      description: Mapped array.
    content.vb: Public Shared Function Map(Of TIn, TOut)(arr As TIn(), f As Func(Of TIn, TOut)) As TOut()
  overload: Mewdeko.Extensions.Extensions.Map*
  nameWithType.vb: Extensions.Map(Of TIn, TOut)(TIn(), Func(Of TIn, TOut))
  fullName.vb: Mewdeko.Extensions.Extensions.Map(Of TIn, TOut)(TIn(), System.Func(Of TIn, TOut))
  name.vb: Map(Of TIn, TOut)(TIn(), Func(Of TIn, TOut))
- uid: Mewdeko.Extensions.Extensions.SendConfirmAsync(Discord.IDiscordInteraction,System.String)
  commentId: M:Mewdeko.Extensions.Extensions.SendConfirmAsync(Discord.IDiscordInteraction,System.String)
  id: SendConfirmAsync(Discord.IDiscordInteraction,System.String)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: SendConfirmAsync(IDiscordInteraction, string?)
  nameWithType: Extensions.SendConfirmAsync(IDiscordInteraction, string?)
  fullName: Mewdeko.Extensions.Extensions.SendConfirmAsync(Discord.IDiscordInteraction, string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SendConfirmAsync
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 44
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Sends a confirmation message asynchronously.
  example: []
  syntax:
    content: public static Task SendConfirmAsync(this IDiscordInteraction interaction, string? message)
    parameters:
    - id: interaction
      type: Discord.IDiscordInteraction
      description: Discord interaction context.
    - id: message
      type: System.String
      description: Message to include in the confirmation.
    return:
      type: System.Threading.Tasks.Task
      description: Task representing the asynchronous operation.
    content.vb: Public Shared Function SendConfirmAsync(interaction As IDiscordInteraction, message As String) As Task
  overload: Mewdeko.Extensions.Extensions.SendConfirmAsync*
  nameWithType.vb: Extensions.SendConfirmAsync(IDiscordInteraction, String)
  fullName.vb: Mewdeko.Extensions.Extensions.SendConfirmAsync(Discord.IDiscordInteraction, String)
  name.vb: SendConfirmAsync(IDiscordInteraction, String)
- uid: Mewdeko.Extensions.Extensions.SendEphemeralConfirmAsync(Discord.IDiscordInteraction,System.String)
  commentId: M:Mewdeko.Extensions.Extensions.SendEphemeralConfirmAsync(Discord.IDiscordInteraction,System.String)
  id: SendEphemeralConfirmAsync(Discord.IDiscordInteraction,System.String)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: SendEphemeralConfirmAsync(IDiscordInteraction, string)
  nameWithType: Extensions.SendEphemeralConfirmAsync(IDiscordInteraction, string)
  fullName: Mewdeko.Extensions.Extensions.SendEphemeralConfirmAsync(Discord.IDiscordInteraction, string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SendEphemeralConfirmAsync
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 53
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Sends a confirmation message asynchronously with ephemeral visibility.
  example: []
  syntax:
    content: public static Task SendEphemeralConfirmAsync(this IDiscordInteraction interaction, string message)
    parameters:
    - id: interaction
      type: Discord.IDiscordInteraction
      description: Discord interaction context.
    - id: message
      type: System.String
      description: Message to include in the confirmation.
    return:
      type: System.Threading.Tasks.Task
      description: Task representing the asynchronous operation.
    content.vb: Public Shared Function SendEphemeralConfirmAsync(interaction As IDiscordInteraction, message As String) As Task
  overload: Mewdeko.Extensions.Extensions.SendEphemeralConfirmAsync*
  nameWithType.vb: Extensions.SendEphemeralConfirmAsync(IDiscordInteraction, String)
  fullName.vb: Mewdeko.Extensions.Extensions.SendEphemeralConfirmAsync(Discord.IDiscordInteraction, String)
  name.vb: SendEphemeralConfirmAsync(IDiscordInteraction, String)
- uid: Mewdeko.Extensions.Extensions.SendErrorAsync(Discord.IDiscordInteraction,System.String,Mewdeko.Common.Configs.BotConfig)
  commentId: M:Mewdeko.Extensions.Extensions.SendErrorAsync(Discord.IDiscordInteraction,System.String,Mewdeko.Common.Configs.BotConfig)
  id: SendErrorAsync(Discord.IDiscordInteraction,System.String,Mewdeko.Common.Configs.BotConfig)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: SendErrorAsync(IDiscordInteraction, string?, BotConfig)
  nameWithType: Extensions.SendErrorAsync(IDiscordInteraction, string?, BotConfig)
  fullName: Mewdeko.Extensions.Extensions.SendErrorAsync(Discord.IDiscordInteraction, string?, Mewdeko.Common.Configs.BotConfig)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SendErrorAsync
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 64
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Sends an error message asynchronously.
  example: []
  syntax:
    content: public static Task SendErrorAsync(this IDiscordInteraction interaction, string? message, BotConfig config)
    parameters:
    - id: interaction
      type: Discord.IDiscordInteraction
      description: Discord interaction context.
    - id: message
      type: System.String
      description: Message to include in the error.
    - id: config
      type: Mewdeko.Common.Configs.BotConfig
      description: Bot configuration.
    return:
      type: System.Threading.Tasks.Task
      description: Task representing the asynchronous operation.
    content.vb: Public Shared Function SendErrorAsync(interaction As IDiscordInteraction, message As String, config As BotConfig) As Task
  overload: Mewdeko.Extensions.Extensions.SendErrorAsync*
  nameWithType.vb: Extensions.SendErrorAsync(IDiscordInteraction, String, BotConfig)
  fullName.vb: Mewdeko.Extensions.Extensions.SendErrorAsync(Discord.IDiscordInteraction, String, Mewdeko.Common.Configs.BotConfig)
  name.vb: SendErrorAsync(IDiscordInteraction, String, BotConfig)
- uid: Mewdeko.Extensions.Extensions.SendEphemeralErrorAsync(Discord.IDiscordInteraction,System.String,Mewdeko.Common.Configs.BotConfig)
  commentId: M:Mewdeko.Extensions.Extensions.SendEphemeralErrorAsync(Discord.IDiscordInteraction,System.String,Mewdeko.Common.Configs.BotConfig)
  id: SendEphemeralErrorAsync(Discord.IDiscordInteraction,System.String,Mewdeko.Common.Configs.BotConfig)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: SendEphemeralErrorAsync(IDiscordInteraction, string?, BotConfig)
  nameWithType: Extensions.SendEphemeralErrorAsync(IDiscordInteraction, string?, BotConfig)
  fullName: Mewdeko.Extensions.Extensions.SendEphemeralErrorAsync(Discord.IDiscordInteraction, string?, Mewdeko.Common.Configs.BotConfig)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SendEphemeralErrorAsync
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 80
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Sends an error message asynchronously with ephemeral visibility.
  example: []
  syntax:
    content: public static Task SendEphemeralErrorAsync(this IDiscordInteraction interaction, string? message, BotConfig config)
    parameters:
    - id: interaction
      type: Discord.IDiscordInteraction
      description: Discord interaction context.
    - id: message
      type: System.String
      description: Message to include in the error.
    - id: config
      type: Mewdeko.Common.Configs.BotConfig
      description: Bot configuration.
    return:
      type: System.Threading.Tasks.Task
      description: Task representing the asynchronous operation.
    content.vb: Public Shared Function SendEphemeralErrorAsync(interaction As IDiscordInteraction, message As String, config As BotConfig) As Task
  overload: Mewdeko.Extensions.Extensions.SendEphemeralErrorAsync*
  nameWithType.vb: Extensions.SendEphemeralErrorAsync(IDiscordInteraction, String, BotConfig)
  fullName.vb: Mewdeko.Extensions.Extensions.SendEphemeralErrorAsync(Discord.IDiscordInteraction, String, Mewdeko.Common.Configs.BotConfig)
  name.vb: SendEphemeralErrorAsync(IDiscordInteraction, String, BotConfig)
- uid: Mewdeko.Extensions.Extensions.SendConfirmFollowupAsync(Discord.IDiscordInteraction,System.String)
  commentId: M:Mewdeko.Extensions.Extensions.SendConfirmFollowupAsync(Discord.IDiscordInteraction,System.String)
  id: SendConfirmFollowupAsync(Discord.IDiscordInteraction,System.String)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: SendConfirmFollowupAsync(IDiscordInteraction, string)
  nameWithType: Extensions.SendConfirmFollowupAsync(IDiscordInteraction, string)
  fullName: Mewdeko.Extensions.Extensions.SendConfirmFollowupAsync(Discord.IDiscordInteraction, string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SendConfirmFollowupAsync
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 95
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Sends a confirmation follow-up message asynchronously.
  example: []
  syntax:
    content: public static Task<IUserMessage> SendConfirmFollowupAsync(this IDiscordInteraction interaction, string message)
    parameters:
    - id: interaction
      type: Discord.IDiscordInteraction
      description: Discord interaction context.
    - id: message
      type: System.String
      description: Message to include in the follow-up.
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: Task representing the asynchronous operation.
    content.vb: Public Shared Function SendConfirmFollowupAsync(interaction As IDiscordInteraction, message As String) As Task(Of IUserMessage)
  overload: Mewdeko.Extensions.Extensions.SendConfirmFollowupAsync*
  nameWithType.vb: Extensions.SendConfirmFollowupAsync(IDiscordInteraction, String)
  fullName.vb: Mewdeko.Extensions.Extensions.SendConfirmFollowupAsync(Discord.IDiscordInteraction, String)
  name.vb: SendConfirmFollowupAsync(IDiscordInteraction, String)
- uid: Mewdeko.Extensions.Extensions.SendConfirmFollowupAsync(Discord.IDiscordInteraction,System.String,Discord.ComponentBuilder)
  commentId: M:Mewdeko.Extensions.Extensions.SendConfirmFollowupAsync(Discord.IDiscordInteraction,System.String,Discord.ComponentBuilder)
  id: SendConfirmFollowupAsync(Discord.IDiscordInteraction,System.String,Discord.ComponentBuilder)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: SendConfirmFollowupAsync(IDiscordInteraction, string, ComponentBuilder)
  nameWithType: Extensions.SendConfirmFollowupAsync(IDiscordInteraction, string, ComponentBuilder)
  fullName: Mewdeko.Extensions.Extensions.SendConfirmFollowupAsync(Discord.IDiscordInteraction, string, Discord.ComponentBuilder)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SendConfirmFollowupAsync
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 106
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Sends a confirmation follow-up message asynchronously with a custom component builder.
  example: []
  syntax:
    content: public static Task<IUserMessage> SendConfirmFollowupAsync(this IDiscordInteraction interaction, string message, ComponentBuilder builder)
    parameters:
    - id: interaction
      type: Discord.IDiscordInteraction
      description: Discord interaction context.
    - id: message
      type: System.String
      description: Message to include in the follow-up.
    - id: builder
      type: Discord.ComponentBuilder
      description: Component builder for additional interaction components.
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: Task representing the asynchronous operation.
    content.vb: Public Shared Function SendConfirmFollowupAsync(interaction As IDiscordInteraction, message As String, builder As ComponentBuilder) As Task(Of IUserMessage)
  overload: Mewdeko.Extensions.Extensions.SendConfirmFollowupAsync*
  nameWithType.vb: Extensions.SendConfirmFollowupAsync(IDiscordInteraction, String, ComponentBuilder)
  fullName.vb: Mewdeko.Extensions.Extensions.SendConfirmFollowupAsync(Discord.IDiscordInteraction, String, Discord.ComponentBuilder)
  name.vb: SendConfirmFollowupAsync(IDiscordInteraction, String, ComponentBuilder)
- uid: Mewdeko.Extensions.Extensions.SendEphemeralFollowupConfirmAsync(Discord.IDiscordInteraction,System.String)
  commentId: M:Mewdeko.Extensions.Extensions.SendEphemeralFollowupConfirmAsync(Discord.IDiscordInteraction,System.String)
  id: SendEphemeralFollowupConfirmAsync(Discord.IDiscordInteraction,System.String)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: SendEphemeralFollowupConfirmAsync(IDiscordInteraction, string)
  nameWithType: Extensions.SendEphemeralFollowupConfirmAsync(IDiscordInteraction, string)
  fullName: Mewdeko.Extensions.Extensions.SendEphemeralFollowupConfirmAsync(Discord.IDiscordInteraction, string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SendEphemeralFollowupConfirmAsync
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 117
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Sends an ephemeral follow-up confirmation message asynchronously.
  example: []
  syntax:
    content: public static Task<IUserMessage> SendEphemeralFollowupConfirmAsync(this IDiscordInteraction interaction, string message)
    parameters:
    - id: interaction
      type: Discord.IDiscordInteraction
      description: Discord interaction context.
    - id: message
      type: System.String
      description: Message to include in the follow-up.
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: Task representing the asynchronous operation.
    content.vb: Public Shared Function SendEphemeralFollowupConfirmAsync(interaction As IDiscordInteraction, message As String) As Task(Of IUserMessage)
  overload: Mewdeko.Extensions.Extensions.SendEphemeralFollowupConfirmAsync*
  nameWithType.vb: Extensions.SendEphemeralFollowupConfirmAsync(IDiscordInteraction, String)
  fullName.vb: Mewdeko.Extensions.Extensions.SendEphemeralFollowupConfirmAsync(Discord.IDiscordInteraction, String)
  name.vb: SendEphemeralFollowupConfirmAsync(IDiscordInteraction, String)
- uid: Mewdeko.Extensions.Extensions.SendErrorFollowupAsync(Discord.IDiscordInteraction,System.String,Mewdeko.Common.Configs.BotConfig)
  commentId: M:Mewdeko.Extensions.Extensions.SendErrorFollowupAsync(Discord.IDiscordInteraction,System.String,Mewdeko.Common.Configs.BotConfig)
  id: SendErrorFollowupAsync(Discord.IDiscordInteraction,System.String,Mewdeko.Common.Configs.BotConfig)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: SendErrorFollowupAsync(IDiscordInteraction, string, BotConfig)
  nameWithType: Extensions.SendErrorFollowupAsync(IDiscordInteraction, string, BotConfig)
  fullName: Mewdeko.Extensions.Extensions.SendErrorFollowupAsync(Discord.IDiscordInteraction, string, Mewdeko.Common.Configs.BotConfig)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SendErrorFollowupAsync
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 129
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Sends a follow-up error message asynchronously.
  example: []
  syntax:
    content: public static Task<IUserMessage> SendErrorFollowupAsync(this IDiscordInteraction interaction, string message, BotConfig config)
    parameters:
    - id: interaction
      type: Discord.IDiscordInteraction
      description: Discord interaction context.
    - id: message
      type: System.String
      description: Message to include in the error.
    - id: config
      type: Mewdeko.Common.Configs.BotConfig
      description: Bot configuration.
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: Task representing the asynchronous operation.
    content.vb: Public Shared Function SendErrorFollowupAsync(interaction As IDiscordInteraction, message As String, config As BotConfig) As Task(Of IUserMessage)
  overload: Mewdeko.Extensions.Extensions.SendErrorFollowupAsync*
  nameWithType.vb: Extensions.SendErrorFollowupAsync(IDiscordInteraction, String, BotConfig)
  fullName.vb: Mewdeko.Extensions.Extensions.SendErrorFollowupAsync(Discord.IDiscordInteraction, String, Mewdeko.Common.Configs.BotConfig)
  name.vb: SendErrorFollowupAsync(IDiscordInteraction, String, BotConfig)
- uid: Mewdeko.Extensions.Extensions.SendEphemeralFollowupErrorAsync(Discord.IDiscordInteraction,System.String,Mewdeko.Common.Configs.BotConfig)
  commentId: M:Mewdeko.Extensions.Extensions.SendEphemeralFollowupErrorAsync(Discord.IDiscordInteraction,System.String,Mewdeko.Common.Configs.BotConfig)
  id: SendEphemeralFollowupErrorAsync(Discord.IDiscordInteraction,System.String,Mewdeko.Common.Configs.BotConfig)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: SendEphemeralFollowupErrorAsync(IDiscordInteraction, string, BotConfig)
  nameWithType: Extensions.SendEphemeralFollowupErrorAsync(IDiscordInteraction, string, BotConfig)
  fullName: Mewdeko.Extensions.Extensions.SendEphemeralFollowupErrorAsync(Discord.IDiscordInteraction, string, Mewdeko.Common.Configs.BotConfig)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SendEphemeralFollowupErrorAsync
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 146
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Sends an ephemeral follow-up error message asynchronously.
  example: []
  syntax:
    content: public static Task<IUserMessage> SendEphemeralFollowupErrorAsync(this IDiscordInteraction interaction, string message, BotConfig config)
    parameters:
    - id: interaction
      type: Discord.IDiscordInteraction
      description: Discord interaction context.
    - id: message
      type: System.String
      description: Message to include in the error.
    - id: config
      type: Mewdeko.Common.Configs.BotConfig
      description: Bot configuration.
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: Task representing the asynchronous operation.
    content.vb: Public Shared Function SendEphemeralFollowupErrorAsync(interaction As IDiscordInteraction, message As String, config As BotConfig) As Task(Of IUserMessage)
  overload: Mewdeko.Extensions.Extensions.SendEphemeralFollowupErrorAsync*
  nameWithType.vb: Extensions.SendEphemeralFollowupErrorAsync(IDiscordInteraction, String, BotConfig)
  fullName.vb: Mewdeko.Extensions.Extensions.SendEphemeralFollowupErrorAsync(Discord.IDiscordInteraction, String, Mewdeko.Common.Configs.BotConfig)
  name.vb: SendEphemeralFollowupErrorAsync(IDiscordInteraction, String, BotConfig)
- uid: Mewdeko.Extensions.Extensions.IsValidAttachment(System.Collections.Generic.IReadOnlyCollection{Discord.IAttachment})
  commentId: M:Mewdeko.Extensions.Extensions.IsValidAttachment(System.Collections.Generic.IReadOnlyCollection{Discord.IAttachment})
  id: IsValidAttachment(System.Collections.Generic.IReadOnlyCollection{Discord.IAttachment})
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: IsValidAttachment(IReadOnlyCollection<IAttachment>)
  nameWithType: Extensions.IsValidAttachment(IReadOnlyCollection<IAttachment>)
  fullName: Mewdeko.Extensions.Extensions.IsValidAttachment(System.Collections.Generic.IReadOnlyCollection<Discord.IAttachment>)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: IsValidAttachment
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 161
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Checks if the first attachment in the collection is a valid music URL.
  example: []
  syntax:
    content: public static bool IsValidAttachment(this IReadOnlyCollection<IAttachment> attachments)
    parameters:
    - id: attachments
      type: System.Collections.Generic.IReadOnlyCollection{Discord.IAttachment}
      description: Collection of attachments.
    return:
      type: System.Boolean
      description: True if the first attachment is a valid music URL, otherwise false.
    content.vb: Public Shared Function IsValidAttachment(attachments As IReadOnlyCollection(Of IAttachment)) As Boolean
  overload: Mewdeko.Extensions.Extensions.IsValidAttachment*
  nameWithType.vb: Extensions.IsValidAttachment(IReadOnlyCollection(Of IAttachment))
  fullName.vb: Mewdeko.Extensions.Extensions.IsValidAttachment(System.Collections.Generic.IReadOnlyCollection(Of Discord.IAttachment))
  name.vb: IsValidAttachment(IReadOnlyCollection(Of IAttachment))
- uid: Mewdeko.Extensions.Extensions.GetGuildIds(Discord.WebSocket.DiscordSocketClient)
  commentId: M:Mewdeko.Extensions.Extensions.GetGuildIds(Discord.WebSocket.DiscordSocketClient)
  id: GetGuildIds(Discord.WebSocket.DiscordSocketClient)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: GetGuildIds(DiscordSocketClient)
  nameWithType: Extensions.GetGuildIds(DiscordSocketClient)
  fullName: Mewdeko.Extensions.Extensions.GetGuildIds(Discord.WebSocket.DiscordSocketClient)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetGuildIds
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 172
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Retrieves the IDs of all guilds the Discord socket client is connected to.
  example: []
  syntax:
    content: public static List<ulong> GetGuildIds(this DiscordSocketClient client)
    parameters:
    - id: client
      type: Discord.WebSocket.DiscordSocketClient
      description: Discord socket client.
    return:
      type: System.Collections.Generic.List{System.UInt64}
      description: List of guild IDs.
    content.vb: Public Shared Function GetGuildIds(client As DiscordSocketClient) As List(Of ULong)
  overload: Mewdeko.Extensions.Extensions.GetGuildIds*
- uid: Mewdeko.Extensions.Extensions.ToPrettyStringHm(System.TimeSpan)
  commentId: M:Mewdeko.Extensions.Extensions.ToPrettyStringHm(System.TimeSpan)
  id: ToPrettyStringHm(System.TimeSpan)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: ToPrettyStringHm(TimeSpan)
  nameWithType: Extensions.ToPrettyStringHm(TimeSpan)
  fullName: Mewdeko.Extensions.Extensions.ToPrettyStringHm(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ToPrettyStringHm
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 179
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Converts a TimeSpan to a pretty formatted string.
  example: []
  syntax:
    content: public static string ToPrettyStringHm(this TimeSpan span)
    parameters:
    - id: span
      type: System.TimeSpan
      description: TimeSpan to convert.
    return:
      type: System.String
      description: Formatted duration string.
    content.vb: Public Shared Function ToPrettyStringHm(span As TimeSpan) As String
  overload: Mewdeko.Extensions.Extensions.ToPrettyStringHm*
- uid: Mewdeko.Extensions.Extensions.TryGetConfig(System.Collections.Generic.List{Mewdeko.Database.Models.GuildConfig},System.UInt64,Mewdeko.Database.Models.GuildConfig@)
  commentId: M:Mewdeko.Extensions.Extensions.TryGetConfig(System.Collections.Generic.List{Mewdeko.Database.Models.GuildConfig},System.UInt64,Mewdeko.Database.Models.GuildConfig@)
  id: TryGetConfig(System.Collections.Generic.List{Mewdeko.Database.Models.GuildConfig},System.UInt64,Mewdeko.Database.Models.GuildConfig@)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: TryGetConfig(List<GuildConfig>, ulong, out GuildConfig)
  nameWithType: Extensions.TryGetConfig(List<GuildConfig>, ulong, out GuildConfig)
  fullName: Mewdeko.Extensions.Extensions.TryGetConfig(System.Collections.Generic.List<Mewdeko.Database.Models.GuildConfig>, ulong, out Mewdeko.Database.Models.GuildConfig)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: TryGetConfig
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 191
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Tries to retrieve a configuration from the list of guild configurations.
  example: []
  syntax:
    content: public static bool TryGetConfig(this List<GuildConfig> configList, ulong id, out GuildConfig config)
    parameters:
    - id: configList
      type: System.Collections.Generic.List{Mewdeko.Database.Models.GuildConfig}
      description: List of guild configurations.
    - id: id
      type: System.UInt64
      description: Guild ID.
    - id: config
      type: Mewdeko.Database.Models.GuildConfig
      description: Retrieved guild configuration if found, otherwise null.
    return:
      type: System.Boolean
      description: True if the configuration was found, otherwise false.
    content.vb: Public Shared Function TryGetConfig(configList As List(Of GuildConfig), id As ULong, config As GuildConfig) As Boolean
  overload: Mewdeko.Extensions.Extensions.TryGetConfig*
  nameWithType.vb: Extensions.TryGetConfig(List(Of GuildConfig), ULong, GuildConfig)
  fullName.vb: Mewdeko.Extensions.Extensions.TryGetConfig(System.Collections.Generic.List(Of Mewdeko.Database.Models.GuildConfig), ULong, Mewdeko.Database.Models.GuildConfig)
  name.vb: TryGetConfig(List(Of GuildConfig), ULong, GuildConfig)
- uid: Mewdeko.Extensions.Extensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Mewdeko.Extensions.Extensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})
  id: AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: AddRange<T>(IList<T>, IEnumerable<T>)
  nameWithType: Extensions.AddRange<T>(IList<T>, IEnumerable<T>)
  fullName: Mewdeko.Extensions.Extensions.AddRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AddRange
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 210
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Adds a range of items to the list.
  example: []
  syntax:
    content: public static void AddRange<T>(this IList<T> list, IEnumerable<T> items)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{T}}
      description: List to add items to.
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Items to add.
    typeParameters:
    - id: T
      description: Type of items.
    content.vb: Public Shared Sub AddRange(Of T)(list As IList(Of T), items As IEnumerable(Of T))
  overload: Mewdeko.Extensions.Extensions.AddRange*
  nameWithType.vb: Extensions.AddRange(Of T)(IList(Of T), IEnumerable(Of T))
  fullName.vb: Mewdeko.Extensions.Extensions.AddRange(Of T)(System.Collections.Generic.IList(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddRange(Of T)(IList(Of T), IEnumerable(Of T))
- uid: Mewdeko.Extensions.Extensions.RemoveRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Mewdeko.Extensions.Extensions.RemoveRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})
  id: RemoveRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: RemoveRange<T>(IList<T>, IEnumerable<T>)
  nameWithType: Extensions.RemoveRange<T>(IList<T>, IEnumerable<T>)
  fullName: Mewdeko.Extensions.Extensions.RemoveRange<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RemoveRange
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 221
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Removes a range of items from the list.
  example: []
  syntax:
    content: public static void RemoveRange<T>(this IList<T> list, IEnumerable<T> items)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{T}}
      description: List to remove items from.
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Items to remove.
    typeParameters:
    - id: T
      description: Type of items.
    content.vb: Public Shared Sub RemoveRange(Of T)(list As IList(Of T), items As IEnumerable(Of T))
  overload: Mewdeko.Extensions.Extensions.RemoveRange*
  nameWithType.vb: Extensions.RemoveRange(Of T)(IList(Of T), IEnumerable(Of T))
  fullName.vb: Mewdeko.Extensions.Extensions.RemoveRange(Of T)(System.Collections.Generic.IList(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: RemoveRange(Of T)(IList(Of T), IEnumerable(Of T))
- uid: Mewdeko.Extensions.Extensions.AddTypeReaders``1(Discord.Commands.CommandService,Discord.Commands.TypeReader[])
  commentId: M:Mewdeko.Extensions.Extensions.AddTypeReaders``1(Discord.Commands.CommandService,Discord.Commands.TypeReader[])
  id: AddTypeReaders``1(Discord.Commands.CommandService,Discord.Commands.TypeReader[])
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: AddTypeReaders<TResult>(CommandService, params TypeReader[])
  nameWithType: Extensions.AddTypeReaders<TResult>(CommandService, params TypeReader[])
  fullName: Mewdeko.Extensions.Extensions.AddTypeReaders<TResult>(Discord.Commands.CommandService, params Discord.Commands.TypeReader[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AddTypeReaders
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 233
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Adds a collection of type readers to the command service.
  example: []
  syntax:
    content: public static void AddTypeReaders<TResult>(this CommandService commands, params TypeReader[] readers)
    parameters:
    - id: commands
      type: Discord.Commands.CommandService
      description: Command service to add type readers to.
    - id: readers
      type: Discord.Commands.TypeReader[]
      description: Type readers to add.
    typeParameters:
    - id: TResult
      description: Result type of the type readers.
    content.vb: Public Shared Sub AddTypeReaders(Of TResult)(commands As CommandService, ParamArray readers As TypeReader())
  overload: Mewdeko.Extensions.Extensions.AddTypeReaders*
  nameWithType.vb: Extensions.AddTypeReaders(Of TResult)(CommandService, ParamArray TypeReader())
  fullName.vb: Mewdeko.Extensions.Extensions.AddTypeReaders(Of TResult)(Discord.Commands.CommandService, ParamArray Discord.Commands.TypeReader())
  name.vb: AddTypeReaders(Of TResult)(CommandService, ParamArray TypeReader())
- uid: Mewdeko.Extensions.Extensions.TryGetUrlPath(System.String,System.String@)
  commentId: M:Mewdeko.Extensions.Extensions.TryGetUrlPath(System.String,System.String@)
  id: TryGetUrlPath(System.String,System.String@)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: TryGetUrlPath(string, out string)
  nameWithType: Extensions.TryGetUrlPath(string, out string)
  fullName: Mewdeko.Extensions.Extensions.TryGetUrlPath(string, out string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: TryGetUrlPath
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 242
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Tries to extract the path from a URL string.
  example: []
  syntax:
    content: public static bool TryGetUrlPath(this string input, out string path)
    parameters:
    - id: input
      type: System.String
      description: Input URL string.
    - id: path
      type: System.String
      description: Extracted path from the URL.
    return:
      type: System.Boolean
      description: True if the path extraction is successful, otherwise false.
    content.vb: Public Shared Function TryGetUrlPath(input As String, path As String) As Boolean
  overload: Mewdeko.Extensions.Extensions.TryGetUrlPath*
  nameWithType.vb: Extensions.TryGetUrlPath(String, String)
  fullName.vb: Mewdeko.Extensions.Extensions.TryGetUrlPath(String, String)
  name.vb: TryGetUrlPath(String, String)
- uid: Mewdeko.Extensions.Extensions.ToIEmote(System.String)
  commentId: M:Mewdeko.Extensions.Extensions.ToIEmote(System.String)
  id: ToIEmote(System.String)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: ToIEmote(string)
  nameWithType: Extensions.ToIEmote(string)
  fullName: Mewdeko.Extensions.Extensions.ToIEmote(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ToIEmote
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 260
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Converts a string representation of an emoji to an IEmote.
  example: []
  syntax:
    content: public static IEmote? ToIEmote(this string emojiStr)
    parameters:
    - id: emojiStr
      type: System.String
      description: String representation of the emoji.
    return:
      type: Discord.IEmote
      description: The corresponding IEmote instance.
    content.vb: Public Shared Function ToIEmote(emojiStr As String) As IEmote
  overload: Mewdeko.Extensions.Extensions.ToIEmote*
  nameWithType.vb: Extensions.ToIEmote(String)
  fullName.vb: Mewdeko.Extensions.Extensions.ToIEmote(String)
  name.vb: ToIEmote(String)
- uid: Mewdeko.Extensions.Extensions.TryToIEmote(System.String,Discord.IEmote@)
  commentId: M:Mewdeko.Extensions.Extensions.TryToIEmote(System.String,Discord.IEmote@)
  id: TryToIEmote(System.String,Discord.IEmote@)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: TryToIEmote(string, out IEmote)
  nameWithType: Extensions.TryToIEmote(string, out IEmote)
  fullName: Mewdeko.Extensions.Extensions.TryToIEmote(string, out Discord.IEmote)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: TryToIEmote
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 271
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Tries to convert a string representation of an emoji to an IEmote.
  example: []
  syntax:
    content: public static bool TryToIEmote(this string emojiStr, out IEmote value)
    parameters:
    - id: emojiStr
      type: System.String
      description: String representation of the emoji.
    - id: value
      type: Discord.IEmote
      description: Resulting IEmote instance.
    return:
      type: System.Boolean
      description: True if conversion is successful, otherwise false.
    content.vb: Public Shared Function TryToIEmote(emojiStr As String, value As IEmote) As Boolean
  overload: Mewdeko.Extensions.Extensions.TryToIEmote*
  nameWithType.vb: Extensions.TryToIEmote(String, IEmote)
  fullName.vb: Mewdeko.Extensions.Extensions.TryToIEmote(String, Discord.IEmote)
  name.vb: TryToIEmote(String, IEmote)
- uid: Mewdeko.Extensions.Extensions.RedisKey(Mewdeko.Services.IBotCredentials)
  commentId: M:Mewdeko.Extensions.Extensions.RedisKey(Mewdeko.Services.IBotCredentials)
  id: RedisKey(Mewdeko.Services.IBotCredentials)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: RedisKey(IBotCredentials)
  nameWithType: Extensions.RedisKey(IBotCredentials)
  fullName: Mewdeko.Extensions.Extensions.RedisKey(Mewdeko.Services.IBotCredentials)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RedisKey
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 286
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Retrieves the first 10 characters of the bot token.
  example: []
  syntax:
    content: public static string RedisKey(this IBotCredentials bc)
    parameters:
    - id: bc
      type: Mewdeko.Services.IBotCredentials
      description: Bot credentials.
    return:
      type: System.String
      description: First 10 characters of the bot token.
    content.vb: Public Shared Function RedisKey(bc As IBotCredentials) As String
  overload: Mewdeko.Extensions.Extensions.RedisKey*
- uid: Mewdeko.Extensions.Extensions.ReplaceAsync(System.Text.RegularExpressions.Regex,System.String,System.Func{System.Text.RegularExpressions.Match,System.Threading.Tasks.Task{System.String}})
  commentId: M:Mewdeko.Extensions.Extensions.ReplaceAsync(System.Text.RegularExpressions.Regex,System.String,System.Func{System.Text.RegularExpressions.Match,System.Threading.Tasks.Task{System.String}})
  id: ReplaceAsync(System.Text.RegularExpressions.Regex,System.String,System.Func{System.Text.RegularExpressions.Match,System.Threading.Tasks.Task{System.String}})
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: ReplaceAsync(Regex, string?, Func<Match, Task<string>>)
  nameWithType: Extensions.ReplaceAsync(Regex, string?, Func<Match, Task<string>>)
  fullName: Mewdeko.Extensions.Extensions.ReplaceAsync(System.Text.RegularExpressions.Regex, string?, System.Func<System.Text.RegularExpressions.Match, System.Threading.Tasks.Task<string>>)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ReplaceAsync
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 295
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Asynchronously replaces matches in a string with the result of a delegate function.
  example: []
  syntax:
    content: public static Task<string?> ReplaceAsync(this Regex regex, string? input, Func<Match, Task<string>> replacementFn)
    parameters:
    - id: regex
      type: System.Text.RegularExpressions.Regex
      description: Regular expression pattern.
    - id: input
      type: System.String
      description: Input string.
    - id: replacementFn
      type: System.Func{System.Text.RegularExpressions.Match,System.Threading.Tasks.Task{System.String}}
      description: Function to generate replacement strings.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: Task representing the asynchronous operation with the replaced string.
    content.vb: Public Shared Function ReplaceAsync(regex As Regex, input As String, replacementFn As Func(Of Match, Task(Of String))) As Task(Of String)
  overload: Mewdeko.Extensions.Extensions.ReplaceAsync*
  nameWithType.vb: Extensions.ReplaceAsync(Regex, String, Func(Of Match, Task(Of String)))
  fullName.vb: Mewdeko.Extensions.Extensions.ReplaceAsync(System.Text.RegularExpressions.Regex, String, System.Func(Of System.Text.RegularExpressions.Match, System.Threading.Tasks.Task(Of String)))
  name.vb: ReplaceAsync(Regex, String, Func(Of Match, Task(Of String)))
- uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  commentId: M:Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  id: ThrowIfNull``1(``0,System.String)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: ThrowIfNull<T>(T, string)
  nameWithType: Extensions.ThrowIfNull<T>(T, string)
  fullName: Mewdeko.Extensions.Extensions.ThrowIfNull<T>(T, string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ThrowIfNull
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 319
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Throws an ArgumentNullException if the provided object is null.
  example: []
  syntax:
    content: 'public static void ThrowIfNull<T>(this T o, string name) where T : class'
    parameters:
    - id: o
      type: '{T}'
      description: Object to check.
    - id: name
      type: System.String
      description: Name of the object (for exception message).
    typeParameters:
    - id: T
      description: Type of the object.
    content.vb: Public Shared Sub ThrowIfNull(Of T As Class)(o As T, name As String)
  overload: Mewdeko.Extensions.Extensions.ThrowIfNull*
  nameWithType.vb: Extensions.ThrowIfNull(Of T)(T, String)
  fullName.vb: Mewdeko.Extensions.Extensions.ThrowIfNull(Of T)(T, String)
  name.vb: ThrowIfNull(Of T)(T, String)
- uid: Mewdeko.Extensions.Extensions.IsAuthor(Discord.IMessage,Discord.IDiscordClient)
  commentId: M:Mewdeko.Extensions.Extensions.IsAuthor(Discord.IMessage,Discord.IDiscordClient)
  id: IsAuthor(Discord.IMessage,Discord.IDiscordClient)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: IsAuthor(IMessage, IDiscordClient)
  nameWithType: Extensions.IsAuthor(IMessage, IDiscordClient)
  fullName: Mewdeko.Extensions.Extensions.IsAuthor(Discord.IMessage, Discord.IDiscordClient)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: IsAuthor
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 331
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Checks if the message author is the bot itself.
  example: []
  syntax:
    content: public static bool IsAuthor(this IMessage msg, IDiscordClient client)
    parameters:
    - id: msg
      type: Discord.IMessage
      description: Message to check.
    - id: client
      type: Discord.IDiscordClient
      description: Discord client.
    return:
      type: System.Boolean
      description: True if the author is the bot, otherwise false.
    content.vb: Public Shared Function IsAuthor(msg As IMessage, client As IDiscordClient) As Boolean
  overload: Mewdeko.Extensions.Extensions.IsAuthor*
- uid: Mewdeko.Extensions.Extensions.RealSummary(Discord.Commands.CommandInfo,Mewdeko.Services.strings.IBotStrings,System.Nullable{System.UInt64},System.String)
  commentId: M:Mewdeko.Extensions.Extensions.RealSummary(Discord.Commands.CommandInfo,Mewdeko.Services.strings.IBotStrings,System.Nullable{System.UInt64},System.String)
  id: RealSummary(Discord.Commands.CommandInfo,Mewdeko.Services.strings.IBotStrings,System.Nullable{System.UInt64},System.String)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: RealSummary(CommandInfo, IBotStrings, ulong?, string?)
  nameWithType: Extensions.RealSummary(CommandInfo, IBotStrings, ulong?, string?)
  fullName: Mewdeko.Extensions.Extensions.RealSummary(Discord.Commands.CommandInfo, Mewdeko.Services.strings.IBotStrings, ulong?, string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RealSummary
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 341
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Retrieves the real summary of a command.
  example: []
  syntax:
    content: public static string RealSummary(this CommandInfo cmd, IBotStrings strings, ulong? guildId, string? prefix)
    parameters:
    - id: cmd
      type: Discord.Commands.CommandInfo
      description: Command information.
    - id: strings
      type: Mewdeko.Services.strings.IBotStrings
      description: Bot strings provider.
    - id: guildId
      type: System.Nullable{System.UInt64}
      description: Guild ID.
    - id: prefix
      type: System.String
      description: Command prefix.
    return:
      type: System.String
      description: Real summary of the command.
    content.vb: Public Shared Function RealSummary(cmd As CommandInfo, strings As IBotStrings, guildId As ULong?, prefix As String) As String
  overload: Mewdeko.Extensions.Extensions.RealSummary*
  nameWithType.vb: Extensions.RealSummary(CommandInfo, IBotStrings, ULong?, String)
  fullName.vb: Mewdeko.Extensions.Extensions.RealSummary(Discord.Commands.CommandInfo, Mewdeko.Services.strings.IBotStrings, ULong?, String)
  name.vb: RealSummary(CommandInfo, IBotStrings, ULong?, String)
- uid: Mewdeko.Extensions.Extensions.RealRemarksArr(Discord.Commands.CommandInfo,Mewdeko.Services.strings.IBotStrings,System.Nullable{System.UInt64},System.String)
  commentId: M:Mewdeko.Extensions.Extensions.RealRemarksArr(Discord.Commands.CommandInfo,Mewdeko.Services.strings.IBotStrings,System.Nullable{System.UInt64},System.String)
  id: RealRemarksArr(Discord.Commands.CommandInfo,Mewdeko.Services.strings.IBotStrings,System.Nullable{System.UInt64},System.String)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: RealRemarksArr(CommandInfo, IBotStrings, ulong?, string?)
  nameWithType: Extensions.RealRemarksArr(CommandInfo, IBotStrings, ulong?, string?)
  fullName: Mewdeko.Extensions.Extensions.RealRemarksArr(Discord.Commands.CommandInfo, Mewdeko.Services.strings.IBotStrings, ulong?, string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RealRemarksArr
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 352
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Retrieves the real remarks array of a command.
  example: []
  syntax:
    content: public static string[] RealRemarksArr(this CommandInfo cmd, IBotStrings strings, ulong? guildId, string? prefix)
    parameters:
    - id: cmd
      type: Discord.Commands.CommandInfo
      description: Command information.
    - id: strings
      type: Mewdeko.Services.strings.IBotStrings
      description: Bot strings provider.
    - id: guildId
      type: System.Nullable{System.UInt64}
      description: Guild ID.
    - id: prefix
      type: System.String
      description: Command prefix.
    return:
      type: System.String[]
      description: Real remarks array of the command.
    content.vb: Public Shared Function RealRemarksArr(cmd As CommandInfo, strings As IBotStrings, guildId As ULong?, prefix As String) As String()
  overload: Mewdeko.Extensions.Extensions.RealRemarksArr*
  nameWithType.vb: Extensions.RealRemarksArr(CommandInfo, IBotStrings, ULong?, String)
  fullName.vb: Mewdeko.Extensions.Extensions.RealRemarksArr(Discord.Commands.CommandInfo, Mewdeko.Services.strings.IBotStrings, ULong?, String)
  name.vb: RealRemarksArr(CommandInfo, IBotStrings, ULong?, String)
- uid: Mewdeko.Extensions.Extensions.MethodName(Discord.Commands.CommandInfo)
  commentId: M:Mewdeko.Extensions.Extensions.MethodName(Discord.Commands.CommandInfo)
  id: MethodName(Discord.Commands.CommandInfo)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: MethodName(CommandInfo)
  nameWithType: Extensions.MethodName(CommandInfo)
  fullName: Mewdeko.Extensions.Extensions.MethodName(Discord.Commands.CommandInfo)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: MethodName
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 361
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Retrieves the method name of a command.
  example: []
  syntax:
    content: public static string MethodName(this CommandInfo cmd)
    parameters:
    - id: cmd
      type: Discord.Commands.CommandInfo
      description: Command information.
    return:
      type: System.String
      description: Method name of the command.
    content.vb: Public Shared Function MethodName(cmd As CommandInfo) As String
  overload: Mewdeko.Extensions.Extensions.MethodName*
- uid: Mewdeko.Extensions.Extensions.GetFullUsage(System.String,System.String,System.String)
  commentId: M:Mewdeko.Extensions.Extensions.GetFullUsage(System.String,System.String,System.String)
  id: GetFullUsage(System.String,System.String,System.String)
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: GetFullUsage(string, string, string?)
  nameWithType: Extensions.GetFullUsage(string, string, string?)
  fullName: Mewdeko.Extensions.Extensions.GetFullUsage(string, string, string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetFullUsage
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 372
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Generates the full usage of a command with the provided arguments and prefix.
  example: []
  syntax:
    content: public static string GetFullUsage(string commandName, string args, string? prefix)
    parameters:
    - id: commandName
      type: System.String
      description: Name of the command.
    - id: args
      type: System.String
      description: Arguments of the command.
    - id: prefix
      type: System.String
      description: Command prefix.
    return:
      type: System.String
      description: Full usage of the command.
    content.vb: Public Shared Function GetFullUsage(commandName As String, args As String, prefix As String) As String
  overload: Mewdeko.Extensions.Extensions.GetFullUsage*
  nameWithType.vb: Extensions.GetFullUsage(String, String, String)
  fullName.vb: Mewdeko.Extensions.Extensions.GetFullUsage(String, String, String)
  name.vb: GetFullUsage(String, String, String)
- uid: Mewdeko.Extensions.Extensions.AddPaginatedFooter(Discord.EmbedBuilder,System.Int32,System.Nullable{System.Int32})
  commentId: M:Mewdeko.Extensions.Extensions.AddPaginatedFooter(Discord.EmbedBuilder,System.Int32,System.Nullable{System.Int32})
  id: AddPaginatedFooter(Discord.EmbedBuilder,System.Int32,System.Nullable{System.Int32})
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: AddPaginatedFooter(EmbedBuilder, int, int?)
  nameWithType: Extensions.AddPaginatedFooter(EmbedBuilder, int, int?)
  fullName: Mewdeko.Extensions.Extensions.AddPaginatedFooter(Discord.EmbedBuilder, int, int?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AddPaginatedFooter
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 382
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Adds a paginated footer to an embed.
  example: []
  syntax:
    content: public static EmbedBuilder AddPaginatedFooter(this EmbedBuilder embed, int curPage, int? lastPage)
    parameters:
    - id: embed
      type: Discord.EmbedBuilder
      description: Embed to add the footer to.
    - id: curPage
      type: System.Int32
      description: Current page number.
    - id: lastPage
      type: System.Nullable{System.Int32}
      description: Last page number.
    return:
      type: Discord.EmbedBuilder
      description: Embed builder with the added footer.
    content.vb: Public Shared Function AddPaginatedFooter(embed As EmbedBuilder, curPage As Integer, lastPage As Integer?) As EmbedBuilder
  overload: Mewdeko.Extensions.Extensions.AddPaginatedFooter*
  nameWithType.vb: Extensions.AddPaginatedFooter(EmbedBuilder, Integer, Integer?)
  fullName.vb: Mewdeko.Extensions.Extensions.AddPaginatedFooter(Discord.EmbedBuilder, Integer, Integer?)
  name.vb: AddPaginatedFooter(EmbedBuilder, Integer, Integer?)
- uid: Mewdeko.Extensions.Extensions.WithOkColor(Discord.EmbedBuilder)
  commentId: M:Mewdeko.Extensions.Extensions.WithOkColor(Discord.EmbedBuilder)
  id: WithOkColor(Discord.EmbedBuilder)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: WithOkColor(EmbedBuilder)
  nameWithType: Extensions.WithOkColor(EmbedBuilder)
  fullName: Mewdeko.Extensions.Extensions.WithOkColor(Discord.EmbedBuilder)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: WithOkColor
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 394
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Sets the color of an embed to OK color.
  example: []
  syntax:
    content: public static EmbedBuilder WithOkColor(this EmbedBuilder eb)
    parameters:
    - id: eb
      type: Discord.EmbedBuilder
      description: Embed builder to set the color for.
    return:
      type: Discord.EmbedBuilder
      description: Embed builder with the color set to OK color.
    content.vb: Public Shared Function WithOkColor(eb As EmbedBuilder) As EmbedBuilder
  overload: Mewdeko.Extensions.Extensions.WithOkColor*
- uid: Mewdeko.Extensions.Extensions.WithErrorColor(Discord.EmbedBuilder)
  commentId: M:Mewdeko.Extensions.Extensions.WithErrorColor(Discord.EmbedBuilder)
  id: WithErrorColor(Discord.EmbedBuilder)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: WithErrorColor(EmbedBuilder)
  nameWithType: Extensions.WithErrorColor(EmbedBuilder)
  fullName: Mewdeko.Extensions.Extensions.WithErrorColor(Discord.EmbedBuilder)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: WithErrorColor
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 402
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Sets the color of an embed to the error color.
  example: []
  syntax:
    content: public static EmbedBuilder WithErrorColor(this EmbedBuilder eb)
    parameters:
    - id: eb
      type: Discord.EmbedBuilder
      description: Embed builder to set the color for.
    return:
      type: Discord.EmbedBuilder
      description: Embed builder with the color set to the error color.
    content.vb: Public Shared Function WithErrorColor(eb As EmbedBuilder) As EmbedBuilder
  overload: Mewdeko.Extensions.Extensions.WithErrorColor*
- uid: Mewdeko.Extensions.Extensions.WithOkColor(Fergun.Interactive.PageBuilder)
  commentId: M:Mewdeko.Extensions.Extensions.WithOkColor(Fergun.Interactive.PageBuilder)
  id: WithOkColor(Fergun.Interactive.PageBuilder)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: WithOkColor(PageBuilder)
  nameWithType: Extensions.WithOkColor(PageBuilder)
  fullName: Mewdeko.Extensions.Extensions.WithOkColor(Fergun.Interactive.PageBuilder)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: WithOkColor
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 409
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Sets the color of a page builder to the OK color.
  example: []
  syntax:
    content: public static PageBuilder WithOkColor(this PageBuilder eb)
    parameters:
    - id: eb
      type: Fergun.Interactive.PageBuilder
      description: Page builder to set the color for.
    return:
      type: Fergun.Interactive.PageBuilder
      description: Page builder with the color set to the OK color.
    content.vb: Public Shared Function WithOkColor(eb As PageBuilder) As PageBuilder
  overload: Mewdeko.Extensions.Extensions.WithOkColor*
- uid: Mewdeko.Extensions.Extensions.WithErrorColor(Fergun.Interactive.PageBuilder)
  commentId: M:Mewdeko.Extensions.Extensions.WithErrorColor(Fergun.Interactive.PageBuilder)
  id: WithErrorColor(Fergun.Interactive.PageBuilder)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: WithErrorColor(PageBuilder)
  nameWithType: Extensions.WithErrorColor(PageBuilder)
  fullName: Mewdeko.Extensions.Extensions.WithErrorColor(Fergun.Interactive.PageBuilder)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: WithErrorColor
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 416
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Sets the color of a page builder to the error color.
  example: []
  syntax:
    content: public static PageBuilder WithErrorColor(this PageBuilder eb)
    parameters:
    - id: eb
      type: Fergun.Interactive.PageBuilder
      description: Page builder to set the color for.
    return:
      type: Fergun.Interactive.PageBuilder
      description: Page builder with the color set to the error color.
    content.vb: Public Shared Function WithErrorColor(eb As PageBuilder) As PageBuilder
  overload: Mewdeko.Extensions.Extensions.WithErrorColor*
- uid: Mewdeko.Extensions.Extensions.AddFakeHeaders(System.Net.Http.HttpClient)
  commentId: M:Mewdeko.Extensions.Extensions.AddFakeHeaders(System.Net.Http.HttpClient)
  id: AddFakeHeaders(System.Net.Http.HttpClient)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: AddFakeHeaders(HttpClient)
  nameWithType: Extensions.AddFakeHeaders(HttpClient)
  fullName: Mewdeko.Extensions.Extensions.AddFakeHeaders(System.Net.Http.HttpClient)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AddFakeHeaders
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 423
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Adds fake headers to the HttpClient.
  example: []
  syntax:
    content: public static HttpClient AddFakeHeaders(this HttpClient http)
    parameters:
    - id: http
      type: System.Net.Http.HttpClient
      description: HttpClient to add headers to.
    return:
      type: System.Net.Http.HttpClient
      description: HttpClient with fake headers added.
    content.vb: Public Shared Function AddFakeHeaders(http As HttpClient) As HttpClient
  overload: Mewdeko.Extensions.Extensions.AddFakeHeaders*
- uid: Mewdeko.Extensions.Extensions.AddFakeHeaders(System.Net.Http.Headers.HttpHeaders)
  commentId: M:Mewdeko.Extensions.Extensions.AddFakeHeaders(System.Net.Http.Headers.HttpHeaders)
  id: AddFakeHeaders(System.Net.Http.Headers.HttpHeaders)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: AddFakeHeaders(HttpHeaders)
  nameWithType: Extensions.AddFakeHeaders(HttpHeaders)
  fullName: Mewdeko.Extensions.Extensions.AddFakeHeaders(System.Net.Http.Headers.HttpHeaders)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AddFakeHeaders
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 433
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Adds fake headers to the HttpHeaders dictionary.
  example: []
  syntax:
    content: public static void AddFakeHeaders(this HttpHeaders dict)
    parameters:
    - id: dict
      type: System.Net.Http.Headers.HttpHeaders
      description: HttpHeaders dictionary to add headers to.
    content.vb: Public Shared Sub AddFakeHeaders(dict As HttpHeaders)
  overload: Mewdeko.Extensions.Extensions.AddFakeHeaders*
- uid: Mewdeko.Extensions.Extensions.DeleteAfter(Discord.IUserMessage,System.Int32)
  commentId: M:Mewdeko.Extensions.Extensions.DeleteAfter(Discord.IUserMessage,System.Int32)
  id: DeleteAfter(Discord.IUserMessage,System.Int32)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: DeleteAfter(IUserMessage?, int)
  nameWithType: Extensions.DeleteAfter(IUserMessage?, int)
  fullName: Mewdeko.Extensions.Extensions.DeleteAfter(Discord.IUserMessage?, int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: DeleteAfter
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 446
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Deletes a message after a specified number of seconds.
  example: []
  syntax:
    content: public static void DeleteAfter(this IUserMessage? msg, int seconds)
    parameters:
    - id: msg
      type: Discord.IUserMessage
      description: Message to delete.
    - id: seconds
      type: System.Int32
      description: Number of seconds to wait before deleting.
    content.vb: Public Shared Sub DeleteAfter(msg As IUserMessage, seconds As Integer)
  overload: Mewdeko.Extensions.Extensions.DeleteAfter*
  nameWithType.vb: Extensions.DeleteAfter(IUserMessage, Integer)
  fullName.vb: Mewdeko.Extensions.Extensions.DeleteAfter(Discord.IUserMessage, Integer)
  name.vb: DeleteAfter(IUserMessage, Integer)
- uid: Mewdeko.Extensions.Extensions.DeleteAfter(Discord.IMessage,System.Int32)
  commentId: M:Mewdeko.Extensions.Extensions.DeleteAfter(Discord.IMessage,System.Int32)
  id: DeleteAfter(Discord.IMessage,System.Int32)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: DeleteAfter(IMessage?, int)
  nameWithType: Extensions.DeleteAfter(IMessage?, int)
  fullName: Mewdeko.Extensions.Extensions.DeleteAfter(Discord.IMessage?, int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: DeleteAfter
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 469
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Deletes a message after a specified number of seconds.
  example: []
  syntax:
    content: public static void DeleteAfter(this IMessage? msg, int seconds)
    parameters:
    - id: msg
      type: Discord.IMessage
      description: Message to delete.
    - id: seconds
      type: System.Int32
      description: Number of seconds to wait before deleting.
    content.vb: Public Shared Sub DeleteAfter(msg As IMessage, seconds As Integer)
  overload: Mewdeko.Extensions.Extensions.DeleteAfter*
  nameWithType.vb: Extensions.DeleteAfter(IMessage, Integer)
  fullName.vb: Mewdeko.Extensions.Extensions.DeleteAfter(Discord.IMessage, Integer)
  name.vb: DeleteAfter(IMessage, Integer)
- uid: Mewdeko.Extensions.Extensions.GetTopLevelModule(Discord.Commands.ModuleInfo)
  commentId: M:Mewdeko.Extensions.Extensions.GetTopLevelModule(Discord.Commands.ModuleInfo)
  id: GetTopLevelModule(Discord.Commands.ModuleInfo)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: GetTopLevelModule(ModuleInfo)
  nameWithType: Extensions.GetTopLevelModule(ModuleInfo)
  fullName: Mewdeko.Extensions.Extensions.GetTopLevelModule(Discord.Commands.ModuleInfo)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetTopLevelModule
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 492
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Gets the top-level module of the given module.
  example: []
  syntax:
    content: public static ModuleInfo GetTopLevelModule(this ModuleInfo module)
    parameters:
    - id: module
      type: Discord.Commands.ModuleInfo
      description: Module to get the top-level module for.
    return:
      type: Discord.Commands.ModuleInfo
      description: Top-level module of the given module.
    content.vb: Public Shared Function GetTopLevelModule([module] As ModuleInfo) As ModuleInfo
  overload: Mewdeko.Extensions.Extensions.GetTopLevelModule*
- uid: Mewdeko.Extensions.Extensions.GetMembersAsync(Discord.IRole)
  commentId: M:Mewdeko.Extensions.Extensions.GetMembersAsync(Discord.IRole)
  id: GetMembersAsync(Discord.IRole)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: GetMembersAsync(IRole)
  nameWithType: Extensions.GetMembersAsync(IRole)
  fullName: Mewdeko.Extensions.Extensions.GetMembersAsync(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetMembersAsync
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 503
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Gets the members with the specified role asynchronously.
  example: []
  syntax:
    content: public static Task<IEnumerable<IGuildUser>> GetMembersAsync(this IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: Role to get the members for.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Discord.IGuildUser}}
      description: Task representing the asynchronous operation.
    content.vb: Public Shared Function GetMembersAsync(role As IRole) As Task(Of IEnumerable(Of IGuildUser))
  overload: Mewdeko.Extensions.Extensions.GetMembersAsync*
- uid: Mewdeko.Extensions.Extensions.ToStream(SkiaSharp.SKImage,SkiaSharp.SKEncodedImageFormat)
  commentId: M:Mewdeko.Extensions.Extensions.ToStream(SkiaSharp.SKImage,SkiaSharp.SKEncodedImageFormat)
  id: ToStream(SkiaSharp.SKImage,SkiaSharp.SKEncodedImageFormat)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: ToStream(SKImage, SKEncodedImageFormat)
  nameWithType: Extensions.ToStream(SKImage, SKEncodedImageFormat)
  fullName: Mewdeko.Extensions.Extensions.ToStream(SkiaSharp.SKImage, SkiaSharp.SKEncodedImageFormat)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ToStream
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 514
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Converts an SKImage to a MemoryStream.
  example: []
  syntax:
    content: public static MemoryStream ToStream(this SKImage img, SKEncodedImageFormat format = SKEncodedImageFormat.Png)
    parameters:
    - id: img
      type: SkiaSharp.SKImage
      description: SKImage to convert.
    - id: format
      type: SkiaSharp.SKEncodedImageFormat
      description: Encoded image format (default is PNG).
    return:
      type: System.IO.MemoryStream
      description: MemoryStream containing the encoded image data.
    content.vb: Public Shared Function ToStream(img As SKImage, format As SKEncodedImageFormat = SKEncodedImageFormat.Png) As MemoryStream
  overload: Mewdeko.Extensions.Extensions.ToStream*
- uid: Mewdeko.Extensions.Extensions.ToStream(System.Collections.Generic.IEnumerable{System.Byte},System.Boolean)
  commentId: M:Mewdeko.Extensions.Extensions.ToStream(System.Collections.Generic.IEnumerable{System.Byte},System.Boolean)
  id: ToStream(System.Collections.Generic.IEnumerable{System.Byte},System.Boolean)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: ToStream(IEnumerable<byte>, bool)
  nameWithType: Extensions.ToStream(IEnumerable<byte>, bool)
  fullName: Mewdeko.Extensions.Extensions.ToStream(System.Collections.Generic.IEnumerable<byte>, bool)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ToStream
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 529
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Converts a collection of bytes to a Stream.
  example: []
  syntax:
    content: public static Stream ToStream(this IEnumerable<byte> bytes, bool canWrite = false)
    parameters:
    - id: bytes
      type: System.Collections.Generic.IEnumerable{System.Byte}
      description: Collection of bytes to convert.
    - id: canWrite
      type: System.Boolean
      description: Boolean indicating if the stream can be written to (default is false).
    return:
      type: System.IO.Stream
      description: Stream containing the bytes.
    content.vb: Public Shared Function ToStream(bytes As IEnumerable(Of Byte), canWrite As Boolean = False) As Stream
  overload: Mewdeko.Extensions.Extensions.ToStream*
  nameWithType.vb: Extensions.ToStream(IEnumerable(Of Byte), Boolean)
  fullName.vb: Mewdeko.Extensions.Extensions.ToStream(System.Collections.Generic.IEnumerable(Of Byte), Boolean)
  name.vb: ToStream(IEnumerable(Of Byte), Boolean)
- uid: Mewdeko.Extensions.Extensions.GetRoles(Discord.IGuildUser)
  commentId: M:Mewdeko.Extensions.Extensions.GetRoles(Discord.IGuildUser)
  id: GetRoles(Discord.IGuildUser)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: GetRoles(IGuildUser)
  nameWithType: Extensions.GetRoles(IGuildUser)
  fullName: Mewdeko.Extensions.Extensions.GetRoles(Discord.IGuildUser)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetRoles
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 541
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Gets the roles associated with the specified user.
  example: []
  syntax:
    content: public static IEnumerable<IRole> GetRoles(this IGuildUser user)
    parameters:
    - id: user
      type: Discord.IGuildUser
      description: User to get the roles for.
    return:
      type: System.Collections.Generic.IEnumerable{Discord.IRole}
      description: Enumerable collection of roles associated with the user.
    content.vb: Public Shared Function GetRoles(user As IGuildUser) As IEnumerable(Of IRole)
  overload: Mewdeko.Extensions.Extensions.GetRoles*
- uid: Mewdeko.Extensions.Extensions.IsImage(System.Net.Http.HttpResponseMessage)
  commentId: M:Mewdeko.Extensions.Extensions.IsImage(System.Net.Http.HttpResponseMessage)
  id: IsImage(System.Net.Http.HttpResponseMessage)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: IsImage(HttpResponseMessage)
  nameWithType: Extensions.IsImage(HttpResponseMessage)
  fullName: Mewdeko.Extensions.Extensions.IsImage(System.Net.Http.HttpResponseMessage)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: IsImage
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 549
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Checks if the HttpResponseMessage contains an image.
  example: []
  syntax:
    content: public static bool IsImage(this HttpResponseMessage msg)
    parameters:
    - id: msg
      type: System.Net.Http.HttpResponseMessage
      description: HttpResponseMessage to check.
    return:
      type: System.Boolean
      description: True if the response contains an image; otherwise, false.
    content.vb: Public Shared Function IsImage(msg As HttpResponseMessage) As Boolean
  overload: Mewdeko.Extensions.Extensions.IsImage*
- uid: Mewdeko.Extensions.Extensions.IsImage(System.Net.Http.HttpResponseMessage,System.String@)
  commentId: M:Mewdeko.Extensions.Extensions.IsImage(System.Net.Http.HttpResponseMessage,System.String@)
  id: IsImage(System.Net.Http.HttpResponseMessage,System.String@)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: IsImage(HttpResponseMessage, out string?)
  nameWithType: Extensions.IsImage(HttpResponseMessage, out string?)
  fullName: Mewdeko.Extensions.Extensions.IsImage(System.Net.Http.HttpResponseMessage, out string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: IsImage
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 557
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Checks if the HttpResponseMessage contains an image.
  example: []
  syntax:
    content: public static bool IsImage(this HttpResponseMessage msg, out string? mimeType)
    parameters:
    - id: msg
      type: System.Net.Http.HttpResponseMessage
      description: HttpResponseMessage to check.
    - id: mimeType
      type: System.String
      description: String reference to store the MIME type of the image.
    return:
      type: System.Boolean
      description: True if the response contains an image; otherwise, false.
    content.vb: Public Shared Function IsImage(msg As HttpResponseMessage, mimeType As String) As Boolean
  overload: Mewdeko.Extensions.Extensions.IsImage*
  nameWithType.vb: Extensions.IsImage(HttpResponseMessage, String)
  fullName.vb: Mewdeko.Extensions.Extensions.IsImage(System.Net.Http.HttpResponseMessage, String)
  name.vb: IsImage(HttpResponseMessage, String)
- uid: Mewdeko.Extensions.Extensions.GetImageSize(System.Net.Http.HttpResponseMessage)
  commentId: M:Mewdeko.Extensions.Extensions.GetImageSize(System.Net.Http.HttpResponseMessage)
  id: GetImageSize(System.Net.Http.HttpResponseMessage)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: GetImageSize(HttpResponseMessage)
  nameWithType: Extensions.GetImageSize(HttpResponseMessage)
  fullName: Mewdeko.Extensions.Extensions.GetImageSize(System.Net.Http.HttpResponseMessage)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetImageSize
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 569
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Gets the size of the image contained in the HttpResponseMessage.
  example: []
  syntax:
    content: public static long? GetImageSize(this HttpResponseMessage msg)
    parameters:
    - id: msg
      type: System.Net.Http.HttpResponseMessage
      description: HttpResponseMessage containing the image.
    return:
      type: System.Nullable{System.Int64}
      description: The size of the image in bytes.
    content.vb: Public Shared Function GetImageSize(msg As HttpResponseMessage) As Long?
  overload: Mewdeko.Extensions.Extensions.GetImageSize*
- uid: Mewdeko.Extensions.Extensions.ToSkImage(System.Byte[])
  commentId: M:Mewdeko.Extensions.Extensions.ToSkImage(System.Byte[])
  id: ToSkImage(System.Byte[])
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: ToSkImage(byte[])
  nameWithType: Extensions.ToSkImage(byte[])
  fullName: Mewdeko.Extensions.Extensions.ToSkImage(byte[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ToSkImage
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 580
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Converts a byte array to an SKImage.
  example: []
  syntax:
    content: public static SKImage ToSkImage(this byte[] imageData)
    parameters:
    - id: imageData
      type: System.Byte[]
      description: Byte array containing the image data.
    return:
      type: SkiaSharp.SKImage
      description: SKImage created from the byte array.
    content.vb: Public Shared Function ToSkImage(imageData As Byte()) As SKImage
  overload: Mewdeko.Extensions.Extensions.ToSkImage*
  nameWithType.vb: Extensions.ToSkImage(Byte())
  fullName.vb: Mewdeko.Extensions.Extensions.ToSkImage(Byte())
  name.vb: ToSkImage(Byte())
- uid: Mewdeko.Extensions.Extensions.GetCtNames(Discord.IApplicationCommand)
  commentId: M:Mewdeko.Extensions.Extensions.GetCtNames(Discord.IApplicationCommand)
  id: GetCtNames(Discord.IApplicationCommand)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: GetCtNames(IApplicationCommand)
  nameWithType: Extensions.GetCtNames(IApplicationCommand)
  fullName: Mewdeko.Extensions.Extensions.GetCtNames(Discord.IApplicationCommand)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetCtNames
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 590
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Gets the command names associated with the IApplicationCommand.
  example: []
  syntax:
    content: public static string[] GetCtNames(this IApplicationCommand command)
    parameters:
    - id: command
      type: Discord.IApplicationCommand
      description: IApplicationCommand to get the command names for.
    return:
      type: System.String[]
      description: An array of command names.
    content.vb: Public Shared Function GetCtNames(command As IApplicationCommand) As String()
  overload: Mewdeko.Extensions.Extensions.GetCtNames*
- uid: Mewdeko.Extensions.Extensions.GetRealName(Discord.WebSocket.SocketInteraction)
  commentId: M:Mewdeko.Extensions.Extensions.GetRealName(Discord.WebSocket.SocketInteraction)
  id: GetRealName(Discord.WebSocket.SocketInteraction)
  isExtensionMethod: true
  parent: Mewdeko.Extensions.Extensions
  langs:
  - csharp
  - vb
  name: GetRealName(SocketInteraction)
  nameWithType: Extensions.GetRealName(SocketInteraction)
  fullName: Mewdeko.Extensions.Extensions.GetRealName(Discord.WebSocket.SocketInteraction)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Extensions/Extensions.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetRealName
    path: src/Mewdeko/Extensions/Extensions.cs
    startLine: 617
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Extensions
  summary: Gets the real name of the interaction.
  example: []
  syntax:
    content: public static string GetRealName(this SocketInteraction interaction)
    parameters:
    - id: interaction
      type: Discord.WebSocket.SocketInteraction
      description: SocketInteraction instance.
    return:
      type: System.String
      description: The real name of the interaction.
    content.vb: Public Shared Function GetRealName(interaction As SocketInteraction) As String
  overload: Mewdeko.Extensions.Extensions.GetRealName*
references:
- uid: Mewdeko.Extensions
  commentId: N:Mewdeko.Extensions
  href: Mewdeko.html
  name: Mewdeko.Extensions
  nameWithType: Mewdeko.Extensions
  fullName: Mewdeko.Extensions
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Extensions
    name: Extensions
    href: Mewdeko.Extensions.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Extensions
    name: Extensions
    href: Mewdeko.Extensions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Text.RegularExpressions.Regex
  commentId: T:System.Text.RegularExpressions.Regex
  parent: System.Text.RegularExpressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.text.regularexpressions.regex
  name: Regex
  nameWithType: Regex
  fullName: System.Text.RegularExpressions.Regex
- uid: System.Text.RegularExpressions
  commentId: N:System.Text.RegularExpressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Text.RegularExpressions
  nameWithType: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
  - name: .
  - uid: System.Text.RegularExpressions
    name: RegularExpressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.regularexpressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
  - name: .
  - uid: System.Text.RegularExpressions
    name: RegularExpressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.regularexpressions
- uid: Mewdeko.Extensions.Extensions.Map*
  commentId: Overload:Mewdeko.Extensions.Extensions.Map
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_Map__2___0___System_Func___0___1__
  name: Map
  nameWithType: Extensions.Map
  fullName: Mewdeko.Extensions.Extensions.Map
- uid: '{TIn}[]'
  isExternal: true
  name: TIn[]
  nameWithType: TIn[]
  fullName: TIn[]
  nameWithType.vb: TIn()
  fullName.vb: TIn()
  name.vb: TIn()
  spec.csharp:
  - name: TIn
  - name: '['
  - name: ']'
  spec.vb:
  - name: TIn
  - name: (
  - name: )
- uid: System.Func{{TIn},{TOut}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TIn, TOut>
  nameWithType: Func<TIn, TOut>
  fullName: System.Func<TIn, TOut>
  nameWithType.vb: Func(Of TIn, TOut)
  fullName.vb: System.Func(Of TIn, TOut)
  name.vb: Func(Of TIn, TOut)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: '{TOut}[]'
  isExternal: true
  name: TOut[]
  nameWithType: TOut[]
  fullName: TOut[]
  nameWithType.vb: TOut()
  fullName.vb: TOut()
  name.vb: TOut()
  spec.csharp:
  - name: TOut
  - name: '['
  - name: ']'
  spec.vb:
  - name: TOut
  - name: (
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: Mewdeko.Extensions.Extensions.SendConfirmAsync*
  commentId: Overload:Mewdeko.Extensions.Extensions.SendConfirmAsync
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_SendConfirmAsync_Discord_IDiscordInteraction_System_String_
  name: SendConfirmAsync
  nameWithType: Extensions.SendConfirmAsync
  fullName: Mewdeko.Extensions.Extensions.SendConfirmAsync
- uid: Discord.IDiscordInteraction
  commentId: T:Discord.IDiscordInteraction
  parent: Discord
  isExternal: true
  name: IDiscordInteraction
  nameWithType: IDiscordInteraction
  fullName: Discord.IDiscordInteraction
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Discord
  commentId: N:Discord
  isExternal: true
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Mewdeko.Extensions.Extensions.SendEphemeralConfirmAsync*
  commentId: Overload:Mewdeko.Extensions.Extensions.SendEphemeralConfirmAsync
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_SendEphemeralConfirmAsync_Discord_IDiscordInteraction_System_String_
  name: SendEphemeralConfirmAsync
  nameWithType: Extensions.SendEphemeralConfirmAsync
  fullName: Mewdeko.Extensions.Extensions.SendEphemeralConfirmAsync
- uid: Mewdeko.Extensions.Extensions.SendErrorAsync*
  commentId: Overload:Mewdeko.Extensions.Extensions.SendErrorAsync
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_SendErrorAsync_Discord_IDiscordInteraction_System_String_Mewdeko_Common_Configs_BotConfig_
  name: SendErrorAsync
  nameWithType: Extensions.SendErrorAsync
  fullName: Mewdeko.Extensions.Extensions.SendErrorAsync
- uid: Mewdeko.Common.Configs.BotConfig
  commentId: T:Mewdeko.Common.Configs.BotConfig
  parent: Mewdeko.Common.Configs
  href: Mewdeko.Common.Configs.BotConfig.html
  name: BotConfig
  nameWithType: BotConfig
  fullName: Mewdeko.Common.Configs.BotConfig
- uid: Mewdeko.Common.Configs
  commentId: N:Mewdeko.Common.Configs
  href: Mewdeko.html
  name: Mewdeko.Common.Configs
  nameWithType: Mewdeko.Common.Configs
  fullName: Mewdeko.Common.Configs
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
  - name: .
  - uid: Mewdeko.Common.Configs
    name: Configs
    href: Mewdeko.Common.Configs.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
  - name: .
  - uid: Mewdeko.Common.Configs
    name: Configs
    href: Mewdeko.Common.Configs.html
- uid: Mewdeko.Extensions.Extensions.SendEphemeralErrorAsync*
  commentId: Overload:Mewdeko.Extensions.Extensions.SendEphemeralErrorAsync
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_SendEphemeralErrorAsync_Discord_IDiscordInteraction_System_String_Mewdeko_Common_Configs_BotConfig_
  name: SendEphemeralErrorAsync
  nameWithType: Extensions.SendEphemeralErrorAsync
  fullName: Mewdeko.Extensions.Extensions.SendEphemeralErrorAsync
- uid: Mewdeko.Extensions.Extensions.SendConfirmFollowupAsync*
  commentId: Overload:Mewdeko.Extensions.Extensions.SendConfirmFollowupAsync
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_SendConfirmFollowupAsync_Discord_IDiscordInteraction_System_String_
  name: SendConfirmFollowupAsync
  nameWithType: Extensions.SendConfirmFollowupAsync
  fullName: Mewdeko.Extensions.Extensions.SendConfirmFollowupAsync
- uid: System.Threading.Tasks.Task{Discord.IUserMessage}
  commentId: T:System.Threading.Tasks.Task{Discord.IUserMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IUserMessage>
  nameWithType: Task<IUserMessage>
  fullName: System.Threading.Tasks.Task<Discord.IUserMessage>
  nameWithType.vb: Task(Of IUserMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IUserMessage)
  name.vb: Task(Of IUserMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Discord.IUserMessage
    name: IUserMessage
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Discord.IUserMessage
    name: IUserMessage
    isExternal: true
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: Discord.ComponentBuilder
  commentId: T:Discord.ComponentBuilder
  parent: Discord
  isExternal: true
  name: ComponentBuilder
  nameWithType: ComponentBuilder
  fullName: Discord.ComponentBuilder
- uid: Mewdeko.Extensions.Extensions.SendEphemeralFollowupConfirmAsync*
  commentId: Overload:Mewdeko.Extensions.Extensions.SendEphemeralFollowupConfirmAsync
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_SendEphemeralFollowupConfirmAsync_Discord_IDiscordInteraction_System_String_
  name: SendEphemeralFollowupConfirmAsync
  nameWithType: Extensions.SendEphemeralFollowupConfirmAsync
  fullName: Mewdeko.Extensions.Extensions.SendEphemeralFollowupConfirmAsync
- uid: Mewdeko.Extensions.Extensions.SendErrorFollowupAsync*
  commentId: Overload:Mewdeko.Extensions.Extensions.SendErrorFollowupAsync
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_SendErrorFollowupAsync_Discord_IDiscordInteraction_System_String_Mewdeko_Common_Configs_BotConfig_
  name: SendErrorFollowupAsync
  nameWithType: Extensions.SendErrorFollowupAsync
  fullName: Mewdeko.Extensions.Extensions.SendErrorFollowupAsync
- uid: Mewdeko.Extensions.Extensions.SendEphemeralFollowupErrorAsync*
  commentId: Overload:Mewdeko.Extensions.Extensions.SendEphemeralFollowupErrorAsync
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_SendEphemeralFollowupErrorAsync_Discord_IDiscordInteraction_System_String_Mewdeko_Common_Configs_BotConfig_
  name: SendEphemeralFollowupErrorAsync
  nameWithType: Extensions.SendEphemeralFollowupErrorAsync
  fullName: Mewdeko.Extensions.Extensions.SendEphemeralFollowupErrorAsync
- uid: Mewdeko.Extensions.Extensions.IsValidAttachment*
  commentId: Overload:Mewdeko.Extensions.Extensions.IsValidAttachment
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_IsValidAttachment_System_Collections_Generic_IReadOnlyCollection_Discord_IAttachment__
  name: IsValidAttachment
  nameWithType: Extensions.IsValidAttachment
  fullName: Mewdeko.Extensions.Extensions.IsValidAttachment
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.IAttachment}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.IAttachment}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  name: IReadOnlyCollection<IAttachment>
  nameWithType: IReadOnlyCollection<IAttachment>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.IAttachment>
  nameWithType.vb: IReadOnlyCollection(Of IAttachment)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.IAttachment)
  name.vb: IReadOnlyCollection(Of IAttachment)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: Discord.IAttachment
    name: IAttachment
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: Discord.IAttachment
    name: IAttachment
    isExternal: true
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Mewdeko.Extensions.Extensions.GetGuildIds*
  commentId: Overload:Mewdeko.Extensions.Extensions.GetGuildIds
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_GetGuildIds_Discord_WebSocket_DiscordSocketClient_
  name: GetGuildIds
  nameWithType: Extensions.GetGuildIds
  fullName: Mewdeko.Extensions.Extensions.GetGuildIds
- uid: Discord.WebSocket.DiscordSocketClient
  commentId: T:Discord.WebSocket.DiscordSocketClient
  parent: Discord.WebSocket
  isExternal: true
  name: DiscordSocketClient
  nameWithType: DiscordSocketClient
  fullName: Discord.WebSocket.DiscordSocketClient
- uid: System.Collections.Generic.List{System.UInt64}
  commentId: T:System.Collections.Generic.List{System.UInt64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<ulong>
  nameWithType: List<ulong>
  fullName: System.Collections.Generic.List<ulong>
  nameWithType.vb: List(Of ULong)
  fullName.vb: System.Collections.Generic.List(Of ULong)
  name.vb: List(Of ULong)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Discord.WebSocket
  commentId: N:Discord.WebSocket
  isExternal: true
  name: Discord.WebSocket
  nameWithType: Discord.WebSocket
  fullName: Discord.WebSocket
  spec.csharp:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.WebSocket
    name: WebSocket
    isExternal: true
  spec.vb:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.WebSocket
    name: WebSocket
    isExternal: true
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Mewdeko.Extensions.Extensions.ToPrettyStringHm*
  commentId: Overload:Mewdeko.Extensions.Extensions.ToPrettyStringHm
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ToPrettyStringHm_System_TimeSpan_
  name: ToPrettyStringHm
  nameWithType: Extensions.ToPrettyStringHm
  fullName: Mewdeko.Extensions.Extensions.ToPrettyStringHm
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Mewdeko.Extensions.Extensions.TryGetConfig*
  commentId: Overload:Mewdeko.Extensions.Extensions.TryGetConfig
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_TryGetConfig_System_Collections_Generic_List_Mewdeko_Database_Models_GuildConfig__System_UInt64_Mewdeko_Database_Models_GuildConfig__
  name: TryGetConfig
  nameWithType: Extensions.TryGetConfig
  fullName: Mewdeko.Extensions.Extensions.TryGetConfig
- uid: System.Collections.Generic.List{Mewdeko.Database.Models.GuildConfig}
  commentId: T:System.Collections.Generic.List{Mewdeko.Database.Models.GuildConfig}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<GuildConfig>
  nameWithType: List<GuildConfig>
  fullName: System.Collections.Generic.List<Mewdeko.Database.Models.GuildConfig>
  nameWithType.vb: List(Of GuildConfig)
  fullName.vb: System.Collections.Generic.List(Of Mewdeko.Database.Models.GuildConfig)
  name.vb: List(Of GuildConfig)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Mewdeko.Database.Models.GuildConfig
    name: GuildConfig
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Database.Models.GuildConfig
    name: GuildConfig
  - name: )
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: Mewdeko.Database.Models.GuildConfig
  commentId: T:Mewdeko.Database.Models.GuildConfig
  parent: Mewdeko.Database.Models
  href: Mewdeko.Database.Models.GuildConfig.html
  name: GuildConfig
  nameWithType: GuildConfig
  fullName: Mewdeko.Database.Models.GuildConfig
- uid: Mewdeko.Database.Models
  commentId: N:Mewdeko.Database.Models
  href: Mewdeko.html
  name: Mewdeko.Database.Models
  nameWithType: Mewdeko.Database.Models
  fullName: Mewdeko.Database.Models
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Database
    name: Database
    href: Mewdeko.Database.html
  - name: .
  - uid: Mewdeko.Database.Models
    name: Models
    href: Mewdeko.Database.Models.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Database
    name: Database
    href: Mewdeko.Database.html
  - name: .
  - uid: Mewdeko.Database.Models
    name: Models
    href: Mewdeko.Database.Models.html
- uid: Mewdeko.Extensions.Extensions.AddRange*
  commentId: Overload:Mewdeko.Extensions.Extensions.AddRange
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_AddRange__1_System_Collections_Generic_IList___0__System_Collections_Generic_IEnumerable___0__
  name: AddRange
  nameWithType: Extensions.AddRange
  fullName: Mewdeko.Extensions.Extensions.AddRange
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Mewdeko.Extensions.Extensions.RemoveRange*
  commentId: Overload:Mewdeko.Extensions.Extensions.RemoveRange
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_RemoveRange__1_System_Collections_Generic_IList___0__System_Collections_Generic_IEnumerable___0__
  name: RemoveRange
  nameWithType: Extensions.RemoveRange
  fullName: Mewdeko.Extensions.Extensions.RemoveRange
- uid: Mewdeko.Extensions.Extensions.AddTypeReaders*
  commentId: Overload:Mewdeko.Extensions.Extensions.AddTypeReaders
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_AddTypeReaders__1_Discord_Commands_CommandService_Discord_Commands_TypeReader___
  name: AddTypeReaders
  nameWithType: Extensions.AddTypeReaders
  fullName: Mewdeko.Extensions.Extensions.AddTypeReaders
- uid: Discord.Commands.CommandService
  commentId: T:Discord.Commands.CommandService
  parent: Discord.Commands
  isExternal: true
  name: CommandService
  nameWithType: CommandService
  fullName: Discord.Commands.CommandService
- uid: Discord.Commands.TypeReader[]
  isExternal: true
  name: TypeReader[]
  nameWithType: TypeReader[]
  fullName: Discord.Commands.TypeReader[]
  nameWithType.vb: TypeReader()
  fullName.vb: Discord.Commands.TypeReader()
  name.vb: TypeReader()
  spec.csharp:
  - uid: Discord.Commands.TypeReader
    name: TypeReader
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Discord.Commands.TypeReader
    name: TypeReader
    isExternal: true
  - name: (
  - name: )
- uid: Discord.Commands
  commentId: N:Discord.Commands
  isExternal: true
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
  spec.csharp:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.Commands
    name: Commands
    isExternal: true
  spec.vb:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.Commands
    name: Commands
    isExternal: true
- uid: Mewdeko.Extensions.Extensions.TryGetUrlPath*
  commentId: Overload:Mewdeko.Extensions.Extensions.TryGetUrlPath
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_TryGetUrlPath_System_String_System_String__
  name: TryGetUrlPath
  nameWithType: Extensions.TryGetUrlPath
  fullName: Mewdeko.Extensions.Extensions.TryGetUrlPath
- uid: Mewdeko.Extensions.Extensions.ToIEmote*
  commentId: Overload:Mewdeko.Extensions.Extensions.ToIEmote
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ToIEmote_System_String_
  name: ToIEmote
  nameWithType: Extensions.ToIEmote
  fullName: Mewdeko.Extensions.Extensions.ToIEmote
- uid: Discord.IEmote
  commentId: T:Discord.IEmote
  parent: Discord
  isExternal: true
  name: IEmote
  nameWithType: IEmote
  fullName: Discord.IEmote
- uid: Mewdeko.Extensions.Extensions.TryToIEmote*
  commentId: Overload:Mewdeko.Extensions.Extensions.TryToIEmote
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_TryToIEmote_System_String_Discord_IEmote__
  name: TryToIEmote
  nameWithType: Extensions.TryToIEmote
  fullName: Mewdeko.Extensions.Extensions.TryToIEmote
- uid: Mewdeko.Extensions.Extensions.RedisKey*
  commentId: Overload:Mewdeko.Extensions.Extensions.RedisKey
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_RedisKey_Mewdeko_Services_IBotCredentials_
  name: RedisKey
  nameWithType: Extensions.RedisKey
  fullName: Mewdeko.Extensions.Extensions.RedisKey
- uid: Mewdeko.Services.IBotCredentials
  commentId: T:Mewdeko.Services.IBotCredentials
  parent: Mewdeko.Services
  href: Mewdeko.Services.IBotCredentials.html
  name: IBotCredentials
  nameWithType: IBotCredentials
  fullName: Mewdeko.Services.IBotCredentials
- uid: Mewdeko.Services
  commentId: N:Mewdeko.Services
  href: Mewdeko.html
  name: Mewdeko.Services
  nameWithType: Mewdeko.Services
  fullName: Mewdeko.Services
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
- uid: Mewdeko.Extensions.Extensions.ReplaceAsync*
  commentId: Overload:Mewdeko.Extensions.Extensions.ReplaceAsync
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ReplaceAsync_System_Text_RegularExpressions_Regex_System_String_System_Func_System_Text_RegularExpressions_Match_System_Threading_Tasks_Task_System_String___
  name: ReplaceAsync
  nameWithType: Extensions.ReplaceAsync
  fullName: Mewdeko.Extensions.Extensions.ReplaceAsync
- uid: System.Func{System.Text.RegularExpressions.Match,System.Threading.Tasks.Task{System.String}}
  commentId: T:System.Func{System.Text.RegularExpressions.Match,System.Threading.Tasks.Task{System.String}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<Match, Task<string>>
  nameWithType: Func<Match, Task<string>>
  fullName: System.Func<System.Text.RegularExpressions.Match, System.Threading.Tasks.Task<string>>
  nameWithType.vb: Func(Of Match, Task(Of String))
  fullName.vb: System.Func(Of System.Text.RegularExpressions.Match, System.Threading.Tasks.Task(Of String))
  name.vb: Func(Of Match, Task(Of String))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: System.Text.RegularExpressions.Match
    name: Match
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.regularexpressions.match
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Text.RegularExpressions.Match
    name: Match
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.regularexpressions.match
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Mewdeko.Extensions.Extensions.ThrowIfNull*
  commentId: Overload:Mewdeko.Extensions.Extensions.ThrowIfNull
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  name: ThrowIfNull
  nameWithType: Extensions.ThrowIfNull
  fullName: Mewdeko.Extensions.Extensions.ThrowIfNull
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Mewdeko.Extensions.Extensions.IsAuthor*
  commentId: Overload:Mewdeko.Extensions.Extensions.IsAuthor
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_IsAuthor_Discord_IMessage_Discord_IDiscordClient_
  name: IsAuthor
  nameWithType: Extensions.IsAuthor
  fullName: Mewdeko.Extensions.Extensions.IsAuthor
- uid: Discord.IMessage
  commentId: T:Discord.IMessage
  parent: Discord
  isExternal: true
  name: IMessage
  nameWithType: IMessage
  fullName: Discord.IMessage
- uid: Discord.IDiscordClient
  commentId: T:Discord.IDiscordClient
  parent: Discord
  isExternal: true
  name: IDiscordClient
  nameWithType: IDiscordClient
  fullName: Discord.IDiscordClient
- uid: Mewdeko.Extensions.Extensions.RealSummary*
  commentId: Overload:Mewdeko.Extensions.Extensions.RealSummary
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_RealSummary_Discord_Commands_CommandInfo_Mewdeko_Services_strings_IBotStrings_System_Nullable_System_UInt64__System_String_
  name: RealSummary
  nameWithType: Extensions.RealSummary
  fullName: Mewdeko.Extensions.Extensions.RealSummary
- uid: Discord.Commands.CommandInfo
  commentId: T:Discord.Commands.CommandInfo
  parent: Discord.Commands
  isExternal: true
  name: CommandInfo
  nameWithType: CommandInfo
  fullName: Discord.Commands.CommandInfo
- uid: Mewdeko.Services.strings.IBotStrings
  commentId: T:Mewdeko.Services.strings.IBotStrings
  parent: Mewdeko.Services.strings
  href: Mewdeko.Services.strings.IBotStrings.html
  name: IBotStrings
  nameWithType: IBotStrings
  fullName: Mewdeko.Services.strings.IBotStrings
- uid: System.Nullable{System.UInt64}
  commentId: T:System.Nullable{System.UInt64}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong?
  nameWithType: ulong?
  fullName: ulong?
  nameWithType.vb: ULong?
  fullName.vb: ULong?
  name.vb: ULong?
  spec.csharp:
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: '?'
  spec.vb:
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: '?'
- uid: Mewdeko.Services.strings
  commentId: N:Mewdeko.Services.strings
  href: Mewdeko.html
  name: Mewdeko.Services.strings
  nameWithType: Mewdeko.Services.strings
  fullName: Mewdeko.Services.strings
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
  - name: .
  - uid: Mewdeko.Services.strings
    name: strings
    href: Mewdeko.Services.strings.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
  - name: .
  - uid: Mewdeko.Services.strings
    name: strings
    href: Mewdeko.Services.strings.html
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Mewdeko.Extensions.Extensions.RealRemarksArr*
  commentId: Overload:Mewdeko.Extensions.Extensions.RealRemarksArr
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_RealRemarksArr_Discord_Commands_CommandInfo_Mewdeko_Services_strings_IBotStrings_System_Nullable_System_UInt64__System_String_
  name: RealRemarksArr
  nameWithType: Extensions.RealRemarksArr
  fullName: Mewdeko.Extensions.Extensions.RealRemarksArr
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: Mewdeko.Extensions.Extensions.MethodName*
  commentId: Overload:Mewdeko.Extensions.Extensions.MethodName
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_MethodName_Discord_Commands_CommandInfo_
  name: MethodName
  nameWithType: Extensions.MethodName
  fullName: Mewdeko.Extensions.Extensions.MethodName
- uid: Mewdeko.Extensions.Extensions.GetFullUsage*
  commentId: Overload:Mewdeko.Extensions.Extensions.GetFullUsage
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_GetFullUsage_System_String_System_String_System_String_
  name: GetFullUsage
  nameWithType: Extensions.GetFullUsage
  fullName: Mewdeko.Extensions.Extensions.GetFullUsage
- uid: Mewdeko.Extensions.Extensions.AddPaginatedFooter*
  commentId: Overload:Mewdeko.Extensions.Extensions.AddPaginatedFooter
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_AddPaginatedFooter_Discord_EmbedBuilder_System_Int32_System_Nullable_System_Int32__
  name: AddPaginatedFooter
  nameWithType: Extensions.AddPaginatedFooter
  fullName: Mewdeko.Extensions.Extensions.AddPaginatedFooter
- uid: Discord.EmbedBuilder
  commentId: T:Discord.EmbedBuilder
  parent: Discord
  isExternal: true
  name: EmbedBuilder
  nameWithType: EmbedBuilder
  fullName: Discord.EmbedBuilder
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int?
  nameWithType: int?
  fullName: int?
  nameWithType.vb: Integer?
  fullName.vb: Integer?
  name.vb: Integer?
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
- uid: Mewdeko.Extensions.Extensions.WithOkColor*
  commentId: Overload:Mewdeko.Extensions.Extensions.WithOkColor
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_WithOkColor_Discord_EmbedBuilder_
  name: WithOkColor
  nameWithType: Extensions.WithOkColor
  fullName: Mewdeko.Extensions.Extensions.WithOkColor
- uid: Mewdeko.Extensions.Extensions.WithErrorColor*
  commentId: Overload:Mewdeko.Extensions.Extensions.WithErrorColor
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_WithErrorColor_Discord_EmbedBuilder_
  name: WithErrorColor
  nameWithType: Extensions.WithErrorColor
  fullName: Mewdeko.Extensions.Extensions.WithErrorColor
- uid: Fergun.Interactive.PageBuilder
  commentId: T:Fergun.Interactive.PageBuilder
  parent: Fergun.Interactive
  isExternal: true
  name: PageBuilder
  nameWithType: PageBuilder
  fullName: Fergun.Interactive.PageBuilder
- uid: Fergun.Interactive
  commentId: N:Fergun.Interactive
  isExternal: true
  name: Fergun.Interactive
  nameWithType: Fergun.Interactive
  fullName: Fergun.Interactive
  spec.csharp:
  - uid: Fergun
    name: Fergun
    isExternal: true
  - name: .
  - uid: Fergun.Interactive
    name: Interactive
    isExternal: true
  spec.vb:
  - uid: Fergun
    name: Fergun
    isExternal: true
  - name: .
  - uid: Fergun.Interactive
    name: Interactive
    isExternal: true
- uid: Mewdeko.Extensions.Extensions.AddFakeHeaders*
  commentId: Overload:Mewdeko.Extensions.Extensions.AddFakeHeaders
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_AddFakeHeaders_System_Net_Http_HttpClient_
  name: AddFakeHeaders
  nameWithType: Extensions.AddFakeHeaders
  fullName: Mewdeko.Extensions.Extensions.AddFakeHeaders
- uid: System.Net.Http.HttpClient
  commentId: T:System.Net.Http.HttpClient
  parent: System.Net.Http
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.net.http.httpclient
  name: HttpClient
  nameWithType: HttpClient
  fullName: System.Net.Http.HttpClient
- uid: System.Net.Http
  commentId: N:System.Net.Http
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Net.Http
  nameWithType: System.Net.Http
  fullName: System.Net.Http
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Net
    name: Net
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net
  - name: .
  - uid: System.Net.Http
    name: Http
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.http
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Net
    name: Net
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net
  - name: .
  - uid: System.Net.Http
    name: Http
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.http
- uid: System.Net.Http.Headers.HttpHeaders
  commentId: T:System.Net.Http.Headers.HttpHeaders
  parent: System.Net.Http.Headers
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.net.http.headers.httpheaders
  name: HttpHeaders
  nameWithType: HttpHeaders
  fullName: System.Net.Http.Headers.HttpHeaders
- uid: System.Net.Http.Headers
  commentId: N:System.Net.Http.Headers
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Net.Http.Headers
  nameWithType: System.Net.Http.Headers
  fullName: System.Net.Http.Headers
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Net
    name: Net
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net
  - name: .
  - uid: System.Net.Http
    name: Http
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.http
  - name: .
  - uid: System.Net.Http.Headers
    name: Headers
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.http.headers
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Net
    name: Net
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net
  - name: .
  - uid: System.Net.Http
    name: Http
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.http
  - name: .
  - uid: System.Net.Http.Headers
    name: Headers
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.http.headers
- uid: Mewdeko.Extensions.Extensions.DeleteAfter*
  commentId: Overload:Mewdeko.Extensions.Extensions.DeleteAfter
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_DeleteAfter_Discord_IUserMessage_System_Int32_
  name: DeleteAfter
  nameWithType: Extensions.DeleteAfter
  fullName: Mewdeko.Extensions.Extensions.DeleteAfter
- uid: Discord.IUserMessage
  commentId: T:Discord.IUserMessage
  parent: Discord
  isExternal: true
  name: IUserMessage
  nameWithType: IUserMessage
  fullName: Discord.IUserMessage
- uid: Mewdeko.Extensions.Extensions.GetTopLevelModule*
  commentId: Overload:Mewdeko.Extensions.Extensions.GetTopLevelModule
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_GetTopLevelModule_Discord_Commands_ModuleInfo_
  name: GetTopLevelModule
  nameWithType: Extensions.GetTopLevelModule
  fullName: Mewdeko.Extensions.Extensions.GetTopLevelModule
- uid: Discord.Commands.ModuleInfo
  commentId: T:Discord.Commands.ModuleInfo
  parent: Discord.Commands
  isExternal: true
  name: ModuleInfo
  nameWithType: ModuleInfo
  fullName: Discord.Commands.ModuleInfo
- uid: Mewdeko.Extensions.Extensions.GetMembersAsync*
  commentId: Overload:Mewdeko.Extensions.Extensions.GetMembersAsync
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_GetMembersAsync_Discord_IRole_
  name: GetMembersAsync
  nameWithType: Extensions.GetMembersAsync
  fullName: Mewdeko.Extensions.Extensions.GetMembersAsync
- uid: Discord.IRole
  commentId: T:Discord.IRole
  parent: Discord
  isExternal: true
  name: IRole
  nameWithType: IRole
  fullName: Discord.IRole
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Discord.IGuildUser}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Discord.IGuildUser}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IEnumerable<IGuildUser>>
  nameWithType: Task<IEnumerable<IGuildUser>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Discord.IGuildUser>>
  nameWithType.vb: Task(Of IEnumerable(Of IGuildUser))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Discord.IGuildUser))
  name.vb: Task(Of IEnumerable(Of IGuildUser))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Discord.IGuildUser
    name: IGuildUser
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Discord.IGuildUser
    name: IGuildUser
    isExternal: true
  - name: )
  - name: )
- uid: Mewdeko.Extensions.Extensions.ToStream*
  commentId: Overload:Mewdeko.Extensions.Extensions.ToStream
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ToStream_SkiaSharp_SKImage_SkiaSharp_SKEncodedImageFormat_
  name: ToStream
  nameWithType: Extensions.ToStream
  fullName: Mewdeko.Extensions.Extensions.ToStream
- uid: SkiaSharp.SKImage
  commentId: T:SkiaSharp.SKImage
  parent: SkiaSharp
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/skiasharp.skimage
  name: SKImage
  nameWithType: SKImage
  fullName: SkiaSharp.SKImage
- uid: SkiaSharp.SKEncodedImageFormat
  commentId: T:SkiaSharp.SKEncodedImageFormat
  parent: SkiaSharp
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/skiasharp.skencodedimageformat
  name: SKEncodedImageFormat
  nameWithType: SKEncodedImageFormat
  fullName: SkiaSharp.SKEncodedImageFormat
- uid: System.IO.MemoryStream
  commentId: T:System.IO.MemoryStream
  parent: System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.memorystream
  name: MemoryStream
  nameWithType: MemoryStream
  fullName: System.IO.MemoryStream
- uid: SkiaSharp
  commentId: N:SkiaSharp
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/skiasharp
  name: SkiaSharp
  nameWithType: SkiaSharp
  fullName: SkiaSharp
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
- uid: System.Collections.Generic.IEnumerable{System.Byte}
  commentId: T:System.Collections.Generic.IEnumerable{System.Byte}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<byte>
  nameWithType: IEnumerable<byte>
  fullName: System.Collections.Generic.IEnumerable<byte>
  nameWithType.vb: IEnumerable(Of Byte)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Byte)
  name.vb: IEnumerable(Of Byte)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.stream
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: Mewdeko.Extensions.Extensions.GetRoles*
  commentId: Overload:Mewdeko.Extensions.Extensions.GetRoles
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_GetRoles_Discord_IGuildUser_
  name: GetRoles
  nameWithType: Extensions.GetRoles
  fullName: Mewdeko.Extensions.Extensions.GetRoles
- uid: Discord.IGuildUser
  commentId: T:Discord.IGuildUser
  parent: Discord
  isExternal: true
  name: IGuildUser
  nameWithType: IGuildUser
  fullName: Discord.IGuildUser
- uid: System.Collections.Generic.IEnumerable{Discord.IRole}
  commentId: T:System.Collections.Generic.IEnumerable{Discord.IRole}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IRole>
  nameWithType: IEnumerable<IRole>
  fullName: System.Collections.Generic.IEnumerable<Discord.IRole>
  nameWithType.vb: IEnumerable(Of IRole)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Discord.IRole)
  name.vb: IEnumerable(Of IRole)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Discord.IRole
    name: IRole
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Discord.IRole
    name: IRole
    isExternal: true
  - name: )
- uid: Mewdeko.Extensions.Extensions.IsImage*
  commentId: Overload:Mewdeko.Extensions.Extensions.IsImage
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_IsImage_System_Net_Http_HttpResponseMessage_
  name: IsImage
  nameWithType: Extensions.IsImage
  fullName: Mewdeko.Extensions.Extensions.IsImage
- uid: System.Net.Http.HttpResponseMessage
  commentId: T:System.Net.Http.HttpResponseMessage
  parent: System.Net.Http
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.net.http.httpresponsemessage
  name: HttpResponseMessage
  nameWithType: HttpResponseMessage
  fullName: System.Net.Http.HttpResponseMessage
- uid: Mewdeko.Extensions.Extensions.GetImageSize*
  commentId: Overload:Mewdeko.Extensions.Extensions.GetImageSize
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_GetImageSize_System_Net_Http_HttpResponseMessage_
  name: GetImageSize
  nameWithType: Extensions.GetImageSize
  fullName: Mewdeko.Extensions.Extensions.GetImageSize
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long?
  nameWithType: long?
  fullName: long?
  nameWithType.vb: Long?
  fullName.vb: Long?
  name.vb: Long?
  spec.csharp:
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '?'
  spec.vb:
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '?'
- uid: Mewdeko.Extensions.Extensions.ToSkImage*
  commentId: Overload:Mewdeko.Extensions.Extensions.ToSkImage
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ToSkImage_System_Byte___
  name: ToSkImage
  nameWithType: Extensions.ToSkImage
  fullName: Mewdeko.Extensions.Extensions.ToSkImage
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: Mewdeko.Extensions.Extensions.GetCtNames*
  commentId: Overload:Mewdeko.Extensions.Extensions.GetCtNames
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_GetCtNames_Discord_IApplicationCommand_
  name: GetCtNames
  nameWithType: Extensions.GetCtNames
  fullName: Mewdeko.Extensions.Extensions.GetCtNames
- uid: Discord.IApplicationCommand
  commentId: T:Discord.IApplicationCommand
  parent: Discord
  isExternal: true
  name: IApplicationCommand
  nameWithType: IApplicationCommand
  fullName: Discord.IApplicationCommand
- uid: Mewdeko.Extensions.Extensions.GetRealName*
  commentId: Overload:Mewdeko.Extensions.Extensions.GetRealName
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_GetRealName_Discord_WebSocket_SocketInteraction_
  name: GetRealName
  nameWithType: Extensions.GetRealName
  fullName: Mewdeko.Extensions.Extensions.GetRealName
- uid: Discord.WebSocket.SocketInteraction
  commentId: T:Discord.WebSocket.SocketInteraction
  parent: Discord.WebSocket
  isExternal: true
  name: SocketInteraction
  nameWithType: SocketInteraction
  fullName: Discord.WebSocket.SocketInteraction
