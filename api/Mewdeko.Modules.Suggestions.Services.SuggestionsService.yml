### YamlMime:ManagedReference
items:
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  commentId: T:Mewdeko.Modules.Suggestions.Services.SuggestionsService
  id: SuggestionsService
  parent: Mewdeko.Modules.Suggestions.Services
  children:
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.#ctor(Mewdeko.Database.DbService,Discord.WebSocket.DiscordSocketClient,Mewdeko.Modules.Administration.Services.AdministrationService,Mewdeko.Modules.Permissions.Services.PermissionService,Mewdeko.Services.GuildSettingsService,Mewdeko.Services.Impl.EventHandler,Mewdeko.Common.Configs.BotConfig)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.AddThreadChannel(System.UInt64,System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.ForUser(System.UInt64,System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetAcceptChannel(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetAcceptMessage(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnAccept(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnConsider(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnDeny(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnImplement(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetButtonStyle(Discord.IGuild,System.Int32)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetConsiderChannel(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetConsiderMessage(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetCurrentCount(System.UInt64,System.Int32)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetDenyChannel(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetDenyMessage(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetEmoteMode(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetEmotes(System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetImplementChannel(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetImplementMessage(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetMaxLength(System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetMinLength(System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetPickedEmote(System.UInt64,System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetRepostedMessageAndChannel(Mewdeko.Database.Models.SuggestionsModel,Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSNum(System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButton(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonChannel(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonColor(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonEmote(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonMessage(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonMessageId(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonName(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonRepost(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestByMessage(System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestMote(Discord.IGuild,System.Int32)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestionChannel(System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestionMessage(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetThreadByMessage(System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetThreadType(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendAcceptEmbed(Discord.IGuild,Discord.WebSocket.DiscordSocketClient,Discord.IUser,System.UInt64,Discord.ITextChannel,System.String,Discord.IDiscordInteraction)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendConsiderEmbed(Discord.IGuild,Discord.WebSocket.DiscordSocketClient,Discord.IUser,System.UInt64,Discord.ITextChannel,System.String,Discord.IDiscordInteraction)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendDenyEmbed(Discord.IGuild,Discord.WebSocket.DiscordSocketClient,Discord.IUser,System.UInt64,Discord.ITextChannel,System.String,Discord.IDiscordInteraction)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendImplementEmbed(Discord.IGuild,Discord.WebSocket.DiscordSocketClient,Discord.IUser,System.UInt64,Discord.ITextChannel,System.String,Discord.IDiscordInteraction)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendSuggestion(Discord.IGuild,Discord.IGuildUser,Discord.WebSocket.DiscordSocketClient,System.String,Discord.ITextChannel,Discord.IDiscordInteraction)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetAcceptChannel(Discord.IGuild,System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetAcceptMessage(Discord.IGuild,System.String)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnAccept(Discord.IGuild,System.Boolean)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnConsider(Discord.IGuild,System.Boolean)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnDeny(Discord.IGuild,System.Boolean)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnImplement(Discord.IGuild,System.Boolean)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetButtonType(Discord.IGuild,System.Int32,System.Int32)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetConsiderChannel(Discord.IGuild,System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetConsiderMessage(Discord.IGuild,System.String)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetDenyChannel(Discord.IGuild,System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetDenyMessage(Discord.IGuild,System.String)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetEmoteMode(Discord.IGuild,System.Int32)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetImplementChannel(Discord.IGuild,System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetImplementMessage(Discord.IGuild,System.String)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetMaxLength(Discord.IGuild,System.Int32)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetMinLength(Discord.IGuild,System.Int32)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonChannel(Discord.IGuild,System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonColor(Discord.IGuild,System.Int32)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonEmote(Discord.IGuild,System.String)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonLabel(Discord.IGuild,System.String)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonMessage(Discord.IGuild,System.String)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestThreadsType(Discord.IGuild,System.Int32)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionButtonId(Discord.IGuild,System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionChannelId(Discord.IGuild,System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionEmotes(Discord.IGuild,System.String)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionMessage(Discord.IGuild,System.String)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggest(Discord.IGuild,System.UInt64,System.UInt64,System.UInt64,System.String)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.SuggestReset(Discord.IGuild)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggestions(System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggestions(System.UInt64,System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.Sugnum(Discord.IGuild,System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateEmoteCount(System.UInt64,System.Int32,System.Boolean)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdatePickedEmote(System.UInt64,System.UInt64,System.Int32)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateStateMessageId(Mewdeko.Database.Models.SuggestionsModel,System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateSuggestState(Mewdeko.Database.Models.SuggestionsModel,System.Int32,System.UInt64)
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateSuggestionButtonMessage(Discord.IGuild,System.String,System.Boolean)
  langs:
  - csharp
  - vb
  name: SuggestionsService
  nameWithType: SuggestionsService
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  type: Class
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SuggestionsService
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 14
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Manages suggestion operations within a Discord server, facilitating suggestion creation, tracking, and status updates.
  example: []
  syntax:
    content: 'public class SuggestionsService : INService'
    content.vb: Public Class SuggestionsService Implements INService
  inheritance:
  - System.Object
  implements:
  - Mewdeko.Services.INService
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Mewdeko.Modules.Suggestions.Services.SuggestionsService.Mewdeko.Extensions.Extensions.ThrowIfNull``1(System.String)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.#ctor(Mewdeko.Database.DbService,Discord.WebSocket.DiscordSocketClient,Mewdeko.Modules.Administration.Services.AdministrationService,Mewdeko.Modules.Permissions.Services.PermissionService,Mewdeko.Services.GuildSettingsService,Mewdeko.Services.Impl.EventHandler,Mewdeko.Common.Configs.BotConfig)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.#ctor(Mewdeko.Database.DbService,Discord.WebSocket.DiscordSocketClient,Mewdeko.Modules.Administration.Services.AdministrationService,Mewdeko.Modules.Permissions.Services.PermissionService,Mewdeko.Services.GuildSettingsService,Mewdeko.Services.Impl.EventHandler,Mewdeko.Common.Configs.BotConfig)
  id: '#ctor(Mewdeko.Database.DbService,Discord.WebSocket.DiscordSocketClient,Mewdeko.Modules.Administration.Services.AdministrationService,Mewdeko.Modules.Permissions.Services.PermissionService,Mewdeko.Services.GuildSettingsService,Mewdeko.Services.Impl.EventHandler,Mewdeko.Common.Configs.BotConfig)'
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SuggestionsService(DbService, DiscordSocketClient, AdministrationService, PermissionService, GuildSettingsService, EventHandler, BotConfig)
  nameWithType: SuggestionsService.SuggestionsService(DbService, DiscordSocketClient, AdministrationService, PermissionService, GuildSettingsService, EventHandler, BotConfig)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SuggestionsService(Mewdeko.Database.DbService, Discord.WebSocket.DiscordSocketClient, Mewdeko.Modules.Administration.Services.AdministrationService, Mewdeko.Modules.Permissions.Services.PermissionService, Mewdeko.Services.GuildSettingsService, Mewdeko.Services.Impl.EventHandler, Mewdeko.Common.Configs.BotConfig)
  type: Constructor
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: .ctor
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 34
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Initializes a new instance of the SuggestionsService class.
  example: []
  syntax:
    content: public SuggestionsService(DbService db, DiscordSocketClient client, AdministrationService aserv, PermissionService permserv, GuildSettingsService guildSettings, EventHandler eventHandler, BotConfig config)
    parameters:
    - id: db
      type: Mewdeko.Database.DbService
      description: Database service for data persistence.
    - id: client
      type: Discord.WebSocket.DiscordSocketClient
      description: The Discord client instance.
    - id: aserv
      type: Mewdeko.Modules.Administration.Services.AdministrationService
      description: Service for administration tasks.
    - id: permserv
      type: Mewdeko.Modules.Permissions.Services.PermissionService
      description: Service for managing permissions.
    - id: guildSettings
      type: Mewdeko.Services.GuildSettingsService
      description: Service for guild-specific settings.
    - id: eventHandler
      type: Mewdeko.Services.Impl.EventHandler
      description: Event handler for Discord client events.
    - id: config
      type: Mewdeko.Common.Configs.BotConfig
    content.vb: Public Sub New(db As DbService, client As DiscordSocketClient, aserv As AdministrationService, permserv As PermissionService, guildSettings As GuildSettingsService, eventHandler As EventHandler, config As BotConfig)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.#ctor*
  nameWithType.vb: SuggestionsService.New(DbService, DiscordSocketClient, AdministrationService, PermissionService, GuildSettingsService, EventHandler, BotConfig)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.New(Mewdeko.Database.DbService, Discord.WebSocket.DiscordSocketClient, Mewdeko.Modules.Administration.Services.AdministrationService, Mewdeko.Modules.Permissions.Services.PermissionService, Mewdeko.Services.GuildSettingsService, Mewdeko.Services.Impl.EventHandler, Mewdeko.Common.Configs.BotConfig)
  name.vb: New(DbService, DiscordSocketClient, AdministrationService, PermissionService, GuildSettingsService, EventHandler, BotConfig)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSNum(System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSNum(System.UInt64)
  id: GetSNum(System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetSNum(ulong)
  nameWithType: SuggestionsService.GetSNum(ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSNum(ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetSNum
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 439
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Gets the current suggestion number for a guild.
  example: []
  syntax:
    content: public Task<ulong> GetSNum(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The unique identifier of the guild.
    return:
      type: System.Threading.Tasks.Task{System.UInt64}
      description: The current suggestion number.
    content.vb: Public Function GetSNum(id As ULong) As Task(Of ULong)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSNum*
  nameWithType.vb: SuggestionsService.GetSNum(ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSNum(ULong)
  name.vb: GetSNum(ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetMaxLength(System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetMaxLength(System.UInt64)
  id: GetMaxLength(System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetMaxLength(ulong)
  nameWithType: SuggestionsService.GetMaxLength(ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetMaxLength(ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetMaxLength
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 446
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Gets the maximum length allowed for suggestions in a guild.
  example: []
  syntax:
    content: public Task<int> GetMaxLength(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The unique identifier of the guild.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The maximum length of suggestions.
    content.vb: Public Function GetMaxLength(id As ULong) As Task(Of Integer)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetMaxLength*
  nameWithType.vb: SuggestionsService.GetMaxLength(ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetMaxLength(ULong)
  name.vb: GetMaxLength(ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetMinLength(System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetMinLength(System.UInt64)
  id: GetMinLength(System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetMinLength(ulong)
  nameWithType: SuggestionsService.GetMinLength(ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetMinLength(ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetMinLength
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 453
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Gets the minimum length allowed for suggestions in a guild.
  example: []
  syntax:
    content: public Task<int> GetMinLength(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The unique identifier of the guild.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The minimum length of suggestions.
    content.vb: Public Function GetMinLength(id As ULong) As Task(Of Integer)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetMinLength*
  nameWithType.vb: SuggestionsService.GetMinLength(ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetMinLength(ULong)
  name.vb: GetMinLength(ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetEmotes(System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetEmotes(System.UInt64)
  id: GetEmotes(System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetEmotes(ulong)
  nameWithType: SuggestionsService.GetEmotes(ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetEmotes(ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetEmotes
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 460
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the custom emotes set for suggestions in a guild.
  example: []
  syntax:
    content: public Task<string> GetEmotes(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The unique identifier of the guild.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A string representing custom emotes.
    content.vb: Public Function GetEmotes(id As ULong) As Task(Of String)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetEmotes*
  nameWithType.vb: SuggestionsService.GetEmotes(ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetEmotes(ULong)
  name.vb: GetEmotes(ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetButtonType(Discord.IGuild,System.Int32,System.Int32)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetButtonType(Discord.IGuild,System.Int32,System.Int32)
  id: SetButtonType(Discord.IGuild,System.Int32,System.Int32)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetButtonType(IGuild, int, int)
  nameWithType: SuggestionsService.SetButtonType(IGuild, int, int)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetButtonType(Discord.IGuild, int, int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetButtonType
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 469
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets the button style for suggestion interaction buttons within the guild.
  example: []
  syntax:
    content: public Task SetButtonType(IGuild guild, int buttonId, int color)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild where the setting is to be applied.
    - id: buttonId
      type: System.Int32
      description: The identifier for the specific button to modify.
    - id: color
      type: System.Int32
      description: The color code to set for the button.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetButtonType(guild As IGuild, buttonId As Integer, color As Integer) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetButtonType*
  nameWithType.vb: SuggestionsService.SetButtonType(IGuild, Integer, Integer)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetButtonType(Discord.IGuild, Integer, Integer)
  name.vb: SetButtonType(IGuild, Integer, Integer)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetRepostedMessageAndChannel(Mewdeko.Database.Models.SuggestionsModel,Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetRepostedMessageAndChannel(Mewdeko.Database.Models.SuggestionsModel,Discord.IGuild)
  id: GetRepostedMessageAndChannel(Mewdeko.Database.Models.SuggestionsModel,Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetRepostedMessageAndChannel(SuggestionsModel, IGuild)
  nameWithType: SuggestionsService.GetRepostedMessageAndChannel(SuggestionsModel, IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetRepostedMessageAndChannel(Mewdeko.Database.Models.SuggestionsModel, Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetRepostedMessageAndChannel
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 502
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Gets the message and channel IDs for a reposted suggestion, based on its current state.
  example: []
  syntax:
    content: public Task<(ulong, ulong)> GetRepostedMessageAndChannel(SuggestionsModel suggestions, IGuild guild)
    parameters:
    - id: suggestions
      type: Mewdeko.Database.Models.SuggestionsModel
      description: The suggestions model containing the current state.
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the settings.
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.UInt64,System.UInt64}}
      description: A tuple containing the message ID and channel ID.
    content.vb: Public Function GetRepostedMessageAndChannel(suggestions As SuggestionsModel, guild As IGuild) As Task(Of (ULong, ULong))
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetRepostedMessageAndChannel*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionEmotes(Discord.IGuild,System.String)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionEmotes(Discord.IGuild,System.String)
  id: SetSuggestionEmotes(Discord.IGuild,System.String)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetSuggestionEmotes(IGuild, string)
  nameWithType: SuggestionsService.SetSuggestionEmotes(IGuild, string)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionEmotes(Discord.IGuild, string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetSuggestionEmotes
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 521
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets the custom emotes used for suggestions in the guild.
  example: []
  syntax:
    content: public Task SetSuggestionEmotes(IGuild guild, string parsedEmotes)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to configure.
    - id: parsedEmotes
      type: System.String
      description: A string representation of the custom emotes.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation of updating the suggestion emotes.
    content.vb: Public Function SetSuggestionEmotes(guild As IGuild, parsedEmotes As String) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionEmotes*
  nameWithType.vb: SuggestionsService.SetSuggestionEmotes(IGuild, String)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionEmotes(Discord.IGuild, String)
  name.vb: SetSuggestionEmotes(IGuild, String)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonColor(Discord.IGuild,System.Int32)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonColor(Discord.IGuild,System.Int32)
  id: SetSuggestButtonColor(Discord.IGuild,System.Int32)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetSuggestButtonColor(IGuild, int)
  nameWithType: SuggestionsService.SetSuggestButtonColor(IGuild, int)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonColor(Discord.IGuild, int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetSuggestButtonColor
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 536
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets the color for the suggestion button in the guild.
  example: []
  syntax:
    content: public Task SetSuggestButtonColor(IGuild guild, int colorNum)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to configure.
    - id: colorNum
      type: System.Int32
      description: The color number to set for the suggestion button.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation of setting the button color.
    content.vb: Public Function SetSuggestButtonColor(guild As IGuild, colorNum As Integer) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonColor*
  nameWithType.vb: SuggestionsService.SetSuggestButtonColor(IGuild, Integer)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonColor(Discord.IGuild, Integer)
  name.vb: SetSuggestButtonColor(IGuild, Integer)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionButtonId(Discord.IGuild,System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionButtonId(Discord.IGuild,System.UInt64)
  id: SetSuggestionButtonId(Discord.IGuild,System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetSuggestionButtonId(IGuild, ulong)
  nameWithType: SuggestionsService.SetSuggestionButtonId(IGuild, ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionButtonId(Discord.IGuild, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetSuggestionButtonId
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 551
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Assigns a message ID to the suggestion button for a guild.
  example: []
  syntax:
    content: public Task SetSuggestionButtonId(IGuild guild, ulong messageId)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to configure.
    - id: messageId
      type: System.UInt64
      description: The message ID to associate with the suggestion button.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation of updating the button message ID.
    content.vb: Public Function SetSuggestionButtonId(guild As IGuild, messageId As ULong) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionButtonId*
  nameWithType.vb: SuggestionsService.SetSuggestionButtonId(IGuild, ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionButtonId(Discord.IGuild, ULong)
  name.vb: SetSuggestionButtonId(IGuild, ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionChannelId(Discord.IGuild,System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionChannelId(Discord.IGuild,System.UInt64)
  id: SetSuggestionChannelId(Discord.IGuild,System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetSuggestionChannelId(IGuild, ulong)
  nameWithType: SuggestionsService.SetSuggestionChannelId(IGuild, ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionChannelId(Discord.IGuild, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetSuggestionChannelId
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 567
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets the channel ID for suggestions in the guild.
  example: []
  syntax:
    content: public Task SetSuggestionChannelId(IGuild guild, ulong channel)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to configure.
    - id: channel
      type: System.UInt64
      description: The channel ID where suggestions will be posted.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation of setting the suggestion channel ID.
    content.vb: Public Function SetSuggestionChannelId(guild As IGuild, channel As ULong) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionChannelId*
  nameWithType.vb: SuggestionsService.SetSuggestionChannelId(IGuild, ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionChannelId(Discord.IGuild, ULong)
  name.vb: SetSuggestionChannelId(IGuild, ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetMinLength(Discord.IGuild,System.Int32)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetMinLength(Discord.IGuild,System.Int32)
  id: SetMinLength(Discord.IGuild,System.Int32)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetMinLength(IGuild, int)
  nameWithType: SuggestionsService.SetMinLength(IGuild, int)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetMinLength(Discord.IGuild, int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetMinLength
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 582
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets the minimum length for suggestions in the guild.
  example: []
  syntax:
    content: public Task SetMinLength(IGuild guild, int minLength)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to configure.
    - id: minLength
      type: System.Int32
      description: The minimum length allowed for suggestions.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation of setting the minimum suggestion length.
    content.vb: Public Function SetMinLength(guild As IGuild, minLength As Integer) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetMinLength*
  nameWithType.vb: SuggestionsService.SetMinLength(IGuild, Integer)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetMinLength(Discord.IGuild, Integer)
  name.vb: SetMinLength(IGuild, Integer)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetMaxLength(Discord.IGuild,System.Int32)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetMaxLength(Discord.IGuild,System.Int32)
  id: SetMaxLength(Discord.IGuild,System.Int32)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetMaxLength(IGuild, int)
  nameWithType: SuggestionsService.SetMaxLength(IGuild, int)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetMaxLength(Discord.IGuild, int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetMaxLength
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 597
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets the maximum length for suggestions in the guild.
  example: []
  syntax:
    content: public Task SetMaxLength(IGuild guild, int maxLength)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to configure.
    - id: maxLength
      type: System.Int32
      description: The maximum length allowed for suggestions.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation of setting the maximum suggestion length.
    content.vb: Public Function SetMaxLength(guild As IGuild, maxLength As Integer) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetMaxLength*
  nameWithType.vb: SuggestionsService.SetMaxLength(IGuild, Integer)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetMaxLength(Discord.IGuild, Integer)
  name.vb: SetMaxLength(IGuild, Integer)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButton(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButton(Discord.IGuild)
  id: GetSuggestButton(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetSuggestButton(IGuild)
  nameWithType: SuggestionsService.GetSuggestButton(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButton(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetSuggestButton
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 611
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Generates a ComponentBuilder for the suggestion button with custom settings from the guild.
  example: []
  syntax:
    content: public Task<ComponentBuilder> GetSuggestButton(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to retrieve settings from.
    return:
      type: System.Threading.Tasks.Task{Discord.ComponentBuilder}
      description: A ComponentBuilder for creating interactive components.
    content.vb: Public Function GetSuggestButton(guild As IGuild) As Task(Of ComponentBuilder)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButton*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SuggestReset(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SuggestReset(Discord.IGuild)
  id: SuggestReset(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SuggestReset(IGuild)
  nameWithType: SuggestionsService.SuggestReset(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SuggestReset(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SuggestReset
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 635
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Resets the suggestion counter and removes all suggestions in the guild.
  example: []
  syntax:
    content: public Task SuggestReset(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild where the reset will occur.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation of resetting suggestions.
    content.vb: Public Function SuggestReset(guild As IGuild) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SuggestReset*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateSuggestionButtonMessage(Discord.IGuild,System.String,System.Boolean)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateSuggestionButtonMessage(Discord.IGuild,System.String,System.Boolean)
  id: UpdateSuggestionButtonMessage(Discord.IGuild,System.String,System.Boolean)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: UpdateSuggestionButtonMessage(IGuild, string?, bool)
  nameWithType: SuggestionsService.UpdateSuggestionButtonMessage(IGuild, string?, bool)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateSuggestionButtonMessage(Discord.IGuild, string?, bool)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: UpdateSuggestionButtonMessage
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 652
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Updates the message content or embed of the suggestion button in a guild. It allows bypassing the channel check and directly updating or creating a new message if the original message is not found.
  example: []
  syntax:
    content: public Task UpdateSuggestionButtonMessage(IGuild guild, string? code, bool bypasschannelcheck = false)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to update the suggestion button message in.
    - id: code
      type: System.String
      description: The new content or embed code for the suggestion button message.
    - id: bypasschannelcheck
      type: System.Boolean
      description: Determines whether to bypass the check for the suggestion button channel setting.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function UpdateSuggestionButtonMessage(guild As IGuild, code As String, bypasschannelcheck As Boolean = False) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateSuggestionButtonMessage*
  nameWithType.vb: SuggestionsService.UpdateSuggestionButtonMessage(IGuild, String, Boolean)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateSuggestionButtonMessage(Discord.IGuild, String, Boolean)
  name.vb: UpdateSuggestionButtonMessage(IGuild, String, Boolean)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonMessage(Discord.IGuild,System.String)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonMessage(Discord.IGuild,System.String)
  id: SetSuggestButtonMessage(Discord.IGuild,System.String)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetSuggestButtonMessage(IGuild, string?)
  nameWithType: SuggestionsService.SetSuggestButtonMessage(IGuild, string?)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonMessage(Discord.IGuild, string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetSuggestButtonMessage
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 748
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets a new message for the suggestion button in a guild. This could be an instruction or information related to making suggestions.
  example: []
  syntax:
    content: public Task SetSuggestButtonMessage(IGuild guild, string? message)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to set the suggestion button message in.
    - id: message
      type: System.String
      description: The new message for the suggestion button.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetSuggestButtonMessage(guild As IGuild, message As String) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonMessage*
  nameWithType.vb: SuggestionsService.SetSuggestButtonMessage(IGuild, String)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonMessage(Discord.IGuild, String)
  name.vb: SetSuggestButtonMessage(IGuild, String)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonLabel(Discord.IGuild,System.String)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonLabel(Discord.IGuild,System.String)
  id: SetSuggestButtonLabel(Discord.IGuild,System.String)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetSuggestButtonLabel(IGuild, string)
  nameWithType: SuggestionsService.SetSuggestButtonLabel(IGuild, string)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonLabel(Discord.IGuild, string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetSuggestButtonLabel
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 763
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets the label for the suggestion button in a guild. This label is displayed on the button itself.
  example: []
  syntax:
    content: public Task SetSuggestButtonLabel(IGuild guild, string message)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to set the suggestion button label in.
    - id: message
      type: System.String
      description: The new label for the suggestion button.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetSuggestButtonLabel(guild As IGuild, message As String) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonLabel*
  nameWithType.vb: SuggestionsService.SetSuggestButtonLabel(IGuild, String)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonLabel(Discord.IGuild, String)
  name.vb: SetSuggestButtonLabel(IGuild, String)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionMessage(Discord.IGuild,System.String)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionMessage(Discord.IGuild,System.String)
  id: SetSuggestionMessage(Discord.IGuild,System.String)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetSuggestionMessage(IGuild, string)
  nameWithType: SuggestionsService.SetSuggestionMessage(IGuild, string)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionMessage(Discord.IGuild, string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetSuggestionMessage
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 778
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets a new default message that is used when users submit suggestions in a guild. This message can contain placeholders that are replaced with suggestion-specific data.
  example: []
  syntax:
    content: public Task SetSuggestionMessage(IGuild guild, string message)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to set the new default suggestion message in.
    - id: message
      type: System.String
      description: The new default message for suggestions.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetSuggestionMessage(guild As IGuild, message As String) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionMessage*
  nameWithType.vb: SuggestionsService.SetSuggestionMessage(IGuild, String)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionMessage(Discord.IGuild, String)
  name.vb: SetSuggestionMessage(IGuild, String)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetAcceptMessage(Discord.IGuild,System.String)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetAcceptMessage(Discord.IGuild,System.String)
  id: SetAcceptMessage(Discord.IGuild,System.String)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetAcceptMessage(IGuild, string)
  nameWithType: SuggestionsService.SetAcceptMessage(IGuild, string)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetAcceptMessage(Discord.IGuild, string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetAcceptMessage
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 793
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets a new default message that is displayed when a suggestion is accepted in a guild.
  example: []
  syntax:
    content: public Task SetAcceptMessage(IGuild guild, string message)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to set the new default accept message in.
    - id: message
      type: System.String
      description: The new default message for when suggestions are accepted.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetAcceptMessage(guild As IGuild, message As String) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetAcceptMessage*
  nameWithType.vb: SuggestionsService.SetAcceptMessage(IGuild, String)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetAcceptMessage(Discord.IGuild, String)
  name.vb: SetAcceptMessage(IGuild, String)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetDenyMessage(Discord.IGuild,System.String)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetDenyMessage(Discord.IGuild,System.String)
  id: SetDenyMessage(Discord.IGuild,System.String)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetDenyMessage(IGuild, string)
  nameWithType: SuggestionsService.SetDenyMessage(IGuild, string)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetDenyMessage(Discord.IGuild, string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetDenyMessage
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 808
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets a new default message that is displayed when a suggestion is denied in a guild.
  example: []
  syntax:
    content: public Task SetDenyMessage(IGuild guild, string message)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to set the new default deny message in.
    - id: message
      type: System.String
      description: The new default message for when suggestions are denied.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetDenyMessage(guild As IGuild, message As String) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetDenyMessage*
  nameWithType.vb: SuggestionsService.SetDenyMessage(IGuild, String)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetDenyMessage(Discord.IGuild, String)
  name.vb: SetDenyMessage(IGuild, String)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetImplementMessage(Discord.IGuild,System.String)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetImplementMessage(Discord.IGuild,System.String)
  id: SetImplementMessage(Discord.IGuild,System.String)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetImplementMessage(IGuild, string)
  nameWithType: SuggestionsService.SetImplementMessage(IGuild, string)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetImplementMessage(Discord.IGuild, string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetImplementMessage
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 823
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets a new default message that is displayed when a suggestion is implemented in a guild.
  example: []
  syntax:
    content: public Task SetImplementMessage(IGuild guild, string message)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to set the new default implement message in.
    - id: message
      type: System.String
      description: The new default message for when suggestions are implemented.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetImplementMessage(guild As IGuild, message As String) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetImplementMessage*
  nameWithType.vb: SuggestionsService.SetImplementMessage(IGuild, String)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetImplementMessage(Discord.IGuild, String)
  name.vb: SetImplementMessage(IGuild, String)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateSuggestState(Mewdeko.Database.Models.SuggestionsModel,System.Int32,System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateSuggestState(Mewdeko.Database.Models.SuggestionsModel,System.Int32,System.UInt64)
  id: UpdateSuggestState(Mewdeko.Database.Models.SuggestionsModel,System.Int32,System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: UpdateSuggestState(SuggestionsModel, int, ulong)
  nameWithType: SuggestionsService.UpdateSuggestState(SuggestionsModel, int, ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateSuggestState(Mewdeko.Database.Models.SuggestionsModel, int, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: UpdateSuggestState
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 839
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Updates the state of a suggestion, marking it as accepted, denied, considered, or implemented, and records the user responsible for the state change.
  example: []
  syntax:
    content: public Task UpdateSuggestState(SuggestionsModel suggestionsModel, int state, ulong stateChangeId)
    parameters:
    - id: suggestionsModel
      type: Mewdeko.Database.Models.SuggestionsModel
      description: The suggestion model to update.
    - id: state
      type: System.Int32
      description: The new state of the suggestion.
    - id: stateChangeId
      type: System.UInt64
      description: The ID of the user responsible for the state change.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function UpdateSuggestState(suggestionsModel As SuggestionsModel, state As Integer, stateChangeId As ULong) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateSuggestState*
  nameWithType.vb: SuggestionsService.UpdateSuggestState(SuggestionsModel, Integer, ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateSuggestState(Mewdeko.Database.Models.SuggestionsModel, Integer, ULong)
  name.vb: UpdateSuggestState(SuggestionsModel, Integer, ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateStateMessageId(Mewdeko.Database.Models.SuggestionsModel,System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateStateMessageId(Mewdeko.Database.Models.SuggestionsModel,System.UInt64)
  id: UpdateStateMessageId(Mewdeko.Database.Models.SuggestionsModel,System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: UpdateStateMessageId(SuggestionsModel, ulong)
  nameWithType: SuggestionsService.UpdateStateMessageId(SuggestionsModel, ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateStateMessageId(Mewdeko.Database.Models.SuggestionsModel, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: UpdateStateMessageId
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 855
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Updates the message ID associated with the state change of a suggestion. This could refer to the message announcing the suggestion's acceptance, denial, consideration, or implementation.
  example: []
  syntax:
    content: public Task UpdateStateMessageId(SuggestionsModel suggestionsModel, ulong messageStateId)
    parameters:
    - id: suggestionsModel
      type: Mewdeko.Database.Models.SuggestionsModel
      description: The suggestion model to update.
    - id: messageStateId
      type: System.UInt64
      description: The new message ID associated with the state change.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function UpdateStateMessageId(suggestionsModel As SuggestionsModel, messageStateId As ULong) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateStateMessageId*
  nameWithType.vb: SuggestionsService.UpdateStateMessageId(SuggestionsModel, ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateStateMessageId(Mewdeko.Database.Models.SuggestionsModel, ULong)
  name.vb: UpdateStateMessageId(SuggestionsModel, ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestThreadsType(Discord.IGuild,System.Int32)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestThreadsType(Discord.IGuild,System.Int32)
  id: SetSuggestThreadsType(Discord.IGuild,System.Int32)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetSuggestThreadsType(IGuild, int)
  nameWithType: SuggestionsService.SetSuggestThreadsType(IGuild, int)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestThreadsType(Discord.IGuild, int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetSuggestThreadsType
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 869
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets the type of threads that can be created for discussions on suggestions in a guild.
  example: []
  syntax:
    content: public Task SetSuggestThreadsType(IGuild guild, int num)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to set the thread type in.
    - id: num
      type: System.Int32
      description: The thread type number (e.g., 0 for no threads, 1 for public threads).
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetSuggestThreadsType(guild As IGuild, num As Integer) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestThreadsType*
  nameWithType.vb: SuggestionsService.SetSuggestThreadsType(IGuild, Integer)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestThreadsType(Discord.IGuild, Integer)
  name.vb: SetSuggestThreadsType(IGuild, Integer)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetConsiderMessage(Discord.IGuild,System.String)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetConsiderMessage(Discord.IGuild,System.String)
  id: SetConsiderMessage(Discord.IGuild,System.String)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetConsiderMessage(IGuild, string)
  nameWithType: SuggestionsService.SetConsiderMessage(IGuild, string)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetConsiderMessage(Discord.IGuild, string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetConsiderMessage
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 884
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets a new default message that is displayed when a suggestion is under consideration in a guild.
  example: []
  syntax:
    content: public Task SetConsiderMessage(IGuild guild, string message)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to set the new default consider message in.
    - id: message
      type: System.String
      description: The new default message for when suggestions are under consideration.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetConsiderMessage(guild As IGuild, message As String) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetConsiderMessage*
  nameWithType.vb: SuggestionsService.SetConsiderMessage(IGuild, String)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetConsiderMessage(Discord.IGuild, String)
  name.vb: SetConsiderMessage(IGuild, String)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Sugnum(Discord.IGuild,System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.Sugnum(Discord.IGuild,System.UInt64)
  id: Sugnum(Discord.IGuild,System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: Sugnum(IGuild, ulong)
  nameWithType: SuggestionsService.Sugnum(IGuild, ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Sugnum(Discord.IGuild, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Sugnum
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 899
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Updates the suggestion number counter in a guild, typically after a new suggestion is added.
  example: []
  syntax:
    content: public Task Sugnum(IGuild guild, ulong num)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to update the suggestion number in.
    - id: num
      type: System.UInt64
      description: The new suggestion number.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function Sugnum(guild As IGuild, num As ULong) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Sugnum*
  nameWithType.vb: SuggestionsService.Sugnum(IGuild, ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Sugnum(Discord.IGuild, ULong)
  name.vb: Sugnum(IGuild, ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnDeny(Discord.IGuild,System.Boolean)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnDeny(Discord.IGuild,System.Boolean)
  id: SetArchiveOnDeny(Discord.IGuild,System.Boolean)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetArchiveOnDeny(IGuild, bool)
  nameWithType: SuggestionsService.SetArchiveOnDeny(IGuild, bool)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnDeny(Discord.IGuild, bool)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetArchiveOnDeny
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 914
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets whether suggestions that are denied should be automatically archived in a guild.
  example: []
  syntax:
    content: public Task SetArchiveOnDeny(IGuild guild, bool value)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to configure the auto-archive setting for denied suggestions.
    - id: value
      type: System.Boolean
      description: True if denied suggestions should be archived; otherwise, false.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetArchiveOnDeny(guild As IGuild, value As Boolean) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnDeny*
  nameWithType.vb: SuggestionsService.SetArchiveOnDeny(IGuild, Boolean)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnDeny(Discord.IGuild, Boolean)
  name.vb: SetArchiveOnDeny(IGuild, Boolean)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnAccept(Discord.IGuild,System.Boolean)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnAccept(Discord.IGuild,System.Boolean)
  id: SetArchiveOnAccept(Discord.IGuild,System.Boolean)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetArchiveOnAccept(IGuild, bool)
  nameWithType: SuggestionsService.SetArchiveOnAccept(IGuild, bool)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnAccept(Discord.IGuild, bool)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetArchiveOnAccept
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 929
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets the behavior for archiving suggestions upon acceptance within a guild.
  example: []
  syntax:
    content: public Task SetArchiveOnAccept(IGuild guild, bool value)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to set the archive behavior for.
    - id: value
      type: System.Boolean
      description: True to archive suggestions on acceptance; false otherwise.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetArchiveOnAccept(guild As IGuild, value As Boolean) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnAccept*
  nameWithType.vb: SuggestionsService.SetArchiveOnAccept(IGuild, Boolean)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnAccept(Discord.IGuild, Boolean)
  name.vb: SetArchiveOnAccept(IGuild, Boolean)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnConsider(Discord.IGuild,System.Boolean)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnConsider(Discord.IGuild,System.Boolean)
  id: SetArchiveOnConsider(Discord.IGuild,System.Boolean)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetArchiveOnConsider(IGuild, bool)
  nameWithType: SuggestionsService.SetArchiveOnConsider(IGuild, bool)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnConsider(Discord.IGuild, bool)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetArchiveOnConsider
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 944
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets the behavior for archiving suggestions upon consideration within a guild.
  example: []
  syntax:
    content: public Task SetArchiveOnConsider(IGuild guild, bool value)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to set the archive behavior for.
    - id: value
      type: System.Boolean
      description: True to archive suggestions on consideration; false otherwise.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetArchiveOnConsider(guild As IGuild, value As Boolean) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnConsider*
  nameWithType.vb: SuggestionsService.SetArchiveOnConsider(IGuild, Boolean)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnConsider(Discord.IGuild, Boolean)
  name.vb: SetArchiveOnConsider(IGuild, Boolean)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnImplement(Discord.IGuild,System.Boolean)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnImplement(Discord.IGuild,System.Boolean)
  id: SetArchiveOnImplement(Discord.IGuild,System.Boolean)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetArchiveOnImplement(IGuild, bool)
  nameWithType: SuggestionsService.SetArchiveOnImplement(IGuild, bool)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnImplement(Discord.IGuild, bool)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetArchiveOnImplement
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 959
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets the behavior for archiving suggestions upon implementation within a guild.
  example: []
  syntax:
    content: public Task SetArchiveOnImplement(IGuild guild, bool value)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to set the archive behavior for.
    - id: value
      type: System.Boolean
      description: True to archive suggestions on implementation; false otherwise.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetArchiveOnImplement(guild As IGuild, value As Boolean) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnImplement*
  nameWithType.vb: SuggestionsService.SetArchiveOnImplement(IGuild, Boolean)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnImplement(Discord.IGuild, Boolean)
  name.vb: SetArchiveOnImplement(IGuild, Boolean)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetEmoteMode(Discord.IGuild,System.Int32)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetEmoteMode(Discord.IGuild,System.Int32)
  id: SetEmoteMode(Discord.IGuild,System.Int32)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetEmoteMode(IGuild, int)
  nameWithType: SuggestionsService.SetEmoteMode(IGuild, int)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetEmoteMode(Discord.IGuild, int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetEmoteMode
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 974
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets the emote mode for suggestions within a guild.
  example: []
  syntax:
    content: public Task SetEmoteMode(IGuild guild, int mode)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to set the emote mode for.
    - id: mode
      type: System.Int32
      description: The emote mode to set.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetEmoteMode(guild As IGuild, mode As Integer) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetEmoteMode*
  nameWithType.vb: SuggestionsService.SetEmoteMode(IGuild, Integer)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetEmoteMode(Discord.IGuild, Integer)
  name.vb: SetEmoteMode(IGuild, Integer)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetAcceptChannel(Discord.IGuild,System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetAcceptChannel(Discord.IGuild,System.UInt64)
  id: SetAcceptChannel(Discord.IGuild,System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetAcceptChannel(IGuild, ulong)
  nameWithType: SuggestionsService.SetAcceptChannel(IGuild, ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetAcceptChannel(Discord.IGuild, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetAcceptChannel
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 989
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets the channel to be used for accepted suggestions within a guild.
  example: []
  syntax:
    content: public Task SetAcceptChannel(IGuild guild, ulong channelId)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to set the accept channel for.
    - id: channelId
      type: System.UInt64
      description: The channel ID for accepted suggestions.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetAcceptChannel(guild As IGuild, channelId As ULong) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetAcceptChannel*
  nameWithType.vb: SuggestionsService.SetAcceptChannel(IGuild, ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetAcceptChannel(Discord.IGuild, ULong)
  name.vb: SetAcceptChannel(IGuild, ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetDenyChannel(Discord.IGuild,System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetDenyChannel(Discord.IGuild,System.UInt64)
  id: SetDenyChannel(Discord.IGuild,System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetDenyChannel(IGuild, ulong)
  nameWithType: SuggestionsService.SetDenyChannel(IGuild, ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetDenyChannel(Discord.IGuild, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetDenyChannel
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1004
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets the channel to be used for denied suggestions within a guild.
  example: []
  syntax:
    content: public Task SetDenyChannel(IGuild guild, ulong channelId)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to set the deny channel for.
    - id: channelId
      type: System.UInt64
      description: The channel ID for denied suggestions.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetDenyChannel(guild As IGuild, channelId As ULong) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetDenyChannel*
  nameWithType.vb: SuggestionsService.SetDenyChannel(IGuild, ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetDenyChannel(Discord.IGuild, ULong)
  name.vb: SetDenyChannel(IGuild, ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetConsiderChannel(Discord.IGuild,System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetConsiderChannel(Discord.IGuild,System.UInt64)
  id: SetConsiderChannel(Discord.IGuild,System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetConsiderChannel(IGuild, ulong)
  nameWithType: SuggestionsService.SetConsiderChannel(IGuild, ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetConsiderChannel(Discord.IGuild, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetConsiderChannel
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1019
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets the channel to be used for suggestions under consideration within a guild.
  example: []
  syntax:
    content: public Task SetConsiderChannel(IGuild guild, ulong channelId)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to set the consider channel for.
    - id: channelId
      type: System.UInt64
      description: The channel ID for suggestions under consideration.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetConsiderChannel(guild As IGuild, channelId As ULong) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetConsiderChannel*
  nameWithType.vb: SuggestionsService.SetConsiderChannel(IGuild, ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetConsiderChannel(Discord.IGuild, ULong)
  name.vb: SetConsiderChannel(IGuild, ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetImplementChannel(Discord.IGuild,System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetImplementChannel(Discord.IGuild,System.UInt64)
  id: SetImplementChannel(Discord.IGuild,System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetImplementChannel(IGuild, ulong)
  nameWithType: SuggestionsService.SetImplementChannel(IGuild, ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetImplementChannel(Discord.IGuild, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetImplementChannel
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1034
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets the channel to be used for implemented suggestions within a guild.
  example: []
  syntax:
    content: public Task SetImplementChannel(IGuild guild, ulong channelId)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to set the implement channel for.
    - id: channelId
      type: System.UInt64
      description: The channel ID for implemented suggestions.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetImplementChannel(guild As IGuild, channelId As ULong) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetImplementChannel*
  nameWithType.vb: SuggestionsService.SetImplementChannel(IGuild, ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetImplementChannel(Discord.IGuild, ULong)
  name.vb: SetImplementChannel(IGuild, ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonChannel(Discord.IGuild,System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonChannel(Discord.IGuild,System.UInt64)
  id: SetSuggestButtonChannel(Discord.IGuild,System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetSuggestButtonChannel(IGuild, ulong)
  nameWithType: SuggestionsService.SetSuggestButtonChannel(IGuild, ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonChannel(Discord.IGuild, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetSuggestButtonChannel
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1049
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets the channel to be used for the suggestion button within a guild.
  example: []
  syntax:
    content: public Task SetSuggestButtonChannel(IGuild guild, ulong channelId)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to set the suggestion button channel for.
    - id: channelId
      type: System.UInt64
      description: The channel ID for the suggestion button.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetSuggestButtonChannel(guild As IGuild, channelId As ULong) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonChannel*
  nameWithType.vb: SuggestionsService.SetSuggestButtonChannel(IGuild, ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonChannel(Discord.IGuild, ULong)
  name.vb: SetSuggestButtonChannel(IGuild, ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonEmote(Discord.IGuild,System.String)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonEmote(Discord.IGuild,System.String)
  id: SetSuggestButtonEmote(Discord.IGuild,System.String)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SetSuggestButtonEmote(IGuild, string)
  nameWithType: SuggestionsService.SetSuggestButtonEmote(IGuild, string)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonEmote(Discord.IGuild, string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetSuggestButtonEmote
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1064
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Sets the emote to be used on the suggestion button within a guild.
  example: []
  syntax:
    content: public Task SetSuggestButtonEmote(IGuild guild, string emote)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to set the suggestion button emote for.
    - id: emote
      type: System.String
      description: The emote for the suggestion button.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function SetSuggestButtonEmote(guild As IGuild, emote As String) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonEmote*
  nameWithType.vb: SuggestionsService.SetSuggestButtonEmote(IGuild, String)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonEmote(Discord.IGuild, String)
  name.vb: SetSuggestButtonEmote(IGuild, String)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateEmoteCount(System.UInt64,System.Int32,System.Boolean)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateEmoteCount(System.UInt64,System.Int32,System.Boolean)
  id: UpdateEmoteCount(System.UInt64,System.Int32,System.Boolean)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: UpdateEmoteCount(ulong, int, bool)
  nameWithType: SuggestionsService.UpdateEmoteCount(ulong, int, bool)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateEmoteCount(ulong, int, bool)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: UpdateEmoteCount
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1080
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Updates the emote count for a suggestion based on user interactions.
  example: []
  syntax:
    content: public Task UpdateEmoteCount(ulong messageId, int emoteNumber, bool negative = false)
    parameters:
    - id: messageId
      type: System.UInt64
      description: The message ID of the suggestion.
    - id: emoteNumber
      type: System.Int32
      description: The emote number being updated.
    - id: negative
      type: System.Boolean
      description: Indicates whether to decrement (true) or increment (false) the count.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: Public Function UpdateEmoteCount(messageId As ULong, emoteNumber As Integer, negative As Boolean = False) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateEmoteCount*
  nameWithType.vb: SuggestionsService.UpdateEmoteCount(ULong, Integer, Boolean)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateEmoteCount(ULong, Integer, Boolean)
  name.vb: UpdateEmoteCount(ULong, Integer, Boolean)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetCurrentCount(System.UInt64,System.Int32)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetCurrentCount(System.UInt64,System.Int32)
  id: GetCurrentCount(System.UInt64,System.Int32)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetCurrentCount(ulong, int)
  nameWithType: SuggestionsService.GetCurrentCount(ulong, int)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetCurrentCount(ulong, int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetCurrentCount
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1142
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the current count of reactions for a specific emote on a suggestion.
  example: []
  syntax:
    content: public Task<int> GetCurrentCount(ulong messageId, int emoteNumber)
    parameters:
    - id: messageId
      type: System.UInt64
      description: The message ID of the suggestion.
    - id: emoteNumber
      type: System.Int32
      description: The emote number to retrieve the count for.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The current count of the specified emote for the suggestion.
    content.vb: Public Function GetCurrentCount(messageId As ULong, emoteNumber As Integer) As Task(Of Integer)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetCurrentCount*
  nameWithType.vb: SuggestionsService.GetCurrentCount(ULong, Integer)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetCurrentCount(ULong, Integer)
  name.vb: GetCurrentCount(ULong, Integer)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestMote(Discord.IGuild,System.Int32)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestMote(Discord.IGuild,System.Int32)
  id: GetSuggestMote(Discord.IGuild,System.Int32)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetSuggestMote(IGuild, int)
  nameWithType: SuggestionsService.GetSuggestMote(IGuild, int)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestMote(Discord.IGuild, int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetSuggestMote
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1163
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the specific emote used for suggestions within a guild.
  example: []
  syntax:
    content: public Task<IEmote> GetSuggestMote(IGuild guild, int num)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to retrieve the emote for.
    - id: num
      type: System.Int32
      description: The number identifying the specific emote.
    return:
      type: System.Threading.Tasks.Task{Discord.IEmote}
      description: The emote used for suggestions in the guild.
    content.vb: Public Function GetSuggestMote(guild As IGuild, num As Integer) As Task(Of IEmote)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestMote*
  nameWithType.vb: SuggestionsService.GetSuggestMote(IGuild, Integer)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestMote(Discord.IGuild, Integer)
  name.vb: GetSuggestMote(IGuild, Integer)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestionChannel(System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestionChannel(System.UInt64)
  id: GetSuggestionChannel(System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetSuggestionChannel(ulong)
  nameWithType: SuggestionsService.GetSuggestionChannel(ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestionChannel(ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetSuggestionChannel
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1181
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the ID of the channel designated for suggestions in a guild.
  example: []
  syntax:
    content: public Task<ulong> GetSuggestionChannel(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The ID of the guild.
    return:
      type: System.Threading.Tasks.Task{System.UInt64}
      description: The channel ID designated for suggestions.
    content.vb: Public Function GetSuggestionChannel(id As ULong) As Task(Of ULong)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestionChannel*
  nameWithType.vb: SuggestionsService.GetSuggestionChannel(ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestionChannel(ULong)
  name.vb: GetSuggestionChannel(ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestionMessage(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestionMessage(Discord.IGuild)
  id: GetSuggestionMessage(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetSuggestionMessage(IGuild)
  nameWithType: SuggestionsService.GetSuggestionMessage(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestionMessage(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetSuggestionMessage
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1189
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the custom message set for suggestions in a guild.
  example: []
  syntax:
    content: public Task<string>? GetSuggestionMessage(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the message.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The custom suggestion message if set; otherwise, null.
    content.vb: Public Function GetSuggestionMessage(guild As IGuild) As Task(Of String)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestionMessage*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetAcceptMessage(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetAcceptMessage(Discord.IGuild)
  id: GetAcceptMessage(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetAcceptMessage(IGuild)
  nameWithType: SuggestionsService.GetAcceptMessage(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetAcceptMessage(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetAcceptMessage
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1197
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the custom accept message for suggestions in a guild.
  example: []
  syntax:
    content: public Task<string>? GetAcceptMessage(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the accept message.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The custom accept message if set; otherwise, null.
    content.vb: Public Function GetAcceptMessage(guild As IGuild) As Task(Of String)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetAcceptMessage*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetDenyMessage(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetDenyMessage(Discord.IGuild)
  id: GetDenyMessage(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetDenyMessage(IGuild)
  nameWithType: SuggestionsService.GetDenyMessage(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetDenyMessage(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetDenyMessage
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1205
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the custom deny message for suggestions in a guild.
  example: []
  syntax:
    content: public Task<string>? GetDenyMessage(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the deny message.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The custom deny message if set; otherwise, null.
    content.vb: Public Function GetDenyMessage(guild As IGuild) As Task(Of String)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetDenyMessage*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetImplementMessage(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetImplementMessage(Discord.IGuild)
  id: GetImplementMessage(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetImplementMessage(IGuild)
  nameWithType: SuggestionsService.GetImplementMessage(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetImplementMessage(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetImplementMessage
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1213
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the custom implement message for suggestions in a guild.
  example: []
  syntax:
    content: public Task<string>? GetImplementMessage(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the implement message.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The custom implement message if set; otherwise, null.
    content.vb: Public Function GetImplementMessage(guild As IGuild) As Task(Of String)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetImplementMessage*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetConsiderMessage(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetConsiderMessage(Discord.IGuild)
  id: GetConsiderMessage(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetConsiderMessage(IGuild)
  nameWithType: SuggestionsService.GetConsiderMessage(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetConsiderMessage(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetConsiderMessage
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1221
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the custom consider message for suggestions in a guild.
  example: []
  syntax:
    content: public Task<string>? GetConsiderMessage(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the consider message.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The custom consider message if set; otherwise, null.
    content.vb: Public Function GetConsiderMessage(guild As IGuild) As Task(Of String)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetConsiderMessage*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetThreadType(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetThreadType(Discord.IGuild)
  id: GetThreadType(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetThreadType(IGuild)
  nameWithType: SuggestionsService.GetThreadType(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetThreadType(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetThreadType
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1229
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the thread type used for suggestions in a guild.
  example: []
  syntax:
    content: public Task<int> GetThreadType(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the thread type.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The thread type for suggestions.
    content.vb: Public Function GetThreadType(guild As IGuild) As Task(Of Integer)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetThreadType*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetEmoteMode(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetEmoteMode(Discord.IGuild)
  id: GetEmoteMode(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetEmoteMode(IGuild)
  nameWithType: SuggestionsService.GetEmoteMode(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetEmoteMode(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetEmoteMode
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1237
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the emote mode for suggestions in a guild.
  example: []
  syntax:
    content: public Task<int> GetEmoteMode(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the emote mode.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The emote mode for suggestions.
    content.vb: Public Function GetEmoteMode(guild As IGuild) As Task(Of Integer)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetEmoteMode*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetConsiderChannel(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetConsiderChannel(Discord.IGuild)
  id: GetConsiderChannel(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetConsiderChannel(IGuild)
  nameWithType: SuggestionsService.GetConsiderChannel(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetConsiderChannel(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetConsiderChannel
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1245
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the channel ID for suggestions under consideration in a guild.
  example: []
  syntax:
    content: public Task<ulong> GetConsiderChannel(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the consider channel ID.
    return:
      type: System.Threading.Tasks.Task{System.UInt64}
      description: The consider channel ID.
    content.vb: Public Function GetConsiderChannel(guild As IGuild) As Task(Of ULong)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetConsiderChannel*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetAcceptChannel(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetAcceptChannel(Discord.IGuild)
  id: GetAcceptChannel(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetAcceptChannel(IGuild)
  nameWithType: SuggestionsService.GetAcceptChannel(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetAcceptChannel(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetAcceptChannel
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1253
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the channel ID for accepted suggestions in a guild.
  example: []
  syntax:
    content: public Task<ulong> GetAcceptChannel(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the accept channel ID.
    return:
      type: System.Threading.Tasks.Task{System.UInt64}
      description: The accept channel ID.
    content.vb: Public Function GetAcceptChannel(guild As IGuild) As Task(Of ULong)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetAcceptChannel*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetImplementChannel(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetImplementChannel(Discord.IGuild)
  id: GetImplementChannel(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetImplementChannel(IGuild)
  nameWithType: SuggestionsService.GetImplementChannel(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetImplementChannel(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetImplementChannel
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1261
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the channel ID for implemented suggestions in a guild.
  example: []
  syntax:
    content: public Task<ulong> GetImplementChannel(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the implement channel ID.
    return:
      type: System.Threading.Tasks.Task{System.UInt64}
      description: The implement channel ID.
    content.vb: Public Function GetImplementChannel(guild As IGuild) As Task(Of ULong)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetImplementChannel*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetDenyChannel(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetDenyChannel(Discord.IGuild)
  id: GetDenyChannel(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetDenyChannel(IGuild)
  nameWithType: SuggestionsService.GetDenyChannel(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetDenyChannel(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetDenyChannel
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1269
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the channel ID for denied suggestions in a guild.
  example: []
  syntax:
    content: public Task<ulong> GetDenyChannel(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the deny channel ID.
    return:
      type: System.Threading.Tasks.Task{System.UInt64}
      description: The deny channel ID.
    content.vb: Public Function GetDenyChannel(guild As IGuild) As Task(Of ULong)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetDenyChannel*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnDeny(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnDeny(Discord.IGuild)
  id: GetArchiveOnDeny(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetArchiveOnDeny(IGuild)
  nameWithType: SuggestionsService.GetArchiveOnDeny(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnDeny(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetArchiveOnDeny
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1277
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Determines whether suggestions are archived upon denial in a guild.
  example: []
  syntax:
    content: public Task<bool> GetArchiveOnDeny(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to check the archive setting for.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if suggestions are archived upon denial; otherwise, false.
    content.vb: Public Function GetArchiveOnDeny(guild As IGuild) As Task(Of Boolean)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnDeny*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnAccept(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnAccept(Discord.IGuild)
  id: GetArchiveOnAccept(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetArchiveOnAccept(IGuild)
  nameWithType: SuggestionsService.GetArchiveOnAccept(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnAccept(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetArchiveOnAccept
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1285
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Determines whether suggestions are archived upon acceptance in a guild.
  example: []
  syntax:
    content: public Task<bool> GetArchiveOnAccept(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to check the archive setting for.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if suggestions are archived upon acceptance; otherwise, false.
    content.vb: Public Function GetArchiveOnAccept(guild As IGuild) As Task(Of Boolean)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnAccept*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnConsider(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnConsider(Discord.IGuild)
  id: GetArchiveOnConsider(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetArchiveOnConsider(IGuild)
  nameWithType: SuggestionsService.GetArchiveOnConsider(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnConsider(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetArchiveOnConsider
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1293
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Determines whether suggestions are archived upon consideration in a guild.
  example: []
  syntax:
    content: public Task<bool> GetArchiveOnConsider(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to check the archive setting for.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if suggestions are archived upon consideration; otherwise, false.
    content.vb: Public Function GetArchiveOnConsider(guild As IGuild) As Task(Of Boolean)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnConsider*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnImplement(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnImplement(Discord.IGuild)
  id: GetArchiveOnImplement(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetArchiveOnImplement(IGuild)
  nameWithType: SuggestionsService.GetArchiveOnImplement(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnImplement(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetArchiveOnImplement
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1301
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Determines whether suggestions are archived upon implementation in a guild.
  example: []
  syntax:
    content: public Task<bool> GetArchiveOnImplement(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild to check the archive setting for.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if suggestions are archived upon implementation; otherwise, false.
    content.vb: Public Function GetArchiveOnImplement(guild As IGuild) As Task(Of Boolean)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnImplement*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonName(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonName(Discord.IGuild)
  id: GetSuggestButtonName(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetSuggestButtonName(IGuild)
  nameWithType: SuggestionsService.GetSuggestButtonName(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonName(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetSuggestButtonName
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1309
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the name of the suggest button in a guild.
  example: []
  syntax:
    content: public Task<string> GetSuggestButtonName(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the suggest button name.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The name of the suggest button.
    content.vb: Public Function GetSuggestButtonName(guild As IGuild) As Task(Of String)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonName*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonChannel(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonChannel(Discord.IGuild)
  id: GetSuggestButtonChannel(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetSuggestButtonChannel(IGuild)
  nameWithType: SuggestionsService.GetSuggestButtonChannel(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonChannel(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetSuggestButtonChannel
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1317
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the channel ID where the suggest button is located in a guild.
  example: []
  syntax:
    content: public Task<ulong> GetSuggestButtonChannel(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the suggest button channel ID.
    return:
      type: System.Threading.Tasks.Task{System.UInt64}
      description: The suggest button channel ID.
    content.vb: Public Function GetSuggestButtonChannel(guild As IGuild) As Task(Of ULong)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonChannel*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonEmote(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonEmote(Discord.IGuild)
  id: GetSuggestButtonEmote(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetSuggestButtonEmote(IGuild)
  nameWithType: SuggestionsService.GetSuggestButtonEmote(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonEmote(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetSuggestButtonEmote
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1325
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the custom emote for the suggest button in a guild.
  example: []
  syntax:
    content: public Task<string> GetSuggestButtonEmote(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the suggest button emote.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The custom emote for the suggest button; otherwise, null if not set.
    content.vb: Public Function GetSuggestButtonEmote(guild As IGuild) As Task(Of String)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonEmote*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonMessage(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonMessage(Discord.IGuild)
  id: GetSuggestButtonMessage(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetSuggestButtonMessage(IGuild)
  nameWithType: SuggestionsService.GetSuggestButtonMessage(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonMessage(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetSuggestButtonMessage
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1333
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the custom message for the suggest button in a guild.
  example: []
  syntax:
    content: public Task<string>? GetSuggestButtonMessage(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the suggest button message.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The custom message for the suggest button if set; otherwise, null.
    content.vb: Public Function GetSuggestButtonMessage(guild As IGuild) As Task(Of String)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonMessage*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonRepost(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonRepost(Discord.IGuild)
  id: GetSuggestButtonRepost(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetSuggestButtonRepost(IGuild)
  nameWithType: SuggestionsService.GetSuggestButtonRepost(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonRepost(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetSuggestButtonRepost
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1341
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the repost threshold for the suggest button in a guild.
  example: []
  syntax:
    content: public Task<int> GetSuggestButtonRepost(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the suggest button repost threshold.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The repost threshold for the suggest button.
    content.vb: Public Function GetSuggestButtonRepost(guild As IGuild) As Task(Of Integer)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonRepost*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonMessageId(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonMessageId(Discord.IGuild)
  id: GetSuggestButtonMessageId(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetSuggestButtonMessageId(IGuild)
  nameWithType: SuggestionsService.GetSuggestButtonMessageId(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonMessageId(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetSuggestButtonMessageId
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1349
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the message ID of the suggest button in a guild.
  example: []
  syntax:
    content: public Task<ulong> GetSuggestButtonMessageId(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the suggest button message ID.
    return:
      type: System.Threading.Tasks.Task{System.UInt64}
      description: The suggest button message ID.
    content.vb: Public Function GetSuggestButtonMessageId(guild As IGuild) As Task(Of ULong)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonMessageId*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonColor(Discord.IGuild)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonColor(Discord.IGuild)
  id: GetSuggestButtonColor(Discord.IGuild)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetSuggestButtonColor(IGuild)
  nameWithType: SuggestionsService.GetSuggestButtonColor(IGuild)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonColor(Discord.IGuild)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetSuggestButtonColor
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1357
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the color of a suggest button in a guild.
  example: []
  syntax:
    content: public Task<ButtonStyle> GetSuggestButtonColor(IGuild guild)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the suggest button color.
    return:
      type: System.Threading.Tasks.Task{Discord.ButtonStyle}
      description: The color of the suggest button.
    content.vb: Public Function GetSuggestButtonColor(guild As IGuild) As Task(Of ButtonStyle)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonColor*
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetButtonStyle(Discord.IGuild,System.Int32)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetButtonStyle(Discord.IGuild,System.Int32)
  id: GetButtonStyle(Discord.IGuild,System.Int32)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetButtonStyle(IGuild, int)
  nameWithType: SuggestionsService.GetButtonStyle(IGuild, int)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetButtonStyle(Discord.IGuild, int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetButtonStyle
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1366
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves the style of a specific button based on its ID in a guild.
  example: []
  syntax:
    content: public Task<ButtonStyle> GetButtonStyle(IGuild guild, int id)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild from which to retrieve the button style.
    - id: id
      type: System.Int32
      description: The ID of the button to retrieve the style for.
    return:
      type: System.Threading.Tasks.Task{Discord.ButtonStyle}
      description: The button style.
    content.vb: Public Function GetButtonStyle(guild As IGuild, id As Integer) As Task(Of ButtonStyle)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetButtonStyle*
  nameWithType.vb: SuggestionsService.GetButtonStyle(IGuild, Integer)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetButtonStyle(Discord.IGuild, Integer)
  name.vb: GetButtonStyle(IGuild, Integer)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendDenyEmbed(Discord.IGuild,Discord.WebSocket.DiscordSocketClient,Discord.IUser,System.UInt64,Discord.ITextChannel,System.String,Discord.IDiscordInteraction)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendDenyEmbed(Discord.IGuild,Discord.WebSocket.DiscordSocketClient,Discord.IUser,System.UInt64,Discord.ITextChannel,System.String,Discord.IDiscordInteraction)
  id: SendDenyEmbed(Discord.IGuild,Discord.WebSocket.DiscordSocketClient,Discord.IUser,System.UInt64,Discord.ITextChannel,System.String,Discord.IDiscordInteraction)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SendDenyEmbed(IGuild, DiscordSocketClient, IUser, ulong, ITextChannel, string?, IDiscordInteraction?)
  nameWithType: SuggestionsService.SendDenyEmbed(IGuild, DiscordSocketClient, IUser, ulong, ITextChannel, string?, IDiscordInteraction?)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendDenyEmbed(Discord.IGuild, Discord.WebSocket.DiscordSocketClient, Discord.IUser, ulong, Discord.ITextChannel, string?, Discord.IDiscordInteraction?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SendDenyEmbed
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1390
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: >-
    Sends a denial embed for a suggestion in a guild. This method handles fetching the suggestion,

    checking if it exists, and then sending a customized embed based on whether a custom deny message

    is set. It also handles archiving the suggestion thread if necessary.
  example: []
  syntax:
    content: public Task SendDenyEmbed(IGuild guild, DiscordSocketClient client, IUser user, ulong suggestion, ITextChannel channel, string? reason = null, IDiscordInteraction? interaction = null)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild where the suggestion is made.
    - id: client
      type: Discord.WebSocket.DiscordSocketClient
      description: The Discord client.
    - id: user
      type: Discord.IUser
      description: The user who denied the suggestion.
    - id: suggestion
      type: System.UInt64
      description: The ID of the suggestion being denied.
    - id: channel
      type: Discord.ITextChannel
      description: The text channel where the denial message will be sent.
    - id: reason
      type: System.String
      description: The reason for denial. Optional.
    - id: interaction
      type: Discord.IDiscordInteraction
      description: The interaction context, if available. Optional.
    return:
      type: System.Threading.Tasks.Task
      description: A Task representing the asynchronous operation.
    content.vb: Public Function SendDenyEmbed(guild As IGuild, client As DiscordSocketClient, user As IUser, suggestion As ULong, channel As ITextChannel, reason As String = Nothing, interaction As IDiscordInteraction = Nothing) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendDenyEmbed*
  nameWithType.vb: SuggestionsService.SendDenyEmbed(IGuild, DiscordSocketClient, IUser, ULong, ITextChannel, String, IDiscordInteraction)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendDenyEmbed(Discord.IGuild, Discord.WebSocket.DiscordSocketClient, Discord.IUser, ULong, Discord.ITextChannel, String, Discord.IDiscordInteraction)
  name.vb: SendDenyEmbed(IGuild, DiscordSocketClient, IUser, ULong, ITextChannel, String, IDiscordInteraction)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendConsiderEmbed(Discord.IGuild,Discord.WebSocket.DiscordSocketClient,Discord.IUser,System.UInt64,Discord.ITextChannel,System.String,Discord.IDiscordInteraction)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendConsiderEmbed(Discord.IGuild,Discord.WebSocket.DiscordSocketClient,Discord.IUser,System.UInt64,Discord.ITextChannel,System.String,Discord.IDiscordInteraction)
  id: SendConsiderEmbed(Discord.IGuild,Discord.WebSocket.DiscordSocketClient,Discord.IUser,System.UInt64,Discord.ITextChannel,System.String,Discord.IDiscordInteraction)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SendConsiderEmbed(IGuild, DiscordSocketClient, IUser, ulong, ITextChannel, string?, IDiscordInteraction?)
  nameWithType: SuggestionsService.SendConsiderEmbed(IGuild, DiscordSocketClient, IUser, ulong, ITextChannel, string?, IDiscordInteraction?)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendConsiderEmbed(Discord.IGuild, Discord.WebSocket.DiscordSocketClient, Discord.IUser, ulong, Discord.ITextChannel, string?, Discord.IDiscordInteraction?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SendConsiderEmbed
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 1794
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: >-
    Sends a consideration embed for a suggestion in a guild. Similar to denial, it sends an embed indicating

    the suggestion is under consideration, with customized messages if set, and handles archiving.
  example: []
  syntax:
    content: public Task SendConsiderEmbed(IGuild guild, DiscordSocketClient client, IUser user, ulong suggestion, ITextChannel channel, string? reason = null, IDiscordInteraction? interaction = null)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild where the suggestion is made.
    - id: client
      type: Discord.WebSocket.DiscordSocketClient
      description: The Discord client.
    - id: user
      type: Discord.IUser
      description: The user considering the suggestion.
    - id: suggestion
      type: System.UInt64
      description: The ID of the suggestion being considered.
    - id: channel
      type: Discord.ITextChannel
      description: The channel where the consideration message will be sent.
    - id: reason
      type: System.String
      description: The reason for consideration. Optional.
    - id: interaction
      type: Discord.IDiscordInteraction
      description: The interaction context, if available. Optional.
    return:
      type: System.Threading.Tasks.Task
      description: A Task representing the asynchronous operation.
    content.vb: Public Function SendConsiderEmbed(guild As IGuild, client As DiscordSocketClient, user As IUser, suggestion As ULong, channel As ITextChannel, reason As String = Nothing, interaction As IDiscordInteraction = Nothing) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendConsiderEmbed*
  nameWithType.vb: SuggestionsService.SendConsiderEmbed(IGuild, DiscordSocketClient, IUser, ULong, ITextChannel, String, IDiscordInteraction)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendConsiderEmbed(Discord.IGuild, Discord.WebSocket.DiscordSocketClient, Discord.IUser, ULong, Discord.ITextChannel, String, Discord.IDiscordInteraction)
  name.vb: SendConsiderEmbed(IGuild, DiscordSocketClient, IUser, ULong, ITextChannel, String, IDiscordInteraction)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendImplementEmbed(Discord.IGuild,Discord.WebSocket.DiscordSocketClient,Discord.IUser,System.UInt64,Discord.ITextChannel,System.String,Discord.IDiscordInteraction)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendImplementEmbed(Discord.IGuild,Discord.WebSocket.DiscordSocketClient,Discord.IUser,System.UInt64,Discord.ITextChannel,System.String,Discord.IDiscordInteraction)
  id: SendImplementEmbed(Discord.IGuild,Discord.WebSocket.DiscordSocketClient,Discord.IUser,System.UInt64,Discord.ITextChannel,System.String,Discord.IDiscordInteraction)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SendImplementEmbed(IGuild, DiscordSocketClient, IUser, ulong, ITextChannel, string?, IDiscordInteraction?)
  nameWithType: SuggestionsService.SendImplementEmbed(IGuild, DiscordSocketClient, IUser, ulong, ITextChannel, string?, IDiscordInteraction?)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendImplementEmbed(Discord.IGuild, Discord.WebSocket.DiscordSocketClient, Discord.IUser, ulong, Discord.ITextChannel, string?, Discord.IDiscordInteraction?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SendImplementEmbed
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 2185
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: >-
    Sends an implementation embed for a suggestion in a guild. This method handles the entire process

    of marking a suggestion as implemented, including sending a customized embed message, and managing

    the suggestion's thread.
  example: []
  syntax:
    content: public Task SendImplementEmbed(IGuild guild, DiscordSocketClient client, IUser user, ulong suggestion, ITextChannel channel, string? reason = null, IDiscordInteraction? interaction = null)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild where the suggestion is made.
    - id: client
      type: Discord.WebSocket.DiscordSocketClient
      description: The Discord client.
    - id: user
      type: Discord.IUser
      description: The user who implemented the suggestion.
    - id: suggestion
      type: System.UInt64
      description: The ID of the suggestion being implemented.
    - id: channel
      type: Discord.ITextChannel
      description: The channel where the implementation message will be sent.
    - id: reason
      type: System.String
      description: The reason for implementation. Optional.
    - id: interaction
      type: Discord.IDiscordInteraction
      description: The interaction context, if available. Optional.
    return:
      type: System.Threading.Tasks.Task
      description: A Task representing the asynchronous operation.
    content.vb: Public Function SendImplementEmbed(guild As IGuild, client As DiscordSocketClient, user As IUser, suggestion As ULong, channel As ITextChannel, reason As String = Nothing, interaction As IDiscordInteraction = Nothing) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendImplementEmbed*
  nameWithType.vb: SuggestionsService.SendImplementEmbed(IGuild, DiscordSocketClient, IUser, ULong, ITextChannel, String, IDiscordInteraction)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendImplementEmbed(Discord.IGuild, Discord.WebSocket.DiscordSocketClient, Discord.IUser, ULong, Discord.ITextChannel, String, Discord.IDiscordInteraction)
  name.vb: SendImplementEmbed(IGuild, DiscordSocketClient, IUser, ULong, ITextChannel, String, IDiscordInteraction)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendAcceptEmbed(Discord.IGuild,Discord.WebSocket.DiscordSocketClient,Discord.IUser,System.UInt64,Discord.ITextChannel,System.String,Discord.IDiscordInteraction)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendAcceptEmbed(Discord.IGuild,Discord.WebSocket.DiscordSocketClient,Discord.IUser,System.UInt64,Discord.ITextChannel,System.String,Discord.IDiscordInteraction)
  id: SendAcceptEmbed(Discord.IGuild,Discord.WebSocket.DiscordSocketClient,Discord.IUser,System.UInt64,Discord.ITextChannel,System.String,Discord.IDiscordInteraction)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SendAcceptEmbed(IGuild, DiscordSocketClient, IUser, ulong, ITextChannel, string?, IDiscordInteraction?)
  nameWithType: SuggestionsService.SendAcceptEmbed(IGuild, DiscordSocketClient, IUser, ulong, ITextChannel, string?, IDiscordInteraction?)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendAcceptEmbed(Discord.IGuild, Discord.WebSocket.DiscordSocketClient, Discord.IUser, ulong, Discord.ITextChannel, string?, Discord.IDiscordInteraction?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SendAcceptEmbed
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 2575
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: >-
    Sends an acceptance embed for a suggestion in a guild. It manages sending a custom embed for suggestions

    marked as accepted, archiving the thread if set, and notifying the suggestion's author.
  example: []
  syntax:
    content: public Task SendAcceptEmbed(IGuild guild, DiscordSocketClient client, IUser user, ulong suggestion, ITextChannel channel, string? reason = null, IDiscordInteraction? interaction = null)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild where the suggestion is made.
    - id: client
      type: Discord.WebSocket.DiscordSocketClient
      description: The Discord client.
    - id: user
      type: Discord.IUser
      description: The user who accepted the suggestion.
    - id: suggestion
      type: System.UInt64
      description: The ID of the suggestion being accepted.
    - id: channel
      type: Discord.ITextChannel
      description: The channel where the acceptance message will be sent.
    - id: reason
      type: System.String
      description: The reason for acceptance. Optional.
    - id: interaction
      type: Discord.IDiscordInteraction
      description: The interaction context, if available. Optional.
    return:
      type: System.Threading.Tasks.Task
      description: A Task representing the asynchronous operation.
    content.vb: Public Function SendAcceptEmbed(guild As IGuild, client As DiscordSocketClient, user As IUser, suggestion As ULong, channel As ITextChannel, reason As String = Nothing, interaction As IDiscordInteraction = Nothing) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendAcceptEmbed*
  nameWithType.vb: SuggestionsService.SendAcceptEmbed(IGuild, DiscordSocketClient, IUser, ULong, ITextChannel, String, IDiscordInteraction)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendAcceptEmbed(Discord.IGuild, Discord.WebSocket.DiscordSocketClient, Discord.IUser, ULong, Discord.ITextChannel, String, Discord.IDiscordInteraction)
  name.vb: SendAcceptEmbed(IGuild, DiscordSocketClient, IUser, ULong, ITextChannel, String, IDiscordInteraction)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendSuggestion(Discord.IGuild,Discord.IGuildUser,Discord.WebSocket.DiscordSocketClient,System.String,Discord.ITextChannel,Discord.IDiscordInteraction)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendSuggestion(Discord.IGuild,Discord.IGuildUser,Discord.WebSocket.DiscordSocketClient,System.String,Discord.ITextChannel,Discord.IDiscordInteraction)
  id: SendSuggestion(Discord.IGuild,Discord.IGuildUser,Discord.WebSocket.DiscordSocketClient,System.String,Discord.ITextChannel,Discord.IDiscordInteraction)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: SendSuggestion(IGuild, IGuildUser, DiscordSocketClient, string, ITextChannel, IDiscordInteraction?)
  nameWithType: SuggestionsService.SendSuggestion(IGuild, IGuildUser, DiscordSocketClient, string, ITextChannel, IDiscordInteraction?)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendSuggestion(Discord.IGuild, Discord.IGuildUser, Discord.WebSocket.DiscordSocketClient, string, Discord.ITextChannel, Discord.IDiscordInteraction?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SendSuggestion
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 2965
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: >-
    Submits a suggestion in a guild, handling the creation of suggestion messages with reactions or buttons

    based on configuration, and potentially starting a thread for discussion.
  example: []
  syntax:
    content: public Task SendSuggestion(IGuild guild, IGuildUser user, DiscordSocketClient client, string suggestion, ITextChannel channel, IDiscordInteraction? interaction = null)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild where the suggestion is submitted.
    - id: user
      type: Discord.IGuildUser
      description: The user submitting the suggestion.
    - id: client
      type: Discord.WebSocket.DiscordSocketClient
      description: The Discord client.
    - id: suggestion
      type: System.String
      description: The text of the suggestion being submitted.
    - id: channel
      type: Discord.ITextChannel
      description: The channel where the suggestion submission confirmation will be sent.
    - id: interaction
      type: Discord.IDiscordInteraction
      description: The interaction context, if available. Optional.
    return:
      type: System.Threading.Tasks.Task
      description: A Task representing the asynchronous operation.
    content.vb: Public Function SendSuggestion(guild As IGuild, user As IGuildUser, client As DiscordSocketClient, suggestion As String, channel As ITextChannel, interaction As IDiscordInteraction = Nothing) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendSuggestion*
  nameWithType.vb: SuggestionsService.SendSuggestion(IGuild, IGuildUser, DiscordSocketClient, String, ITextChannel, IDiscordInteraction)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendSuggestion(Discord.IGuild, Discord.IGuildUser, Discord.WebSocket.DiscordSocketClient, String, Discord.ITextChannel, Discord.IDiscordInteraction)
  name.vb: SendSuggestion(IGuild, IGuildUser, DiscordSocketClient, String, ITextChannel, IDiscordInteraction)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggest(Discord.IGuild,System.UInt64,System.UInt64,System.UInt64,System.String)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggest(Discord.IGuild,System.UInt64,System.UInt64,System.UInt64,System.String)
  id: Suggest(Discord.IGuild,System.UInt64,System.UInt64,System.UInt64,System.String)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: Suggest(IGuild, ulong, ulong, ulong, string)
  nameWithType: SuggestionsService.Suggest(IGuild, ulong, ulong, ulong, string)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggest(Discord.IGuild, ulong, ulong, ulong, string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Suggest
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 3134
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Records a new suggestion in the database.
  example: []
  syntax:
    content: public Task Suggest(IGuild guild, ulong suggestId, ulong messageId, ulong userId, string suggestion)
    parameters:
    - id: guild
      type: Discord.IGuild
      description: The guild where the suggestion is made.
    - id: suggestId
      type: System.UInt64
      description: The suggestion number within the guild.
    - id: messageId
      type: System.UInt64
      description: The ID of the message containing the suggestion.
    - id: userId
      type: System.UInt64
      description: The ID of the user who made the suggestion.
    - id: suggestion
      type: System.String
      description: The content of the suggestion.
    return:
      type: System.Threading.Tasks.Task
      description: A Task representing the asynchronous operation to save the suggestion.
    content.vb: Public Function Suggest(guild As IGuild, suggestId As ULong, messageId As ULong, userId As ULong, suggestion As String) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggest*
  nameWithType.vb: SuggestionsService.Suggest(IGuild, ULong, ULong, ULong, String)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggest(Discord.IGuild, ULong, ULong, ULong, String)
  name.vb: Suggest(IGuild, ULong, ULong, ULong, String)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggestions(System.UInt64,System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggestions(System.UInt64,System.UInt64)
  id: Suggestions(System.UInt64,System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: Suggestions(ulong, ulong)
  nameWithType: SuggestionsService.Suggestions(ulong, ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggestions(ulong, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Suggestions
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 3172
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves suggestions by guild and suggestion ID, primarily for operations involving a specific suggestion.
  example: []
  syntax:
    content: public Task<SuggestionsModel[]?> Suggestions(ulong gid, ulong sid)
    parameters:
    - id: gid
      type: System.UInt64
      description: The guild ID where the suggestion was made.
    - id: sid
      type: System.UInt64
      description: The suggestion ID to retrieve.
    return:
      type: System.Threading.Tasks.Task{Mewdeko.Database.Models.SuggestionsModel[]}
      description: An array of <xref href="Mewdeko.Database.Models.SuggestionsModel" data-throw-if-not-resolved="false"></xref> matching the criteria or null if not found.
    content.vb: Public Function Suggestions(gid As ULong, sid As ULong) As Task(Of SuggestionsModel())
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggestions*
  nameWithType.vb: SuggestionsService.Suggestions(ULong, ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggestions(ULong, ULong)
  name.vb: Suggestions(ULong, ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggestions(System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggestions(System.UInt64)
  id: Suggestions(System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: Suggestions(ulong)
  nameWithType: SuggestionsService.Suggestions(ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggestions(ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Suggestions
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 3183
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Lists all suggestions made in a guild, useful for overview or management purposes.
  example: []
  syntax:
    content: public List<SuggestionsModel> Suggestions(ulong gid)
    parameters:
    - id: gid
      type: System.UInt64
      description: The guild ID to retrieve suggestions for.
    return:
      type: System.Collections.Generic.List{Mewdeko.Database.Models.SuggestionsModel}
      description: A list of all <xref href="Mewdeko.Database.Models.SuggestionsModel" data-throw-if-not-resolved="false"></xref> in the specified guild.
    content.vb: Public Function Suggestions(gid As ULong) As List(Of SuggestionsModel)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggestions*
  nameWithType.vb: SuggestionsService.Suggestions(ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggestions(ULong)
  name.vb: Suggestions(ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestByMessage(System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestByMessage(System.UInt64)
  id: GetSuggestByMessage(System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetSuggestByMessage(ulong)
  nameWithType: SuggestionsService.GetSuggestByMessage(ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestByMessage(ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetSuggestByMessage
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 3194
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves a suggestion based on its associated message ID, useful for operations triggered by message interactions.
  example: []
  syntax:
    content: public Task<SuggestionsModel> GetSuggestByMessage(ulong msgId)
    parameters:
    - id: msgId
      type: System.UInt64
      description: The message ID linked to the suggestion.
    return:
      type: System.Threading.Tasks.Task{Mewdeko.Database.Models.SuggestionsModel}
      description: The <xref href="Mewdeko.Database.Models.SuggestionsModel" data-throw-if-not-resolved="false"></xref> associated with the message ID.
    content.vb: Public Function GetSuggestByMessage(msgId As ULong) As Task(Of SuggestionsModel)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestByMessage*
  nameWithType.vb: SuggestionsService.GetSuggestByMessage(ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestByMessage(ULong)
  name.vb: GetSuggestByMessage(ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.ForUser(System.UInt64,System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.ForUser(System.UInt64,System.UInt64)
  id: ForUser(System.UInt64,System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: ForUser(ulong, ulong)
  nameWithType: SuggestionsService.ForUser(ulong, ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.ForUser(ulong, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ForUser
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 3206
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Retrieves all suggestions made by a specific user in a guild, useful for personal suggestion tracking or management.
  example: []
  syntax:
    content: public Task<SuggestionsModel[]> ForUser(ulong guildId, ulong userId)
    parameters:
    - id: guildId
      type: System.UInt64
      description: The guild ID where the suggestions were made.
    - id: userId
      type: System.UInt64
      description: The user ID to retrieve suggestions for.
    return:
      type: System.Threading.Tasks.Task{Mewdeko.Database.Models.SuggestionsModel[]}
      description: An array of <xref href="Mewdeko.Database.Models.SuggestionsModel" data-throw-if-not-resolved="false"></xref> made by the specified user in the specified guild.
    content.vb: Public Function ForUser(guildId As ULong, userId As ULong) As Task(Of SuggestionsModel())
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.ForUser*
  nameWithType.vb: SuggestionsService.ForUser(ULong, ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.ForUser(ULong, ULong)
  name.vb: ForUser(ULong, ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetPickedEmote(System.UInt64,System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetPickedEmote(System.UInt64,System.UInt64)
  id: GetPickedEmote(System.UInt64,System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetPickedEmote(ulong, ulong)
  nameWithType: SuggestionsService.GetPickedEmote(ulong, ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetPickedEmote(ulong, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetPickedEmote
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 3218
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: Determines the emote chosen by a user for a specific suggestion, useful for tallying reactions or votes.
  example: []
  syntax:
    content: public Task<int> GetPickedEmote(ulong messageId, ulong userId)
    parameters:
    - id: messageId
      type: System.UInt64
      description: The message ID of the suggestion being voted on.
    - id: userId
      type: System.UInt64
      description: The user ID of the voter.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The ID of the emote chosen by the user, or 0 if no vote was found.
    content.vb: Public Function GetPickedEmote(messageId As ULong, userId As ULong) As Task(Of Integer)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetPickedEmote*
  nameWithType.vb: SuggestionsService.GetPickedEmote(ULong, ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetPickedEmote(ULong, ULong)
  name.vb: GetPickedEmote(ULong, ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdatePickedEmote(System.UInt64,System.UInt64,System.Int32)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdatePickedEmote(System.UInt64,System.UInt64,System.Int32)
  id: UpdatePickedEmote(System.UInt64,System.UInt64,System.Int32)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: UpdatePickedEmote(ulong, ulong, int)
  nameWithType: SuggestionsService.UpdatePickedEmote(ulong, ulong, int)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdatePickedEmote(ulong, ulong, int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: UpdatePickedEmote
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 3233
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: >-
    Updates the emote picked by a user for a specific suggestion message. If the user has not previously

    picked an emote for this message, a new vote record is created. Otherwise, the existing vote is updated.
  example: []
  syntax:
    content: public Task UpdatePickedEmote(ulong messageId, ulong userId, int emotePicked)
    parameters:
    - id: messageId
      type: System.UInt64
      description: The ID of the message the vote is associated with.
    - id: userId
      type: System.UInt64
      description: The ID of the user casting or changing their vote.
    - id: emotePicked
      type: System.Int32
      description: The ID of the emote picked by the user.
    return:
      type: System.Threading.Tasks.Task
      description: A Task representing the asynchronous operation of updating or adding the vote.
    content.vb: Public Function UpdatePickedEmote(messageId As ULong, userId As ULong, emotePicked As Integer) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdatePickedEmote*
  nameWithType.vb: SuggestionsService.UpdatePickedEmote(ULong, ULong, Integer)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdatePickedEmote(ULong, ULong, Integer)
  name.vb: UpdatePickedEmote(ULong, ULong, Integer)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.AddThreadChannel(System.UInt64,System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.AddThreadChannel(System.UInt64,System.UInt64)
  id: AddThreadChannel(System.UInt64,System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: AddThreadChannel(ulong, ulong)
  nameWithType: SuggestionsService.AddThreadChannel(ulong, ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.AddThreadChannel(ulong, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AddThreadChannel
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 3261
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: >-
    Adds a new thread channel association with a suggestion message. This is used to track thread channels

    that are created for discussing specific suggestions.
  example: []
  syntax:
    content: public Task AddThreadChannel(ulong messageId, ulong threadChannelId)
    parameters:
    - id: messageId
      type: System.UInt64
      description: The message ID of the suggestion.
    - id: threadChannelId
      type: System.UInt64
      description: The thread channel ID created for the suggestion's discussion.
    return:
      type: System.Threading.Tasks.Task
      description: A Task representing the asynchronous operation of adding the thread channel association.
    content.vb: Public Function AddThreadChannel(messageId As ULong, threadChannelId As ULong) As Task
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.AddThreadChannel*
  nameWithType.vb: SuggestionsService.AddThreadChannel(ULong, ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.AddThreadChannel(ULong, ULong)
  name.vb: AddThreadChannel(ULong, ULong)
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetThreadByMessage(System.UInt64)
  commentId: M:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetThreadByMessage(System.UInt64)
  id: GetThreadByMessage(System.UInt64)
  parent: Mewdeko.Modules.Suggestions.Services.SuggestionsService
  langs:
  - csharp
  - vb
  name: GetThreadByMessage(ulong)
  nameWithType: SuggestionsService.GetThreadByMessage(ulong)
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetThreadByMessage(ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetThreadByMessage
    path: src/Mewdeko/Modules/Suggestions/Services/SuggestService.cs
    startLine: 3277
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions.Services
  summary: >-
    Retrieves the ID of the thread channel associated with a specific suggestion message. This is used to

    find the discussion thread for a suggestion.
  example: []
  syntax:
    content: public Task<ulong> GetThreadByMessage(ulong messageId)
    parameters:
    - id: messageId
      type: System.UInt64
      description: The message ID of the suggestion.
    return:
      type: System.Threading.Tasks.Task{System.UInt64}
      description: The ID of the thread channel associated with the message, or 0 if no association exists.
    content.vb: Public Function GetThreadByMessage(messageId As ULong) As Task(Of ULong)
  overload: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetThreadByMessage*
  nameWithType.vb: SuggestionsService.GetThreadByMessage(ULong)
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetThreadByMessage(ULong)
  name.vb: GetThreadByMessage(ULong)
references:
- uid: Mewdeko.Modules.Suggestions.Services
  commentId: N:Mewdeko.Modules.Suggestions.Services
  href: Mewdeko.html
  name: Mewdeko.Modules.Suggestions.Services
  nameWithType: Mewdeko.Modules.Suggestions.Services
  fullName: Mewdeko.Modules.Suggestions.Services
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Modules
    name: Modules
    href: Mewdeko.Modules.html
  - name: .
  - uid: Mewdeko.Modules.Suggestions
    name: Suggestions
    href: Mewdeko.Modules.Suggestions.html
  - name: .
  - uid: Mewdeko.Modules.Suggestions.Services
    name: Services
    href: Mewdeko.Modules.Suggestions.Services.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Modules
    name: Modules
    href: Mewdeko.Modules.html
  - name: .
  - uid: Mewdeko.Modules.Suggestions
    name: Suggestions
    href: Mewdeko.Modules.Suggestions.html
  - name: .
  - uid: Mewdeko.Modules.Suggestions.Services
    name: Services
    href: Mewdeko.Modules.Suggestions.Services.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Mewdeko.Services.INService
  commentId: T:Mewdeko.Services.INService
  parent: Mewdeko.Services
  href: Mewdeko.Services.INService.html
  name: INService
  nameWithType: INService
  fullName: Mewdeko.Services.INService
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Mewdeko.Extensions.Extensions.ThrowIfNull``1(System.String)
  commentId: M:Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  parent: Mewdeko.Extensions.Extensions
  definition: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  name: ThrowIfNull<SuggestionsService>(SuggestionsService, string)
  nameWithType: Extensions.ThrowIfNull<SuggestionsService>(SuggestionsService, string)
  fullName: Mewdeko.Extensions.Extensions.ThrowIfNull<Mewdeko.Modules.Suggestions.Services.SuggestionsService>(Mewdeko.Modules.Suggestions.Services.SuggestionsService, string)
  nameWithType.vb: Extensions.ThrowIfNull(Of SuggestionsService)(SuggestionsService, String)
  fullName.vb: Mewdeko.Extensions.Extensions.ThrowIfNull(Of Mewdeko.Modules.Suggestions.Services.SuggestionsService)(Mewdeko.Modules.Suggestions.Services.SuggestionsService, String)
  name.vb: ThrowIfNull(Of SuggestionsService)(SuggestionsService, String)
  spec.csharp:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(Mewdeko.Modules.Suggestions.Services.SuggestionsService,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: <
  - uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService
    name: SuggestionsService
    href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html
  - name: '>'
  - name: (
  - uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService
    name: SuggestionsService
    href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(Mewdeko.Modules.Suggestions.Services.SuggestionsService,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService
    name: SuggestionsService
    href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html
  - name: )
  - name: (
  - uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService
    name: SuggestionsService
    href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Mewdeko.Services
  commentId: N:Mewdeko.Services
  href: Mewdeko.html
  name: Mewdeko.Services
  nameWithType: Mewdeko.Services
  fullName: Mewdeko.Services
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
- uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  commentId: M:Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  isExternal: true
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  name: ThrowIfNull<T>(T, string)
  nameWithType: Extensions.ThrowIfNull<T>(T, string)
  fullName: Mewdeko.Extensions.Extensions.ThrowIfNull<T>(T, string)
  nameWithType.vb: Extensions.ThrowIfNull(Of T)(T, String)
  fullName.vb: Mewdeko.Extensions.Extensions.ThrowIfNull(Of T)(T, String)
  name.vb: ThrowIfNull(Of T)(T, String)
  spec.csharp:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Mewdeko.Extensions.Extensions
  commentId: T:Mewdeko.Extensions.Extensions
  parent: Mewdeko.Extensions
  href: Mewdeko.Extensions.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: Mewdeko.Extensions.Extensions
- uid: Mewdeko.Extensions
  commentId: N:Mewdeko.Extensions
  href: Mewdeko.html
  name: Mewdeko.Extensions
  nameWithType: Mewdeko.Extensions
  fullName: Mewdeko.Extensions
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Extensions
    name: Extensions
    href: Mewdeko.Extensions.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Extensions
    name: Extensions
    href: Mewdeko.Extensions.html
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.#ctor*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.#ctor
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService__ctor_Mewdeko_Database_DbService_Discord_WebSocket_DiscordSocketClient_Mewdeko_Modules_Administration_Services_AdministrationService_Mewdeko_Modules_Permissions_Services_PermissionService_Mewdeko_Services_GuildSettingsService_Mewdeko_Services_Impl_EventHandler_Mewdeko_Common_Configs_BotConfig_
  name: SuggestionsService
  nameWithType: SuggestionsService.SuggestionsService
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SuggestionsService
  nameWithType.vb: SuggestionsService.New
  fullName.vb: Mewdeko.Modules.Suggestions.Services.SuggestionsService.New
  name.vb: New
- uid: Mewdeko.Database.DbService
  commentId: T:Mewdeko.Database.DbService
  parent: Mewdeko.Database
  href: Mewdeko.Database.DbService.html
  name: DbService
  nameWithType: DbService
  fullName: Mewdeko.Database.DbService
- uid: Discord.WebSocket.DiscordSocketClient
  commentId: T:Discord.WebSocket.DiscordSocketClient
  parent: Discord.WebSocket
  isExternal: true
  name: DiscordSocketClient
  nameWithType: DiscordSocketClient
  fullName: Discord.WebSocket.DiscordSocketClient
- uid: Mewdeko.Modules.Administration.Services.AdministrationService
  commentId: T:Mewdeko.Modules.Administration.Services.AdministrationService
  parent: Mewdeko.Modules.Administration.Services
  href: Mewdeko.Modules.Administration.Services.AdministrationService.html
  name: AdministrationService
  nameWithType: AdministrationService
  fullName: Mewdeko.Modules.Administration.Services.AdministrationService
- uid: Mewdeko.Modules.Permissions.Services.PermissionService
  commentId: T:Mewdeko.Modules.Permissions.Services.PermissionService
  parent: Mewdeko.Modules.Permissions.Services
  href: Mewdeko.Modules.Permissions.Services.PermissionService.html
  name: PermissionService
  nameWithType: PermissionService
  fullName: Mewdeko.Modules.Permissions.Services.PermissionService
- uid: Mewdeko.Services.GuildSettingsService
  commentId: T:Mewdeko.Services.GuildSettingsService
  parent: Mewdeko.Services
  href: Mewdeko.Services.GuildSettingsService.html
  name: GuildSettingsService
  nameWithType: GuildSettingsService
  fullName: Mewdeko.Services.GuildSettingsService
- uid: Mewdeko.Services.Impl.EventHandler
  commentId: T:Mewdeko.Services.Impl.EventHandler
  parent: Mewdeko.Services.Impl
  href: Mewdeko.Services.Impl.EventHandler.html
  name: EventHandler
  nameWithType: EventHandler
  fullName: Mewdeko.Services.Impl.EventHandler
- uid: Mewdeko.Common.Configs.BotConfig
  commentId: T:Mewdeko.Common.Configs.BotConfig
  parent: Mewdeko.Common.Configs
  href: Mewdeko.Common.Configs.BotConfig.html
  name: BotConfig
  nameWithType: BotConfig
  fullName: Mewdeko.Common.Configs.BotConfig
- uid: Mewdeko.Database
  commentId: N:Mewdeko.Database
  href: Mewdeko.html
  name: Mewdeko.Database
  nameWithType: Mewdeko.Database
  fullName: Mewdeko.Database
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Database
    name: Database
    href: Mewdeko.Database.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Database
    name: Database
    href: Mewdeko.Database.html
- uid: Discord.WebSocket
  commentId: N:Discord.WebSocket
  isExternal: true
  name: Discord.WebSocket
  nameWithType: Discord.WebSocket
  fullName: Discord.WebSocket
  spec.csharp:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.WebSocket
    name: WebSocket
    isExternal: true
  spec.vb:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.WebSocket
    name: WebSocket
    isExternal: true
- uid: Mewdeko.Modules.Administration.Services
  commentId: N:Mewdeko.Modules.Administration.Services
  href: Mewdeko.html
  name: Mewdeko.Modules.Administration.Services
  nameWithType: Mewdeko.Modules.Administration.Services
  fullName: Mewdeko.Modules.Administration.Services
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Modules
    name: Modules
    href: Mewdeko.Modules.html
  - name: .
  - uid: Mewdeko.Modules.Administration
    name: Administration
    href: Mewdeko.Modules.Administration.html
  - name: .
  - uid: Mewdeko.Modules.Administration.Services
    name: Services
    href: Mewdeko.Modules.Administration.Services.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Modules
    name: Modules
    href: Mewdeko.Modules.html
  - name: .
  - uid: Mewdeko.Modules.Administration
    name: Administration
    href: Mewdeko.Modules.Administration.html
  - name: .
  - uid: Mewdeko.Modules.Administration.Services
    name: Services
    href: Mewdeko.Modules.Administration.Services.html
- uid: Mewdeko.Modules.Permissions.Services
  commentId: N:Mewdeko.Modules.Permissions.Services
  href: Mewdeko.html
  name: Mewdeko.Modules.Permissions.Services
  nameWithType: Mewdeko.Modules.Permissions.Services
  fullName: Mewdeko.Modules.Permissions.Services
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Modules
    name: Modules
    href: Mewdeko.Modules.html
  - name: .
  - uid: Mewdeko.Modules.Permissions
    name: Permissions
    href: Mewdeko.Modules.Permissions.html
  - name: .
  - uid: Mewdeko.Modules.Permissions.Services
    name: Services
    href: Mewdeko.Modules.Permissions.Services.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Modules
    name: Modules
    href: Mewdeko.Modules.html
  - name: .
  - uid: Mewdeko.Modules.Permissions
    name: Permissions
    href: Mewdeko.Modules.Permissions.html
  - name: .
  - uid: Mewdeko.Modules.Permissions.Services
    name: Services
    href: Mewdeko.Modules.Permissions.Services.html
- uid: Mewdeko.Services.Impl
  commentId: N:Mewdeko.Services.Impl
  href: Mewdeko.html
  name: Mewdeko.Services.Impl
  nameWithType: Mewdeko.Services.Impl
  fullName: Mewdeko.Services.Impl
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
  - name: .
  - uid: Mewdeko.Services.Impl
    name: Impl
    href: Mewdeko.Services.Impl.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
  - name: .
  - uid: Mewdeko.Services.Impl
    name: Impl
    href: Mewdeko.Services.Impl.html
- uid: Mewdeko.Common.Configs
  commentId: N:Mewdeko.Common.Configs
  href: Mewdeko.html
  name: Mewdeko.Common.Configs
  nameWithType: Mewdeko.Common.Configs
  fullName: Mewdeko.Common.Configs
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
  - name: .
  - uid: Mewdeko.Common.Configs
    name: Configs
    href: Mewdeko.Common.Configs.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
  - name: .
  - uid: Mewdeko.Common.Configs
    name: Configs
    href: Mewdeko.Common.Configs.html
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSNum*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSNum
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetSNum_System_UInt64_
  name: GetSNum
  nameWithType: SuggestionsService.GetSNum
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSNum
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: System.Threading.Tasks.Task{System.UInt64}
  commentId: T:System.Threading.Tasks.Task{System.UInt64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ulong>
  nameWithType: Task<ulong>
  fullName: System.Threading.Tasks.Task<ulong>
  nameWithType.vb: Task(Of ULong)
  fullName.vb: System.Threading.Tasks.Task(Of ULong)
  name.vb: Task(Of ULong)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetMaxLength*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetMaxLength
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetMaxLength_System_UInt64_
  name: GetMaxLength
  nameWithType: SuggestionsService.GetMaxLength
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetMaxLength
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<int>
  nameWithType: Task<int>
  fullName: System.Threading.Tasks.Task<int>
  nameWithType.vb: Task(Of Integer)
  fullName.vb: System.Threading.Tasks.Task(Of Integer)
  name.vb: Task(Of Integer)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetMinLength*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetMinLength
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetMinLength_System_UInt64_
  name: GetMinLength
  nameWithType: SuggestionsService.GetMinLength
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetMinLength
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetEmotes*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetEmotes
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetEmotes_System_UInt64_
  name: GetEmotes
  nameWithType: SuggestionsService.GetEmotes
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetEmotes
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetButtonType*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetButtonType
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetButtonType_Discord_IGuild_System_Int32_System_Int32_
  name: SetButtonType
  nameWithType: SuggestionsService.SetButtonType
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetButtonType
- uid: Discord.IGuild
  commentId: T:Discord.IGuild
  parent: Discord
  isExternal: true
  name: IGuild
  nameWithType: IGuild
  fullName: Discord.IGuild
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Discord
  commentId: N:Discord
  isExternal: true
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetRepostedMessageAndChannel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetRepostedMessageAndChannel
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetRepostedMessageAndChannel_Mewdeko_Database_Models_SuggestionsModel_Discord_IGuild_
  name: GetRepostedMessageAndChannel
  nameWithType: SuggestionsService.GetRepostedMessageAndChannel
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetRepostedMessageAndChannel
- uid: Mewdeko.Database.Models.SuggestionsModel
  commentId: T:Mewdeko.Database.Models.SuggestionsModel
  parent: Mewdeko.Database.Models
  href: Mewdeko.Database.Models.SuggestionsModel.html
  name: SuggestionsModel
  nameWithType: SuggestionsModel
  fullName: Mewdeko.Database.Models.SuggestionsModel
- uid: System.Threading.Tasks.Task{System.ValueTuple{System.UInt64,System.UInt64}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{System.UInt64,System.UInt64}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<(ulong, ulong)>
  nameWithType: Task<(ulong, ulong)>
  fullName: System.Threading.Tasks.Task<(ulong, ulong)>
  nameWithType.vb: Task(Of (ULong, ULong))
  fullName.vb: System.Threading.Tasks.Task(Of (ULong, ULong))
  name.vb: Task(Of (ULong, ULong))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: (
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  - name: )
- uid: Mewdeko.Database.Models
  commentId: N:Mewdeko.Database.Models
  href: Mewdeko.html
  name: Mewdeko.Database.Models
  nameWithType: Mewdeko.Database.Models
  fullName: Mewdeko.Database.Models
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Database
    name: Database
    href: Mewdeko.Database.html
  - name: .
  - uid: Mewdeko.Database.Models
    name: Models
    href: Mewdeko.Database.Models.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Database
    name: Database
    href: Mewdeko.Database.html
  - name: .
  - uid: Mewdeko.Database.Models
    name: Models
    href: Mewdeko.Database.Models.html
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionEmotes*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionEmotes
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetSuggestionEmotes_Discord_IGuild_System_String_
  name: SetSuggestionEmotes
  nameWithType: SuggestionsService.SetSuggestionEmotes
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionEmotes
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonColor*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonColor
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetSuggestButtonColor_Discord_IGuild_System_Int32_
  name: SetSuggestButtonColor
  nameWithType: SuggestionsService.SetSuggestButtonColor
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonColor
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionButtonId*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionButtonId
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetSuggestionButtonId_Discord_IGuild_System_UInt64_
  name: SetSuggestionButtonId
  nameWithType: SuggestionsService.SetSuggestionButtonId
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionButtonId
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionChannelId*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionChannelId
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetSuggestionChannelId_Discord_IGuild_System_UInt64_
  name: SetSuggestionChannelId
  nameWithType: SuggestionsService.SetSuggestionChannelId
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionChannelId
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetMinLength*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetMinLength
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetMinLength_Discord_IGuild_System_Int32_
  name: SetMinLength
  nameWithType: SuggestionsService.SetMinLength
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetMinLength
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetMaxLength*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetMaxLength
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetMaxLength_Discord_IGuild_System_Int32_
  name: SetMaxLength
  nameWithType: SuggestionsService.SetMaxLength
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetMaxLength
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButton*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButton
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetSuggestButton_Discord_IGuild_
  name: GetSuggestButton
  nameWithType: SuggestionsService.GetSuggestButton
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButton
- uid: System.Threading.Tasks.Task{Discord.ComponentBuilder}
  commentId: T:System.Threading.Tasks.Task{Discord.ComponentBuilder}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ComponentBuilder>
  nameWithType: Task<ComponentBuilder>
  fullName: System.Threading.Tasks.Task<Discord.ComponentBuilder>
  nameWithType.vb: Task(Of ComponentBuilder)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.ComponentBuilder)
  name.vb: Task(Of ComponentBuilder)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Discord.ComponentBuilder
    name: ComponentBuilder
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Discord.ComponentBuilder
    name: ComponentBuilder
    isExternal: true
  - name: )
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SuggestReset*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SuggestReset
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SuggestReset_Discord_IGuild_
  name: SuggestReset
  nameWithType: SuggestionsService.SuggestReset
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SuggestReset
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateSuggestionButtonMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateSuggestionButtonMessage
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_UpdateSuggestionButtonMessage_Discord_IGuild_System_String_System_Boolean_
  name: UpdateSuggestionButtonMessage
  nameWithType: SuggestionsService.UpdateSuggestionButtonMessage
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateSuggestionButtonMessage
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonMessage
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetSuggestButtonMessage_Discord_IGuild_System_String_
  name: SetSuggestButtonMessage
  nameWithType: SuggestionsService.SetSuggestButtonMessage
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonMessage
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonLabel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonLabel
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetSuggestButtonLabel_Discord_IGuild_System_String_
  name: SetSuggestButtonLabel
  nameWithType: SuggestionsService.SetSuggestButtonLabel
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonLabel
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionMessage
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetSuggestionMessage_Discord_IGuild_System_String_
  name: SetSuggestionMessage
  nameWithType: SuggestionsService.SetSuggestionMessage
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestionMessage
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetAcceptMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetAcceptMessage
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetAcceptMessage_Discord_IGuild_System_String_
  name: SetAcceptMessage
  nameWithType: SuggestionsService.SetAcceptMessage
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetAcceptMessage
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetDenyMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetDenyMessage
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetDenyMessage_Discord_IGuild_System_String_
  name: SetDenyMessage
  nameWithType: SuggestionsService.SetDenyMessage
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetDenyMessage
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetImplementMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetImplementMessage
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetImplementMessage_Discord_IGuild_System_String_
  name: SetImplementMessage
  nameWithType: SuggestionsService.SetImplementMessage
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetImplementMessage
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateSuggestState*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateSuggestState
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_UpdateSuggestState_Mewdeko_Database_Models_SuggestionsModel_System_Int32_System_UInt64_
  name: UpdateSuggestState
  nameWithType: SuggestionsService.UpdateSuggestState
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateSuggestState
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateStateMessageId*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateStateMessageId
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_UpdateStateMessageId_Mewdeko_Database_Models_SuggestionsModel_System_UInt64_
  name: UpdateStateMessageId
  nameWithType: SuggestionsService.UpdateStateMessageId
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateStateMessageId
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestThreadsType*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestThreadsType
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetSuggestThreadsType_Discord_IGuild_System_Int32_
  name: SetSuggestThreadsType
  nameWithType: SuggestionsService.SetSuggestThreadsType
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestThreadsType
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetConsiderMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetConsiderMessage
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetConsiderMessage_Discord_IGuild_System_String_
  name: SetConsiderMessage
  nameWithType: SuggestionsService.SetConsiderMessage
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetConsiderMessage
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Sugnum*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.Sugnum
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_Sugnum_Discord_IGuild_System_UInt64_
  name: Sugnum
  nameWithType: SuggestionsService.Sugnum
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Sugnum
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnDeny*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnDeny
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetArchiveOnDeny_Discord_IGuild_System_Boolean_
  name: SetArchiveOnDeny
  nameWithType: SuggestionsService.SetArchiveOnDeny
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnDeny
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnAccept*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnAccept
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetArchiveOnAccept_Discord_IGuild_System_Boolean_
  name: SetArchiveOnAccept
  nameWithType: SuggestionsService.SetArchiveOnAccept
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnAccept
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnConsider*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnConsider
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetArchiveOnConsider_Discord_IGuild_System_Boolean_
  name: SetArchiveOnConsider
  nameWithType: SuggestionsService.SetArchiveOnConsider
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnConsider
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnImplement*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnImplement
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetArchiveOnImplement_Discord_IGuild_System_Boolean_
  name: SetArchiveOnImplement
  nameWithType: SuggestionsService.SetArchiveOnImplement
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetArchiveOnImplement
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetEmoteMode*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetEmoteMode
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetEmoteMode_Discord_IGuild_System_Int32_
  name: SetEmoteMode
  nameWithType: SuggestionsService.SetEmoteMode
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetEmoteMode
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetAcceptChannel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetAcceptChannel
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetAcceptChannel_Discord_IGuild_System_UInt64_
  name: SetAcceptChannel
  nameWithType: SuggestionsService.SetAcceptChannel
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetAcceptChannel
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetDenyChannel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetDenyChannel
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetDenyChannel_Discord_IGuild_System_UInt64_
  name: SetDenyChannel
  nameWithType: SuggestionsService.SetDenyChannel
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetDenyChannel
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetConsiderChannel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetConsiderChannel
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetConsiderChannel_Discord_IGuild_System_UInt64_
  name: SetConsiderChannel
  nameWithType: SuggestionsService.SetConsiderChannel
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetConsiderChannel
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetImplementChannel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetImplementChannel
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetImplementChannel_Discord_IGuild_System_UInt64_
  name: SetImplementChannel
  nameWithType: SuggestionsService.SetImplementChannel
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetImplementChannel
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonChannel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonChannel
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetSuggestButtonChannel_Discord_IGuild_System_UInt64_
  name: SetSuggestButtonChannel
  nameWithType: SuggestionsService.SetSuggestButtonChannel
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonChannel
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonEmote*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonEmote
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SetSuggestButtonEmote_Discord_IGuild_System_String_
  name: SetSuggestButtonEmote
  nameWithType: SuggestionsService.SetSuggestButtonEmote
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SetSuggestButtonEmote
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateEmoteCount*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateEmoteCount
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_UpdateEmoteCount_System_UInt64_System_Int32_System_Boolean_
  name: UpdateEmoteCount
  nameWithType: SuggestionsService.UpdateEmoteCount
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdateEmoteCount
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetCurrentCount*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetCurrentCount
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetCurrentCount_System_UInt64_System_Int32_
  name: GetCurrentCount
  nameWithType: SuggestionsService.GetCurrentCount
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetCurrentCount
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestMote*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestMote
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetSuggestMote_Discord_IGuild_System_Int32_
  name: GetSuggestMote
  nameWithType: SuggestionsService.GetSuggestMote
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestMote
- uid: System.Threading.Tasks.Task{Discord.IEmote}
  commentId: T:System.Threading.Tasks.Task{Discord.IEmote}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IEmote>
  nameWithType: Task<IEmote>
  fullName: System.Threading.Tasks.Task<Discord.IEmote>
  nameWithType.vb: Task(Of IEmote)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IEmote)
  name.vb: Task(Of IEmote)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Discord.IEmote
    name: IEmote
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Discord.IEmote
    name: IEmote
    isExternal: true
  - name: )
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestionChannel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestionChannel
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetSuggestionChannel_System_UInt64_
  name: GetSuggestionChannel
  nameWithType: SuggestionsService.GetSuggestionChannel
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestionChannel
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestionMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestionMessage
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetSuggestionMessage_Discord_IGuild_
  name: GetSuggestionMessage
  nameWithType: SuggestionsService.GetSuggestionMessage
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestionMessage
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetAcceptMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetAcceptMessage
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetAcceptMessage_Discord_IGuild_
  name: GetAcceptMessage
  nameWithType: SuggestionsService.GetAcceptMessage
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetAcceptMessage
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetDenyMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetDenyMessage
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetDenyMessage_Discord_IGuild_
  name: GetDenyMessage
  nameWithType: SuggestionsService.GetDenyMessage
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetDenyMessage
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetImplementMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetImplementMessage
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetImplementMessage_Discord_IGuild_
  name: GetImplementMessage
  nameWithType: SuggestionsService.GetImplementMessage
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetImplementMessage
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetConsiderMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetConsiderMessage
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetConsiderMessage_Discord_IGuild_
  name: GetConsiderMessage
  nameWithType: SuggestionsService.GetConsiderMessage
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetConsiderMessage
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetThreadType*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetThreadType
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetThreadType_Discord_IGuild_
  name: GetThreadType
  nameWithType: SuggestionsService.GetThreadType
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetThreadType
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetEmoteMode*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetEmoteMode
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetEmoteMode_Discord_IGuild_
  name: GetEmoteMode
  nameWithType: SuggestionsService.GetEmoteMode
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetEmoteMode
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetConsiderChannel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetConsiderChannel
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetConsiderChannel_Discord_IGuild_
  name: GetConsiderChannel
  nameWithType: SuggestionsService.GetConsiderChannel
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetConsiderChannel
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetAcceptChannel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetAcceptChannel
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetAcceptChannel_Discord_IGuild_
  name: GetAcceptChannel
  nameWithType: SuggestionsService.GetAcceptChannel
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetAcceptChannel
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetImplementChannel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetImplementChannel
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetImplementChannel_Discord_IGuild_
  name: GetImplementChannel
  nameWithType: SuggestionsService.GetImplementChannel
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetImplementChannel
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetDenyChannel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetDenyChannel
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetDenyChannel_Discord_IGuild_
  name: GetDenyChannel
  nameWithType: SuggestionsService.GetDenyChannel
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetDenyChannel
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnDeny*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnDeny
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetArchiveOnDeny_Discord_IGuild_
  name: GetArchiveOnDeny
  nameWithType: SuggestionsService.GetArchiveOnDeny
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnDeny
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnAccept*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnAccept
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetArchiveOnAccept_Discord_IGuild_
  name: GetArchiveOnAccept
  nameWithType: SuggestionsService.GetArchiveOnAccept
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnAccept
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnConsider*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnConsider
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetArchiveOnConsider_Discord_IGuild_
  name: GetArchiveOnConsider
  nameWithType: SuggestionsService.GetArchiveOnConsider
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnConsider
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnImplement*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnImplement
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetArchiveOnImplement_Discord_IGuild_
  name: GetArchiveOnImplement
  nameWithType: SuggestionsService.GetArchiveOnImplement
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetArchiveOnImplement
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonName*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonName
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetSuggestButtonName_Discord_IGuild_
  name: GetSuggestButtonName
  nameWithType: SuggestionsService.GetSuggestButtonName
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonName
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonChannel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonChannel
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetSuggestButtonChannel_Discord_IGuild_
  name: GetSuggestButtonChannel
  nameWithType: SuggestionsService.GetSuggestButtonChannel
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonChannel
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonEmote*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonEmote
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetSuggestButtonEmote_Discord_IGuild_
  name: GetSuggestButtonEmote
  nameWithType: SuggestionsService.GetSuggestButtonEmote
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonEmote
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonMessage
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetSuggestButtonMessage_Discord_IGuild_
  name: GetSuggestButtonMessage
  nameWithType: SuggestionsService.GetSuggestButtonMessage
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonMessage
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonRepost*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonRepost
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetSuggestButtonRepost_Discord_IGuild_
  name: GetSuggestButtonRepost
  nameWithType: SuggestionsService.GetSuggestButtonRepost
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonRepost
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonMessageId*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonMessageId
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetSuggestButtonMessageId_Discord_IGuild_
  name: GetSuggestButtonMessageId
  nameWithType: SuggestionsService.GetSuggestButtonMessageId
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonMessageId
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonColor*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonColor
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetSuggestButtonColor_Discord_IGuild_
  name: GetSuggestButtonColor
  nameWithType: SuggestionsService.GetSuggestButtonColor
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestButtonColor
- uid: System.Threading.Tasks.Task{Discord.ButtonStyle}
  commentId: T:System.Threading.Tasks.Task{Discord.ButtonStyle}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ButtonStyle>
  nameWithType: Task<ButtonStyle>
  fullName: System.Threading.Tasks.Task<Discord.ButtonStyle>
  nameWithType.vb: Task(Of ButtonStyle)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.ButtonStyle)
  name.vb: Task(Of ButtonStyle)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Discord.ButtonStyle
    name: ButtonStyle
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Discord.ButtonStyle
    name: ButtonStyle
    isExternal: true
  - name: )
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetButtonStyle*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetButtonStyle
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetButtonStyle_Discord_IGuild_System_Int32_
  name: GetButtonStyle
  nameWithType: SuggestionsService.GetButtonStyle
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetButtonStyle
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendDenyEmbed*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendDenyEmbed
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SendDenyEmbed_Discord_IGuild_Discord_WebSocket_DiscordSocketClient_Discord_IUser_System_UInt64_Discord_ITextChannel_System_String_Discord_IDiscordInteraction_
  name: SendDenyEmbed
  nameWithType: SuggestionsService.SendDenyEmbed
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendDenyEmbed
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  isExternal: true
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Discord.ITextChannel
  commentId: T:Discord.ITextChannel
  parent: Discord
  isExternal: true
  name: ITextChannel
  nameWithType: ITextChannel
  fullName: Discord.ITextChannel
- uid: Discord.IDiscordInteraction
  commentId: T:Discord.IDiscordInteraction
  parent: Discord
  isExternal: true
  name: IDiscordInteraction
  nameWithType: IDiscordInteraction
  fullName: Discord.IDiscordInteraction
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendConsiderEmbed*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendConsiderEmbed
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SendConsiderEmbed_Discord_IGuild_Discord_WebSocket_DiscordSocketClient_Discord_IUser_System_UInt64_Discord_ITextChannel_System_String_Discord_IDiscordInteraction_
  name: SendConsiderEmbed
  nameWithType: SuggestionsService.SendConsiderEmbed
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendConsiderEmbed
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendImplementEmbed*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendImplementEmbed
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SendImplementEmbed_Discord_IGuild_Discord_WebSocket_DiscordSocketClient_Discord_IUser_System_UInt64_Discord_ITextChannel_System_String_Discord_IDiscordInteraction_
  name: SendImplementEmbed
  nameWithType: SuggestionsService.SendImplementEmbed
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendImplementEmbed
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendAcceptEmbed*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendAcceptEmbed
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SendAcceptEmbed_Discord_IGuild_Discord_WebSocket_DiscordSocketClient_Discord_IUser_System_UInt64_Discord_ITextChannel_System_String_Discord_IDiscordInteraction_
  name: SendAcceptEmbed
  nameWithType: SuggestionsService.SendAcceptEmbed
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendAcceptEmbed
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendSuggestion*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendSuggestion
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_SendSuggestion_Discord_IGuild_Discord_IGuildUser_Discord_WebSocket_DiscordSocketClient_System_String_Discord_ITextChannel_Discord_IDiscordInteraction_
  name: SendSuggestion
  nameWithType: SuggestionsService.SendSuggestion
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.SendSuggestion
- uid: Discord.IGuildUser
  commentId: T:Discord.IGuildUser
  parent: Discord
  isExternal: true
  name: IGuildUser
  nameWithType: IGuildUser
  fullName: Discord.IGuildUser
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggest*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggest
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_Suggest_Discord_IGuild_System_UInt64_System_UInt64_System_UInt64_System_String_
  name: Suggest
  nameWithType: SuggestionsService.Suggest
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggest
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggestions*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggestions
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_Suggestions_System_UInt64_System_UInt64_
  name: Suggestions
  nameWithType: SuggestionsService.Suggestions
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.Suggestions
- uid: System.Threading.Tasks.Task{Mewdeko.Database.Models.SuggestionsModel[]}
  commentId: T:System.Threading.Tasks.Task{Mewdeko.Database.Models.SuggestionsModel[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<SuggestionsModel[]>
  nameWithType: Task<SuggestionsModel[]>
  fullName: System.Threading.Tasks.Task<Mewdeko.Database.Models.SuggestionsModel[]>
  nameWithType.vb: Task(Of SuggestionsModel())
  fullName.vb: System.Threading.Tasks.Task(Of Mewdeko.Database.Models.SuggestionsModel())
  name.vb: Task(Of SuggestionsModel())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Mewdeko.Database.Models.SuggestionsModel
    name: SuggestionsModel
    href: Mewdeko.Database.Models.SuggestionsModel.html
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Database.Models.SuggestionsModel
    name: SuggestionsModel
    href: Mewdeko.Database.Models.SuggestionsModel.html
  - name: (
  - name: )
  - name: )
- uid: System.Collections.Generic.List{Mewdeko.Database.Models.SuggestionsModel}
  commentId: T:System.Collections.Generic.List{Mewdeko.Database.Models.SuggestionsModel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<SuggestionsModel>
  nameWithType: List<SuggestionsModel>
  fullName: System.Collections.Generic.List<Mewdeko.Database.Models.SuggestionsModel>
  nameWithType.vb: List(Of SuggestionsModel)
  fullName.vb: System.Collections.Generic.List(Of Mewdeko.Database.Models.SuggestionsModel)
  name.vb: List(Of SuggestionsModel)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Mewdeko.Database.Models.SuggestionsModel
    name: SuggestionsModel
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Database.Models.SuggestionsModel
    name: SuggestionsModel
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestByMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestByMessage
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetSuggestByMessage_System_UInt64_
  name: GetSuggestByMessage
  nameWithType: SuggestionsService.GetSuggestByMessage
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetSuggestByMessage
- uid: System.Threading.Tasks.Task{Mewdeko.Database.Models.SuggestionsModel}
  commentId: T:System.Threading.Tasks.Task{Mewdeko.Database.Models.SuggestionsModel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<SuggestionsModel>
  nameWithType: Task<SuggestionsModel>
  fullName: System.Threading.Tasks.Task<Mewdeko.Database.Models.SuggestionsModel>
  nameWithType.vb: Task(Of SuggestionsModel)
  fullName.vb: System.Threading.Tasks.Task(Of Mewdeko.Database.Models.SuggestionsModel)
  name.vb: Task(Of SuggestionsModel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Mewdeko.Database.Models.SuggestionsModel
    name: SuggestionsModel
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Database.Models.SuggestionsModel
    name: SuggestionsModel
  - name: )
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.ForUser*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.ForUser
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_ForUser_System_UInt64_System_UInt64_
  name: ForUser
  nameWithType: SuggestionsService.ForUser
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.ForUser
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetPickedEmote*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetPickedEmote
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetPickedEmote_System_UInt64_System_UInt64_
  name: GetPickedEmote
  nameWithType: SuggestionsService.GetPickedEmote
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetPickedEmote
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdatePickedEmote*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdatePickedEmote
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_UpdatePickedEmote_System_UInt64_System_UInt64_System_Int32_
  name: UpdatePickedEmote
  nameWithType: SuggestionsService.UpdatePickedEmote
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.UpdatePickedEmote
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.AddThreadChannel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.AddThreadChannel
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_AddThreadChannel_System_UInt64_System_UInt64_
  name: AddThreadChannel
  nameWithType: SuggestionsService.AddThreadChannel
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.AddThreadChannel
- uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetThreadByMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetThreadByMessage
  href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html#Mewdeko_Modules_Suggestions_Services_SuggestionsService_GetThreadByMessage_System_UInt64_
  name: GetThreadByMessage
  nameWithType: SuggestionsService.GetThreadByMessage
  fullName: Mewdeko.Modules.Suggestions.Services.SuggestionsService.GetThreadByMessage
