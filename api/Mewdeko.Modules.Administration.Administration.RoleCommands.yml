### YamlMime:ManagedReference
items:
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands
  commentId: T:Mewdeko.Modules.Administration.Administration.RoleCommands
  id: Administration.RoleCommands
  parent: Mewdeko.Modules.Administration
  children:
  - Mewdeko.Modules.Administration.Administration.RoleCommands.#ctor(System.IServiceProvider,Fergun.Interactive.InteractiveService)
  - Mewdeko.Modules.Administration.Administration.RoleCommands.CreateRole(System.String)
  - Mewdeko.Modules.Administration.Administration.RoleCommands.DeleteRole(Discord.IRole)
  - Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude,System.String[])
  - Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude,System.UInt64,System.String[])
  - Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(System.String[])
  - Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(System.UInt64,Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude,System.String[])
  - Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(System.UInt64,System.String[])
  - Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRolesList
  - Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRolesRemove(System.Int32)
  - Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveAllRoles(Discord.IGuildUser)
  - Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveRole(Discord.IGuildUser,Discord.IRole)
  - Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveRole(Discord.IRole,Discord.IGuildUser)
  - Mewdeko.Modules.Administration.Administration.RoleCommands.RenameRole(Discord.IRole,System.String)
  - Mewdeko.Modules.Administration.Administration.RoleCommands.RoleColor(Discord.IRole)
  - Mewdeko.Modules.Administration.Administration.RoleCommands.RoleColor(Discord.IRole,SkiaSharp.SKColor)
  - Mewdeko.Modules.Administration.Administration.RoleCommands.RoleHoist(Discord.IRole)
  - Mewdeko.Modules.Administration.Administration.RoleCommands.SetRole(Discord.IGuildUser,Discord.IRole)
  - Mewdeko.Modules.Administration.Administration.RoleCommands.SetRole(Discord.IRole,Discord.IGuildUser)
  langs:
  - csharp
  - vb
  name: Administration.RoleCommands
  nameWithType: Administration.RoleCommands
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands
  type: Class
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RoleCommands
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 19
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Commands for managing roles.
  example: []
  syntax:
    content: 'public class Administration.RoleCommands : MewdekoSubmodule<RoleCommandsService>, IModuleBase'
    content.vb: Public Class Administration.RoleCommands Inherits MewdekoSubmodule(Of RoleCommandsService) Implements IModuleBase
  inheritance:
  - System.Object
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  - Discord.Commands.ModuleBase
  - Mewdeko.Common.MewdekoModule
  - Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Administration.Services.RoleCommandsService}
  - Mewdeko.Common.MewdekoSubmodule{Mewdeko.Modules.Administration.Services.RoleCommandsService}
  implements:
  - Discord.Commands.IModuleBase
  inheritedMembers:
  - Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Administration.Services.RoleCommandsService}.Service
  - Mewdeko.Common.MewdekoModule.CultureInfo
  - Mewdeko.Common.MewdekoModule.Strings
  - Mewdeko.Common.MewdekoModule.Localization
  - Mewdeko.Common.MewdekoModule.ctx
  - Mewdeko.Common.MewdekoModule.Config
  - Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  - Mewdeko.Common.MewdekoModule.GetText(System.String)
  - Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
  - Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  - Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  - Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  - Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  - Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
  - Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.Context
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Mewdeko.Modules.Administration.Administration.RoleCommands.Mewdeko.Extensions.Extensions.ThrowIfNull``1(System.String)
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.#ctor(System.IServiceProvider,Fergun.Interactive.InteractiveService)
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.#ctor(System.IServiceProvider,Fergun.Interactive.InteractiveService)
  id: '#ctor(System.IServiceProvider,Fergun.Interactive.InteractiveService)'
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: RoleCommands(IServiceProvider, InteractiveService)
  nameWithType: Administration.RoleCommands.RoleCommands(IServiceProvider, InteractiveService)
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.RoleCommands(System.IServiceProvider, Fergun.Interactive.InteractiveService)
  type: Constructor
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: .ctor
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 19
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Commands for managing roles.
  example: []
  syntax:
    content: public RoleCommands(IServiceProvider services, InteractiveService intserv)
    parameters:
    - id: services
      type: System.IServiceProvider
      description: Main services provider for the bot.
    - id: intserv
      type: Fergun.Interactive.InteractiveService
      description: Interactive service used for paginated embeds.
    content.vb: Public Sub New(services As IServiceProvider, intserv As InteractiveService)
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.#ctor*
  nameWithType.vb: Administration.RoleCommands.New(IServiceProvider, InteractiveService)
  fullName.vb: Mewdeko.Modules.Administration.Administration.RoleCommands.New(System.IServiceProvider, Fergun.Interactive.InteractiveService)
  name.vb: New(IServiceProvider, InteractiveService)
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(System.UInt64,System.String[])
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(System.UInt64,System.String[])
  id: ReactionRoles(System.UInt64,System.String[])
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: ReactionRoles(ulong, params string[])
  nameWithType: Administration.RoleCommands.ReactionRoles(ulong, params string[])
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(ulong, params string[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ReactionRoles
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 129
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Assigns reaction roles based on the provided input.
  remarks: >-
    This command allows administrators to manage reaction roles in the server.

    It requires the Manage Roles permission for the user and the Manage Roles permission for the bot.
  example: []
  syntax:
    content: >-
      [Cmd("ReactionRoles")]

      [Aliases("ReactionRoles")]

      [RequireContext(ContextType.Guild)]

      [BotPerm(GuildPermission.ManageRoles)]

      [Priority(0)]

      public Task ReactionRoles(ulong messageId, params string[] input)
    parameters:
    - id: messageId
      type: System.UInt64
      description: The ID of the message to which reactions will be added.
    - id: input
      type: System.String[]
      description: The roles and emojis to be associated with reactions.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: >-
      <Cmd("ReactionRoles")>

      <Aliases("ReactionRoles")>

      <RequireContext(ContextType.Guild)>

      <BotPerm(GuildPermission.ManageRoles)>

      <Priority(0)>

      Public Function ReactionRoles(messageId As ULong, ParamArray input As String()) As Task
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReactionRoles
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReactionRoles
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Discord.Commands.PriorityAttribute
    ctor: Discord.Commands.PriorityAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 0
  nameWithType.vb: Administration.RoleCommands.ReactionRoles(ULong, ParamArray String())
  fullName.vb: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(ULong, ParamArray String())
  name.vb: ReactionRoles(ULong, ParamArray String())
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(System.UInt64,Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude,System.String[])
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(System.UInt64,Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude,System.String[])
  id: ReactionRoles(System.UInt64,Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude,System.String[])
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: ReactionRoles(ulong, Exclude, params string[])
  nameWithType: Administration.RoleCommands.ReactionRoles(ulong, Administration.RoleCommands.Exclude, params string[])
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(ulong, Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude, params string[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ReactionRoles
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 143
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Assigns reaction roles based on the provided input, excluding certain roles.
  remarks: >-
    This command allows administrators to manage reaction roles in the server while making all roles exclusive.

    It requires the Manage Roles permission for the user and the Manage Roles permission for the bot.
  example: []
  syntax:
    content: >-
      [Cmd("ReactionRoles")]

      [Aliases("ReactionRoles")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      [Priority(1)]

      public Task ReactionRoles(ulong messageId, Administration.RoleCommands.Exclude _, params string[] input)
    parameters:
    - id: messageId
      type: System.UInt64
      description: The ID of the message to which reactions will be added.
    - id: _
      type: Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude
    - id: input
      type: System.String[]
      description: The roles and emojis to be associated with reactions.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: >-
      <Cmd("ReactionRoles")>

      <Aliases("ReactionRoles")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      <Priority(1)>

      Public Function ReactionRoles(messageId As ULong, _ As Administration.RoleCommands.Exclude, ParamArray input As String()) As Task
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReactionRoles
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReactionRoles
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Discord.Commands.PriorityAttribute
    ctor: Discord.Commands.PriorityAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 1
  nameWithType.vb: Administration.RoleCommands.ReactionRoles(ULong, Administration.RoleCommands.Exclude, ParamArray String())
  fullName.vb: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(ULong, Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude, ParamArray String())
  name.vb: ReactionRoles(ULong, Exclude, ParamArray String())
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude,System.UInt64,System.String[])
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude,System.UInt64,System.String[])
  id: ReactionRoles(Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude,System.UInt64,System.String[])
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: ReactionRoles(Exclude, ulong, params string[])
  nameWithType: Administration.RoleCommands.ReactionRoles(Administration.RoleCommands.Exclude, ulong, params string[])
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude, ulong, params string[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ReactionRoles
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 159
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Assigns reaction roles based on the provided input, excluding certain roles.
  remarks: >-
    This command allows administrators to manage reaction roles in the server while making all roles exclusive.

    It requires the Manage Roles permission for the user and the Manage Roles permission for the bot.
  example: []
  syntax:
    content: >-
      [Cmd("ReactionRoles")]

      [Aliases("ReactionRoles")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      [Priority(1)]

      public Task ReactionRoles(Administration.RoleCommands.Exclude _, ulong messageId, params string[] input)
    parameters:
    - id: _
      type: Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude
      description: Exclusion parameter (ignored).
    - id: messageId
      type: System.UInt64
      description: The ID of the message to which reactions will be added.
    - id: input
      type: System.String[]
      description: The roles and emojis to be associated with reactions.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: >-
      <Cmd("ReactionRoles")>

      <Aliases("ReactionRoles")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      <Priority(1)>

      Public Function ReactionRoles(_ As Administration.RoleCommands.Exclude, messageId As ULong, ParamArray input As String()) As Task
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReactionRoles
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReactionRoles
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Discord.Commands.PriorityAttribute
    ctor: Discord.Commands.PriorityAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 1
  nameWithType.vb: Administration.RoleCommands.ReactionRoles(Administration.RoleCommands.Exclude, ULong, ParamArray String())
  fullName.vb: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude, ULong, ParamArray String())
  name.vb: ReactionRoles(Exclude, ULong, ParamArray String())
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(System.String[])
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(System.String[])
  id: ReactionRoles(System.String[])
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: ReactionRoles(params string[])
  nameWithType: Administration.RoleCommands.ReactionRoles(params string[])
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(params string[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ReactionRoles
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 173
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Assigns reaction roles based on the provided input.
  remarks: >-
    This command allows administrators to manage reaction roles in the server.

    It requires the Manage Roles permission for the user and the Manage Roles permission for the bot.
  example: []
  syntax:
    content: >-
      [Cmd("ReactionRoles")]

      [Aliases("ReactionRoles")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      [Priority(0)]

      public Task ReactionRoles(params string[] input)
    parameters:
    - id: input
      type: System.String[]
      description: The roles and emojis to be associated with reactions.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: >-
      <Cmd("ReactionRoles")>

      <Aliases("ReactionRoles")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      <Priority(0)>

      Public Function ReactionRoles(ParamArray input As String()) As Task
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReactionRoles
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReactionRoles
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Discord.Commands.PriorityAttribute
    ctor: Discord.Commands.PriorityAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 0
  nameWithType.vb: Administration.RoleCommands.ReactionRoles(ParamArray String())
  fullName.vb: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(ParamArray String())
  name.vb: ReactionRoles(ParamArray String())
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude,System.String[])
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude,System.String[])
  id: ReactionRoles(Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude,System.String[])
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: ReactionRoles(Exclude, params string[])
  nameWithType: Administration.RoleCommands.ReactionRoles(Administration.RoleCommands.Exclude, params string[])
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude, params string[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ReactionRoles
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 186
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Assigns reaction roles based on the provided input, excluding certain roles.
  remarks: >-
    This command allows administrators to manage reaction roles in the server while making all roles exclusive.

    It requires the Manage Roles permission for the user and the Manage Roles permission for the bot.
  example: []
  syntax:
    content: >-
      [Cmd("ReactionRoles")]

      [Aliases("ReactionRoles")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      [Priority(1)]

      public Task ReactionRoles(Administration.RoleCommands.Exclude _, params string[] input)
    parameters:
    - id: _
      type: Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude
    - id: input
      type: System.String[]
      description: The roles and emojis to be associated with reactions.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: >-
      <Cmd("ReactionRoles")>

      <Aliases("ReactionRoles")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      <Priority(1)>

      Public Function ReactionRoles(_ As Administration.RoleCommands.Exclude, ParamArray input As String()) As Task
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReactionRoles
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReactionRoles
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Discord.Commands.PriorityAttribute
    ctor: Discord.Commands.PriorityAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 1
  nameWithType.vb: Administration.RoleCommands.ReactionRoles(Administration.RoleCommands.Exclude, ParamArray String())
  fullName.vb: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles(Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude, ParamArray String())
  name.vb: ReactionRoles(Exclude, ParamArray String())
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRolesList
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRolesList
  id: ReactionRolesList
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: ReactionRolesList()
  nameWithType: Administration.RoleCommands.ReactionRolesList()
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRolesList()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ReactionRolesList
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 199
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Displays a list of reaction roles configured in the server.
  remarks: >-
    This command allows administrators to view a list of reaction roles configured in the server.

    It requires the Manage Roles permission for the user.
  example: []
  syntax:
    content: >-
      [Cmd("ReactionRolesList")]

      [Aliases("ReactionRolesList")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      public Task ReactionRolesList()
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: >-
      <Cmd("ReactionRolesList")>

      <Aliases("ReactionRolesList")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      Public Function ReactionRolesList() As Task
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRolesList*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReactionRolesList
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReactionRolesList
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRolesRemove(System.Int32)
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRolesRemove(System.Int32)
  id: ReactionRolesRemove(System.Int32)
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: ReactionRolesRemove(int)
  nameWithType: Administration.RoleCommands.ReactionRolesRemove(int)
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRolesRemove(int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ReactionRolesRemove
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 254
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Removes a reaction role based on its index.
  remarks: >-
    This command allows administrators to remove a reaction role based on its index in the list.

    It requires the Manage Roles permission for the user.
  example: []
  syntax:
    content: >-
      [Cmd("ReactionRolesRemove")]

      [Aliases("ReactionRolesRemove")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      public Task ReactionRolesRemove(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The index of the reaction role to remove.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: >-
      <Cmd("ReactionRolesRemove")>

      <Aliases("ReactionRolesRemove")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      Public Function ReactionRolesRemove(index As Integer) As Task
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRolesRemove*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReactionRolesRemove
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReactionRolesRemove
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  nameWithType.vb: Administration.RoleCommands.ReactionRolesRemove(Integer)
  fullName.vb: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRolesRemove(Integer)
  name.vb: ReactionRolesRemove(Integer)
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.SetRole(Discord.IRole,Discord.IGuildUser)
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.SetRole(Discord.IRole,Discord.IGuildUser)
  id: SetRole(Discord.IRole,Discord.IGuildUser)
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: SetRole(IRole, IGuildUser)
  nameWithType: Administration.RoleCommands.SetRole(IRole, IGuildUser)
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.SetRole(Discord.IRole, Discord.IGuildUser)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetRole
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 280
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Sets a role to a user.
  remarks: >-
    This command allows administrators to set a role to a specified user.

    It requires the Manage Roles permission for the user.
  example: []
  syntax:
    content: >-
      [Cmd("SetRole")]

      [Aliases("SetRole")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task SetRole(IRole roleToAdd, IGuildUser targetUser)
    parameters:
    - id: roleToAdd
      type: Discord.IRole
      description: The role to add to the user.
    - id: targetUser
      type: Discord.IGuildUser
      description: The user to add the role to.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: >-
      <Cmd("SetRole")>

      <Aliases("SetRole")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function SetRole(roleToAdd As IRole, targetUser As IGuildUser) As Task
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.SetRole*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SetRole
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SetRole
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.SetRole(Discord.IGuildUser,Discord.IRole)
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.SetRole(Discord.IGuildUser,Discord.IRole)
  id: SetRole(Discord.IGuildUser,Discord.IRole)
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: SetRole(IGuildUser, IRole)
  nameWithType: Administration.RoleCommands.SetRole(IGuildUser, IRole)
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.SetRole(Discord.IGuildUser, Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetRole
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 313
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Adds a role to a user.
  remarks: >-
    This command allows administrators to set a role to a specified user.

    It requires the Manage Roles permission for the user.
  example: []
  syntax:
    content: >-
      [Cmd("SetRole")]

      [Aliases("SetRole")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task SetRole(IGuildUser targetUser, IRole roleToAdd)
    parameters:
    - id: targetUser
      type: Discord.IGuildUser
      description: The user to add the role to.
    - id: roleToAdd
      type: Discord.IRole
      description: The role to add to the user.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: >-
      <Cmd("SetRole")>

      <Aliases("SetRole")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function SetRole(targetUser As IGuildUser, roleToAdd As IRole) As Task
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.SetRole*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SetRole
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SetRole
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveRole(Discord.IRole,Discord.IGuildUser)
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveRole(Discord.IRole,Discord.IGuildUser)
  id: RemoveRole(Discord.IRole,Discord.IGuildUser)
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: RemoveRole(IRole, IGuildUser)
  nameWithType: Administration.RoleCommands.RemoveRole(IRole, IGuildUser)
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveRole(Discord.IRole, Discord.IGuildUser)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RemoveRole
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 346
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Removes a role from a user.
  remarks: >-
    This command allows administrators to remove a role from a specified user.

    It requires the Manage Roles permission for the user.
  example: []
  syntax:
    content: >-
      [Cmd("RemoveRole")]

      [Aliases("RemoveRole")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task RemoveRole(IRole roleToRemove, IGuildUser targetUser)
    parameters:
    - id: roleToRemove
      type: Discord.IRole
      description: The role to remove from the user.
    - id: targetUser
      type: Discord.IGuildUser
      description: The user to remove the role from.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: >-
      <Cmd("RemoveRole")>

      <Aliases("RemoveRole")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function RemoveRole(roleToRemove As IRole, targetUser As IGuildUser) As Task
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveRole*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemoveRole
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemoveRole
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveRole(Discord.IGuildUser,Discord.IRole)
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveRole(Discord.IGuildUser,Discord.IRole)
  id: RemoveRole(Discord.IGuildUser,Discord.IRole)
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: RemoveRole(IGuildUser, IRole)
  nameWithType: Administration.RoleCommands.RemoveRole(IGuildUser, IRole)
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveRole(Discord.IGuildUser, Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RemoveRole
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 380
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Removes a role from a user.
  remarks: >-
    This command allows administrators to remove a role from a specified user.

    It requires the Manage Roles permission for the user.
  example: []
  syntax:
    content: >-
      [Cmd("RemoveRole")]

      [Aliases("RemoveRole")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task RemoveRole(IGuildUser targetUser, IRole roleToRemove)
    parameters:
    - id: targetUser
      type: Discord.IGuildUser
      description: The user to remove the role from.
    - id: roleToRemove
      type: Discord.IRole
      description: The role to remove from the user.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: >-
      <Cmd("RemoveRole")>

      <Aliases("RemoveRole")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function RemoveRole(targetUser As IGuildUser, roleToRemove As IRole) As Task
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveRole*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemoveRole
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemoveRole
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.RenameRole(Discord.IRole,System.String)
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.RenameRole(Discord.IRole,System.String)
  id: RenameRole(Discord.IRole,System.String)
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: RenameRole(IRole, string)
  nameWithType: Administration.RoleCommands.RenameRole(IRole, string)
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.RenameRole(Discord.IRole, string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RenameRole
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 413
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Renames a role.
  remarks: >-
    This command allows administrators to rename a specified role.

    It requires the Manage Roles permission for the user.
  example: []
  syntax:
    content: >-
      [Cmd("RenameRole")]

      [Aliases("RenameRole")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task RenameRole(IRole roleToEdit, string newname)
    parameters:
    - id: roleToEdit
      type: Discord.IRole
      description: The role to rename.
    - id: newname
      type: System.String
      description: The new name for the role.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: >-
      <Cmd("RenameRole")>

      <Aliases("RenameRole")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function RenameRole(roleToEdit As IRole, newname As String) As Task
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.RenameRole*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RenameRole
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RenameRole
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  nameWithType.vb: Administration.RoleCommands.RenameRole(IRole, String)
  fullName.vb: Mewdeko.Modules.Administration.Administration.RoleCommands.RenameRole(Discord.IRole, String)
  name.vb: RenameRole(IRole, String)
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveAllRoles(Discord.IGuildUser)
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveAllRoles(Discord.IGuildUser)
  id: RemoveAllRoles(Discord.IGuildUser)
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: RemoveAllRoles(IGuildUser)
  nameWithType: Administration.RoleCommands.RemoveAllRoles(IGuildUser)
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveAllRoles(Discord.IGuildUser)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RemoveAllRoles
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 448
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Removes all roles from a user except managed roles and the everyone role.
  remarks: >-
    This command allows administrators to remove all roles from a specified user except managed roles and the everyone role.

    It requires the Manage Roles permission for the user.
  example: []
  syntax:
    content: >-
      [Cmd("RemoveAllRoles")]

      [Aliases("RemoveAllRoles")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task RemoveAllRoles(IGuildUser user)
    parameters:
    - id: user
      type: Discord.IGuildUser
      description: The user from whom to remove all roles.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: >-
      <Cmd("RemoveAllRoles")>

      <Aliases("RemoveAllRoles")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function RemoveAllRoles(user As IGuildUser) As Task
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveAllRoles*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemoveAllRoles
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemoveAllRoles
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.CreateRole(System.String)
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.CreateRole(System.String)
  id: CreateRole(System.String)
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: CreateRole(string?)
  nameWithType: Administration.RoleCommands.CreateRole(string?)
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.CreateRole(string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: CreateRole
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 485
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Creates a new role with the specified name.
  remarks: >-
    This command allows administrators to create a new role with the specified name.

    It requires the Manage Roles permission for the user.
  example: []
  syntax:
    content: >-
      [Cmd("CreateRole")]

      [Aliases("CreateRole")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task CreateRole(string? roleName = null)
    parameters:
    - id: roleName
      type: System.String
      description: The name of the role to create.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: >-
      <Cmd("CreateRole")>

      <Aliases("CreateRole")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function CreateRole(roleName As String = Nothing) As Task
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.CreateRole*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: CreateRole
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CreateRole
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  nameWithType.vb: Administration.RoleCommands.CreateRole(String)
  fullName.vb: Mewdeko.Modules.Administration.Administration.RoleCommands.CreateRole(String)
  name.vb: CreateRole(String)
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.DeleteRole(Discord.IRole)
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.DeleteRole(Discord.IRole)
  id: DeleteRole(Discord.IRole)
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: DeleteRole(IRole)
  nameWithType: Administration.RoleCommands.DeleteRole(IRole)
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.DeleteRole(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: DeleteRole
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 505
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Deletes the specified role.
  remarks: >-
    This command allows administrators to delete the specified role.

    It requires the Manage Roles permission for the user.
  example: []
  syntax:
    content: >-
      [Cmd("DeleteRole")]

      [Aliases("DeleteRole")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task DeleteRole(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to delete.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: >-
      <Cmd("DeleteRole")>

      <Aliases("DeleteRole")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function DeleteRole(role As IRole) As Task
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.DeleteRole*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: DeleteRole
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DeleteRole
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.RoleHoist(Discord.IRole)
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.RoleHoist(Discord.IRole)
  id: RoleHoist(Discord.IRole)
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: RoleHoist(IRole)
  nameWithType: Administration.RoleCommands.RoleHoist(IRole)
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.RoleHoist(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RoleHoist
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 530
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Toggles the hoist status of the specified role.
  remarks: >-
    This command allows administrators to toggle the hoist status of the specified role.

    It requires the Manage Roles permission for the user.
  example: []
  syntax:
    content: >-
      [Cmd("RoleHoist")]

      [Aliases("RoleHoist")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task RoleHoist(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to toggle the hoist status for.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: >-
      <Cmd("RoleHoist")>

      <Aliases("RoleHoist")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function RoleHoist(role As IRole) As Task
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.RoleHoist*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RoleHoist
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RoleHoist
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.RoleColor(Discord.IRole)
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.RoleColor(Discord.IRole)
  id: RoleColor(Discord.IRole)
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: RoleColor(IRole)
  nameWithType: Administration.RoleCommands.RoleColor(IRole)
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.RoleColor(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RoleColor
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 555
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Displays the hexadecimal color value of the specified role.
  remarks: This command allows users to see the hexadecimal color value of the specified role.
  example: []
  syntax:
    content: >-
      [Cmd("RoleColor")]

      [Aliases("RoleColor")]

      [RequireContext(ContextType.Guild)]

      [Priority(1)]

      public Task RoleColor(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to display the color for.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: >-
      <Cmd("RoleColor")>

      <Aliases("RoleColor")>

      <RequireContext(ContextType.Guild)>

      <Priority(1)>

      Public Function RoleColor(role As IRole) As Task
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.RoleColor*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RoleColor
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RoleColor
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Discord.Commands.PriorityAttribute
    ctor: Discord.Commands.PriorityAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 1
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.RoleColor(Discord.IRole,SkiaSharp.SKColor)
  commentId: M:Mewdeko.Modules.Administration.Administration.RoleCommands.RoleColor(Discord.IRole,SkiaSharp.SKColor)
  id: RoleColor(Discord.IRole,SkiaSharp.SKColor)
  parent: Mewdeko.Modules.Administration.Administration.RoleCommands
  langs:
  - csharp
  - vb
  name: RoleColor(IRole, SKColor)
  nameWithType: Administration.RoleCommands.RoleColor(IRole, SKColor)
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.RoleColor(Discord.IRole, SkiaSharp.SKColor)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Administration/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RoleColor
    path: src/Mewdeko/Modules/Administration/RoleCommands.cs
    startLine: 570
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Administration
  summary: Changes the color of the specified role.
  remarks: >-
    This command allows administrators to change the color of the specified role.

    It requires the Manage Roles permission for the user.
  example: []
  syntax:
    content: >-
      [Cmd("RoleColor")]

      [Aliases("RoleColor")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      [Priority(0)]

      public Task RoleColor(IRole role, SKColor color)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to change the color for.
    - id: color
      type: SkiaSharp.SKColor
      description: The new color for the role.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: >-
      <Cmd("RoleColor")>

      <Aliases("RoleColor")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      <Priority(0)>

      Public Function RoleColor(role As IRole, color As SKColor) As Task
  overload: Mewdeko.Modules.Administration.Administration.RoleCommands.RoleColor*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RoleColor
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RoleColor
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Discord.Commands.PriorityAttribute
    ctor: Discord.Commands.PriorityAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 0
references:
- uid: Mewdeko.Modules.Administration
  commentId: N:Mewdeko.Modules.Administration
  href: Mewdeko.html
  name: Mewdeko.Modules.Administration
  nameWithType: Mewdeko.Modules.Administration
  fullName: Mewdeko.Modules.Administration
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Modules
    name: Modules
    href: Mewdeko.Modules.html
  - name: .
  - uid: Mewdeko.Modules.Administration
    name: Administration
    href: Mewdeko.Modules.Administration.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Modules
    name: Modules
    href: Mewdeko.Modules.html
  - name: .
  - uid: Mewdeko.Modules.Administration
    name: Administration
    href: Mewdeko.Modules.Administration.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  commentId: T:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  parent: Discord.Commands
  definition: Discord.Commands.ModuleBase`1
  name: ModuleBase<ICommandContext>
  nameWithType: ModuleBase<ICommandContext>
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>
  nameWithType.vb: ModuleBase(Of ICommandContext)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext)
  name.vb: ModuleBase(Of ICommandContext)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: <
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase
  commentId: T:Discord.Commands.ModuleBase
  parent: Discord.Commands
  isExternal: true
  name: ModuleBase
  nameWithType: ModuleBase
  fullName: Discord.Commands.ModuleBase
- uid: Mewdeko.Common.MewdekoModule
  commentId: T:Mewdeko.Common.MewdekoModule
  parent: Mewdeko.Common
  href: Mewdeko.Common.MewdekoModule.html
  name: MewdekoModule
  nameWithType: MewdekoModule
  fullName: Mewdeko.Common.MewdekoModule
- uid: Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Administration.Services.RoleCommandsService}
  commentId: T:Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Administration.Services.RoleCommandsService}
  parent: Mewdeko.Common
  definition: Mewdeko.Common.MewdekoModuleBase`1
  href: Mewdeko.Common.MewdekoModuleBase-1.html
  name: MewdekoModuleBase<RoleCommandsService>
  nameWithType: MewdekoModuleBase<RoleCommandsService>
  fullName: Mewdeko.Common.MewdekoModuleBase<Mewdeko.Modules.Administration.Services.RoleCommandsService>
  nameWithType.vb: MewdekoModuleBase(Of RoleCommandsService)
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of Mewdeko.Modules.Administration.Services.RoleCommandsService)
  name.vb: MewdekoModuleBase(Of RoleCommandsService)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: <
  - uid: Mewdeko.Modules.Administration.Services.RoleCommandsService
    name: RoleCommandsService
    href: Mewdeko.Modules.Administration.Services.RoleCommandsService.html
  - name: '>'
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Modules.Administration.Services.RoleCommandsService
    name: RoleCommandsService
    href: Mewdeko.Modules.Administration.Services.RoleCommandsService.html
  - name: )
- uid: Mewdeko.Common.MewdekoSubmodule{Mewdeko.Modules.Administration.Services.RoleCommandsService}
  commentId: T:Mewdeko.Common.MewdekoSubmodule{Mewdeko.Modules.Administration.Services.RoleCommandsService}
  parent: Mewdeko.Common
  definition: Mewdeko.Common.MewdekoSubmodule`1
  href: Mewdeko.Common.MewdekoSubmodule-1.html
  name: MewdekoSubmodule<RoleCommandsService>
  nameWithType: MewdekoSubmodule<RoleCommandsService>
  fullName: Mewdeko.Common.MewdekoSubmodule<Mewdeko.Modules.Administration.Services.RoleCommandsService>
  nameWithType.vb: MewdekoSubmodule(Of RoleCommandsService)
  fullName.vb: Mewdeko.Common.MewdekoSubmodule(Of Mewdeko.Modules.Administration.Services.RoleCommandsService)
  name.vb: MewdekoSubmodule(Of RoleCommandsService)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoSubmodule`1
    name: MewdekoSubmodule
    href: Mewdeko.Common.MewdekoSubmodule-1.html
  - name: <
  - uid: Mewdeko.Modules.Administration.Services.RoleCommandsService
    name: RoleCommandsService
    href: Mewdeko.Modules.Administration.Services.RoleCommandsService.html
  - name: '>'
  spec.vb:
  - uid: Mewdeko.Common.MewdekoSubmodule`1
    name: MewdekoSubmodule
    href: Mewdeko.Common.MewdekoSubmodule-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Modules.Administration.Services.RoleCommandsService
    name: RoleCommandsService
    href: Mewdeko.Modules.Administration.Services.RoleCommandsService.html
  - name: )
- uid: Discord.Commands.IModuleBase
  commentId: T:Discord.Commands.IModuleBase
  parent: Discord.Commands
  isExternal: true
  name: IModuleBase
  nameWithType: IModuleBase
  fullName: Discord.Commands.IModuleBase
- uid: Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Administration.Services.RoleCommandsService}.Service
  commentId: P:Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Administration.Services.RoleCommandsService}.Service
  parent: Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Administration.Services.RoleCommandsService}
  definition: Mewdeko.Common.MewdekoModuleBase`1.Service
  href: Mewdeko.Common.MewdekoModuleBase-1.html#Mewdeko_Common_MewdekoModuleBase_1_Service
  name: Service
  nameWithType: MewdekoModuleBase<RoleCommandsService>.Service
  fullName: Mewdeko.Common.MewdekoModuleBase<Mewdeko.Modules.Administration.Services.RoleCommandsService>.Service
  nameWithType.vb: MewdekoModuleBase(Of RoleCommandsService).Service
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of Mewdeko.Modules.Administration.Services.RoleCommandsService).Service
- uid: Mewdeko.Common.MewdekoModule.CultureInfo
  commentId: P:Mewdeko.Common.MewdekoModule.CultureInfo
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CultureInfo
  name: CultureInfo
  nameWithType: MewdekoModule.CultureInfo
  fullName: Mewdeko.Common.MewdekoModule.CultureInfo
- uid: Mewdeko.Common.MewdekoModule.Strings
  commentId: P:Mewdeko.Common.MewdekoModule.Strings
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_Strings
  name: Strings
  nameWithType: MewdekoModule.Strings
  fullName: Mewdeko.Common.MewdekoModule.Strings
- uid: Mewdeko.Common.MewdekoModule.Localization
  commentId: P:Mewdeko.Common.MewdekoModule.Localization
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_Localization
  name: Localization
  nameWithType: MewdekoModule.Localization
  fullName: Mewdeko.Common.MewdekoModule.Localization
- uid: Mewdeko.Common.MewdekoModule.ctx
  commentId: P:Mewdeko.Common.MewdekoModule.ctx
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ctx
  name: ctx
  nameWithType: MewdekoModule.ctx
  fullName: Mewdeko.Common.MewdekoModule.ctx
- uid: Mewdeko.Common.MewdekoModule.Config
  commentId: P:Mewdeko.Common.MewdekoModule.Config
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_Config
  name: Config
  nameWithType: MewdekoModule.Config
  fullName: Mewdeko.Common.MewdekoModule.Config
- uid: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  commentId: M:Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_BeforeExecute_Discord_Commands_CommandInfo_
  name: BeforeExecute(CommandInfo)
  nameWithType: MewdekoModule.BeforeExecute(CommandInfo)
  fullName: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
    name: BeforeExecute
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_BeforeExecute_Discord_Commands_CommandInfo_
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
    name: BeforeExecute
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_BeforeExecute_Discord_Commands_CommandInfo_
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Mewdeko.Common.MewdekoModule.GetText(System.String)
  commentId: M:Mewdeko.Common.MewdekoModule.GetText(System.String)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_
  name: GetText(string)
  nameWithType: MewdekoModule.GetText(string)
  fullName: Mewdeko.Common.MewdekoModule.GetText(string)
  nameWithType.vb: MewdekoModule.GetText(String)
  fullName.vb: Mewdeko.Common.MewdekoModule.GetText(String)
  name.vb: GetText(String)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String)
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String)
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_System_Object___
  name: GetText(string, params object[])
  nameWithType: MewdekoModule.GetText(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.GetText(string, params object[])
  nameWithType.vb: MewdekoModule.GetText(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.GetText(String, ParamArray Object())
  name.vb: GetText(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ErrorLocalizedAsync_System_String_System_Object___
  name: ErrorLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ErrorLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ErrorLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(String, ParamArray Object())
  name.vb: ErrorLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
    name: ErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
    name: ErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyErrorLocalizedAsync_System_String_System_Object___
  name: ReplyErrorLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ReplyErrorLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ReplyErrorLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(String, ParamArray Object())
  name.vb: ReplyErrorLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
    name: ReplyErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
    name: ReplyErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ConfirmLocalizedAsync_System_String_System_Object___
  name: ConfirmLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ConfirmLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ConfirmLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(String, ParamArray Object())
  name.vb: ConfirmLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
    name: ConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
    name: ConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyConfirmLocalizedAsync_System_String_System_Object___
  name: ReplyConfirmLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ReplyConfirmLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ReplyConfirmLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(String, ParamArray Object())
  name.vb: ReplyConfirmLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
    name: ReplyConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
    name: ReplyConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_System_String_System_UInt64_
  name: PromptUserConfirmAsync(string, ulong)
  nameWithType: MewdekoModule.PromptUserConfirmAsync(string, ulong)
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(string, ulong)
  nameWithType.vb: MewdekoModule.PromptUserConfirmAsync(String, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(String, ULong)
  name.vb: PromptUserConfirmAsync(String, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_System_String_System_UInt64_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_System_String_System_UInt64_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_EmbedBuilder_System_UInt64_
  name: PromptUserConfirmAsync(EmbedBuilder, ulong)
  nameWithType: MewdekoModule.PromptUserConfirmAsync(EmbedBuilder, ulong)
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder, ulong)
  nameWithType.vb: MewdekoModule.PromptUserConfirmAsync(EmbedBuilder, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder, ULong)
  name.vb: PromptUserConfirmAsync(EmbedBuilder, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  commentId: M:Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CheckRoleHierarchy_Discord_IGuildUser_System_Boolean_
  name: CheckRoleHierarchy(IGuildUser, bool)
  nameWithType: MewdekoModule.CheckRoleHierarchy(IGuildUser, bool)
  fullName: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser, bool)
  nameWithType.vb: MewdekoModule.CheckRoleHierarchy(IGuildUser, Boolean)
  fullName.vb: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser, Boolean)
  name.vb: CheckRoleHierarchy(IGuildUser, Boolean)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
    name: CheckRoleHierarchy
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CheckRoleHierarchy_Discord_IGuildUser_System_Boolean_
  - name: (
  - uid: Discord.IGuildUser
    name: IGuildUser
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
    name: CheckRoleHierarchy
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CheckRoleHierarchy_Discord_IGuildUser_System_Boolean_
  - name: (
  - uid: Discord.IGuildUser
    name: IGuildUser
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_IUserMessage_Discord_EmbedBuilder_System_UInt64_
  name: PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ulong)
  nameWithType: MewdekoModule.PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ulong)
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage, Discord.EmbedBuilder, ulong)
  nameWithType.vb: MewdekoModule.PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage, Discord.EmbedBuilder, ULong)
  name.vb: PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_IUserMessage_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_IUserMessage_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  commentId: M:Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetButtonInputAsync_System_UInt64_System_UInt64_System_UInt64_System_Boolean_
  name: GetButtonInputAsync(ulong, ulong, ulong, bool)
  nameWithType: MewdekoModule.GetButtonInputAsync(ulong, ulong, ulong, bool)
  fullName: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(ulong, ulong, ulong, bool)
  nameWithType.vb: MewdekoModule.GetButtonInputAsync(ULong, ULong, ULong, Boolean)
  fullName.vb: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(ULong, ULong, ULong, Boolean)
  name.vb: GetButtonInputAsync(ULong, ULong, ULong, Boolean)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
    name: GetButtonInputAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetButtonInputAsync_System_UInt64_System_UInt64_System_UInt64_System_Boolean_
  - name: (
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
    name: GetButtonInputAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetButtonInputAsync_System_UInt64_System_UInt64_System_UInt64_System_Boolean_
  - name: (
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextMessageAsync_System_UInt64_System_UInt64_
  name: NextMessageAsync(ulong, ulong)
  nameWithType: MewdekoModule.NextMessageAsync(ulong, ulong)
  fullName: Mewdeko.Common.MewdekoModule.NextMessageAsync(ulong, ulong)
  nameWithType.vb: MewdekoModule.NextMessageAsync(ULong, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.NextMessageAsync(ULong, ULong)
  name.vb: NextMessageAsync(ULong, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
    name: NextMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
    name: NextMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextFullMessageAsync_System_UInt64_System_UInt64_
  name: NextFullMessageAsync(ulong, ulong)
  nameWithType: MewdekoModule.NextFullMessageAsync(ulong, ulong)
  fullName: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(ulong, ulong)
  nameWithType.vb: MewdekoModule.NextFullMessageAsync(ULong, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(ULong, ULong)
  name.vb: NextFullMessageAsync(ULong, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
    name: NextFullMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextFullMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
    name: NextFullMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextFullMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  nameWithType: ModuleBase<ICommandContext>.ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.ReplyAsync(string, bool, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker[], Discord.Embed[], Discord.MessageFlags)
  nameWithType.vb: ModuleBase(Of ICommandContext).ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).ReplyAsync(String, Boolean, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker(), Discord.Embed(), Discord.MessageFlags)
  name.vb: ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  name: BeforeExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.BeforeExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).BeforeExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).BeforeExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
  name: AfterExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.AfterExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.AfterExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).AfterExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).AfterExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  name: AfterExecute(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.AfterExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.AfterExecute(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).AfterExecute(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).AfterExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  name: OnModuleBuilding(CommandService, ModuleBuilder)
  nameWithType: ModuleBase<ICommandContext>.OnModuleBuilding(CommandService, ModuleBuilder)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  nameWithType.vb: ModuleBase(Of ICommandContext).OnModuleBuilding(CommandService, ModuleBuilder)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.Context
  commentId: P:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.Context
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.Context
  name: Context
  nameWithType: ModuleBase<ICommandContext>.Context
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.Context
  nameWithType.vb: ModuleBase(Of ICommandContext).Context
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).Context
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.Mewdeko.Extensions.Extensions.ThrowIfNull``1(System.String)
  commentId: M:Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  parent: Mewdeko.Extensions.Extensions
  definition: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  name: ThrowIfNull<RoleCommands>(RoleCommands, string)
  nameWithType: Extensions.ThrowIfNull<Administration.RoleCommands>(Administration.RoleCommands, string)
  fullName: Mewdeko.Extensions.Extensions.ThrowIfNull<Mewdeko.Modules.Administration.Administration.RoleCommands>(Mewdeko.Modules.Administration.Administration.RoleCommands, string)
  nameWithType.vb: Extensions.ThrowIfNull(Of Administration.RoleCommands)(Administration.RoleCommands, String)
  fullName.vb: Mewdeko.Extensions.Extensions.ThrowIfNull(Of Mewdeko.Modules.Administration.Administration.RoleCommands)(Mewdeko.Modules.Administration.Administration.RoleCommands, String)
  name.vb: ThrowIfNull(Of RoleCommands)(RoleCommands, String)
  spec.csharp:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(Mewdeko.Modules.Administration.Administration.RoleCommands,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: <
  - uid: Mewdeko.Modules.Administration.Administration.RoleCommands
    name: RoleCommands
    href: Mewdeko.Modules.Administration.Administration.RoleCommands.html
  - name: '>'
  - name: (
  - uid: Mewdeko.Modules.Administration.Administration.RoleCommands
    name: RoleCommands
    href: Mewdeko.Modules.Administration.Administration.RoleCommands.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(Mewdeko.Modules.Administration.Administration.RoleCommands,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Modules.Administration.Administration.RoleCommands
    name: RoleCommands
    href: Mewdeko.Modules.Administration.Administration.RoleCommands.html
  - name: )
  - name: (
  - uid: Mewdeko.Modules.Administration.Administration.RoleCommands
    name: RoleCommands
    href: Mewdeko.Modules.Administration.Administration.RoleCommands.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Commands.ModuleBase`1
  commentId: T:Discord.Commands.ModuleBase`1
  isExternal: true
  name: ModuleBase<T>
  nameWithType: ModuleBase<T>
  fullName: Discord.Commands.ModuleBase<T>
  nameWithType.vb: ModuleBase(Of T)
  fullName.vb: Discord.Commands.ModuleBase(Of T)
  name.vb: ModuleBase(Of T)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Discord.Commands
  commentId: N:Discord.Commands
  isExternal: true
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
  spec.csharp:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.Commands
    name: Commands
    isExternal: true
  spec.vb:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.Commands
    name: Commands
    isExternal: true
- uid: Mewdeko.Common
  commentId: N:Mewdeko.Common
  href: Mewdeko.html
  name: Mewdeko.Common
  nameWithType: Mewdeko.Common
  fullName: Mewdeko.Common
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
- uid: Mewdeko.Common.MewdekoModuleBase`1
  commentId: T:Mewdeko.Common.MewdekoModuleBase`1
  href: Mewdeko.Common.MewdekoModuleBase-1.html
  name: MewdekoModuleBase<TService>
  nameWithType: MewdekoModuleBase<TService>
  fullName: Mewdeko.Common.MewdekoModuleBase<TService>
  nameWithType.vb: MewdekoModuleBase(Of TService)
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of TService)
  name.vb: MewdekoModuleBase(Of TService)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: <
  - name: TService
  - name: '>'
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TService
  - name: )
- uid: Mewdeko.Common.MewdekoSubmodule`1
  commentId: T:Mewdeko.Common.MewdekoSubmodule`1
  href: Mewdeko.Common.MewdekoSubmodule-1.html
  name: MewdekoSubmodule<TService>
  nameWithType: MewdekoSubmodule<TService>
  fullName: Mewdeko.Common.MewdekoSubmodule<TService>
  nameWithType.vb: MewdekoSubmodule(Of TService)
  fullName.vb: Mewdeko.Common.MewdekoSubmodule(Of TService)
  name.vb: MewdekoSubmodule(Of TService)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoSubmodule`1
    name: MewdekoSubmodule
    href: Mewdeko.Common.MewdekoSubmodule-1.html
  - name: <
  - name: TService
  - name: '>'
  spec.vb:
  - uid: Mewdeko.Common.MewdekoSubmodule`1
    name: MewdekoSubmodule
    href: Mewdeko.Common.MewdekoSubmodule-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TService
  - name: )
- uid: Mewdeko.Common.MewdekoModuleBase`1.Service
  commentId: P:Mewdeko.Common.MewdekoModuleBase`1.Service
  href: Mewdeko.Common.MewdekoModuleBase-1.html#Mewdeko_Common_MewdekoModuleBase_1_Service
  name: Service
  nameWithType: MewdekoModuleBase<TService>.Service
  fullName: Mewdeko.Common.MewdekoModuleBase<TService>.Service
  nameWithType.vb: MewdekoModuleBase(Of TService).Service
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of TService).Service
- uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  commentId: M:Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  nameWithType: ModuleBase<T>.ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  fullName: Discord.Commands.ModuleBase<T>.ReplyAsync(string, bool, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker[], Discord.Embed[], Discord.MessageFlags)
  nameWithType.vb: ModuleBase(Of T).ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  fullName.vb: Discord.Commands.ModuleBase(Of T).ReplyAsync(String, Boolean, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker(), Discord.Embed(), Discord.MessageFlags)
  name.vb: ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  isExternal: true
  name: BeforeExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<T>.BeforeExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).BeforeExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).BeforeExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
  isExternal: true
  name: AfterExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<T>.AfterExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.AfterExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).AfterExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).AfterExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  isExternal: true
  name: AfterExecute(CommandInfo)
  nameWithType: ModuleBase<T>.AfterExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.AfterExecute(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).AfterExecute(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).AfterExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  commentId: M:Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  isExternal: true
  name: OnModuleBuilding(CommandService, ModuleBuilder)
  nameWithType: ModuleBase<T>.OnModuleBuilding(CommandService, ModuleBuilder)
  fullName: Discord.Commands.ModuleBase<T>.OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  nameWithType.vb: ModuleBase(Of T).OnModuleBuilding(CommandService, ModuleBuilder)
  fullName.vb: Discord.Commands.ModuleBase(Of T).OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.Context
  commentId: P:Discord.Commands.ModuleBase`1.Context
  isExternal: true
  name: Context
  nameWithType: ModuleBase<T>.Context
  fullName: Discord.Commands.ModuleBase<T>.Context
  nameWithType.vb: ModuleBase(Of T).Context
  fullName.vb: Discord.Commands.ModuleBase(Of T).Context
- uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  commentId: M:Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  isExternal: true
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  name: ThrowIfNull<T>(T, string)
  nameWithType: Extensions.ThrowIfNull<T>(T, string)
  fullName: Mewdeko.Extensions.Extensions.ThrowIfNull<T>(T, string)
  nameWithType.vb: Extensions.ThrowIfNull(Of T)(T, String)
  fullName.vb: Mewdeko.Extensions.Extensions.ThrowIfNull(Of T)(T, String)
  name.vb: ThrowIfNull(Of T)(T, String)
  spec.csharp:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Mewdeko.Extensions.Extensions
  commentId: T:Mewdeko.Extensions.Extensions
  parent: Mewdeko.Extensions
  href: Mewdeko.Extensions.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: Mewdeko.Extensions.Extensions
- uid: Mewdeko.Extensions
  commentId: N:Mewdeko.Extensions
  href: Mewdeko.html
  name: Mewdeko.Extensions
  nameWithType: Mewdeko.Extensions
  fullName: Mewdeko.Extensions
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Extensions
    name: Extensions
    href: Mewdeko.Extensions.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Extensions
    name: Extensions
    href: Mewdeko.Extensions.html
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.#ctor*
  commentId: Overload:Mewdeko.Modules.Administration.Administration.RoleCommands.#ctor
  href: Mewdeko.Modules.Administration.Administration.RoleCommands.html#Mewdeko_Modules_Administration_Administration_RoleCommands__ctor_System_IServiceProvider_Fergun_Interactive_InteractiveService_
  name: RoleCommands
  nameWithType: Administration.RoleCommands.RoleCommands
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.RoleCommands
  nameWithType.vb: Administration.RoleCommands.New
  fullName.vb: Mewdeko.Modules.Administration.Administration.RoleCommands.New
  name.vb: New
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iserviceprovider
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: Fergun.Interactive.InteractiveService
  commentId: T:Fergun.Interactive.InteractiveService
  parent: Fergun.Interactive
  isExternal: true
  name: InteractiveService
  nameWithType: InteractiveService
  fullName: Fergun.Interactive.InteractiveService
- uid: Fergun.Interactive
  commentId: N:Fergun.Interactive
  isExternal: true
  name: Fergun.Interactive
  nameWithType: Fergun.Interactive
  fullName: Fergun.Interactive
  spec.csharp:
  - uid: Fergun
    name: Fergun
    isExternal: true
  - name: .
  - uid: Fergun.Interactive
    name: Interactive
    isExternal: true
  spec.vb:
  - uid: Fergun
    name: Fergun
    isExternal: true
  - name: .
  - uid: Fergun.Interactive
    name: Interactive
    isExternal: true
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles*
  commentId: Overload:Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles
  href: Mewdeko.Modules.Administration.Administration.RoleCommands.html#Mewdeko_Modules_Administration_Administration_RoleCommands_ReactionRoles_System_UInt64_System_String___
  name: ReactionRoles
  nameWithType: Administration.RoleCommands.ReactionRoles
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRoles
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude
  commentId: T:Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude
  parent: Mewdeko.Modules.Administration
  href: Mewdeko.Modules.Administration.Administration.html
  name: Administration.RoleCommands.Exclude
  nameWithType: Administration.RoleCommands.Exclude
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude
  spec.csharp:
  - uid: Mewdeko.Modules.Administration.Administration
    name: Administration
    href: Mewdeko.Modules.Administration.Administration.html
  - name: .
  - uid: Mewdeko.Modules.Administration.Administration.RoleCommands
    name: RoleCommands
    href: Mewdeko.Modules.Administration.Administration.RoleCommands.html
  - name: .
  - uid: Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude
    name: Exclude
    href: Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude.html
  spec.vb:
  - uid: Mewdeko.Modules.Administration.Administration
    name: Administration
    href: Mewdeko.Modules.Administration.Administration.html
  - name: .
  - uid: Mewdeko.Modules.Administration.Administration.RoleCommands
    name: RoleCommands
    href: Mewdeko.Modules.Administration.Administration.RoleCommands.html
  - name: .
  - uid: Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude
    name: Exclude
    href: Mewdeko.Modules.Administration.Administration.RoleCommands.Exclude.html
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRolesList*
  commentId: Overload:Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRolesList
  href: Mewdeko.Modules.Administration.Administration.RoleCommands.html#Mewdeko_Modules_Administration_Administration_RoleCommands_ReactionRolesList
  name: ReactionRolesList
  nameWithType: Administration.RoleCommands.ReactionRolesList
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRolesList
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRolesRemove*
  commentId: Overload:Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRolesRemove
  href: Mewdeko.Modules.Administration.Administration.RoleCommands.html#Mewdeko_Modules_Administration_Administration_RoleCommands_ReactionRolesRemove_System_Int32_
  name: ReactionRolesRemove
  nameWithType: Administration.RoleCommands.ReactionRolesRemove
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.ReactionRolesRemove
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.SetRole*
  commentId: Overload:Mewdeko.Modules.Administration.Administration.RoleCommands.SetRole
  href: Mewdeko.Modules.Administration.Administration.RoleCommands.html#Mewdeko_Modules_Administration_Administration_RoleCommands_SetRole_Discord_IRole_Discord_IGuildUser_
  name: SetRole
  nameWithType: Administration.RoleCommands.SetRole
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.SetRole
- uid: Discord.IRole
  commentId: T:Discord.IRole
  parent: Discord
  isExternal: true
  name: IRole
  nameWithType: IRole
  fullName: Discord.IRole
- uid: Discord.IGuildUser
  commentId: T:Discord.IGuildUser
  parent: Discord
  isExternal: true
  name: IGuildUser
  nameWithType: IGuildUser
  fullName: Discord.IGuildUser
- uid: Discord
  commentId: N:Discord
  isExternal: true
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveRole*
  commentId: Overload:Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveRole
  href: Mewdeko.Modules.Administration.Administration.RoleCommands.html#Mewdeko_Modules_Administration_Administration_RoleCommands_RemoveRole_Discord_IRole_Discord_IGuildUser_
  name: RemoveRole
  nameWithType: Administration.RoleCommands.RemoveRole
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveRole
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.RenameRole*
  commentId: Overload:Mewdeko.Modules.Administration.Administration.RoleCommands.RenameRole
  href: Mewdeko.Modules.Administration.Administration.RoleCommands.html#Mewdeko_Modules_Administration_Administration_RoleCommands_RenameRole_Discord_IRole_System_String_
  name: RenameRole
  nameWithType: Administration.RoleCommands.RenameRole
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.RenameRole
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveAllRoles*
  commentId: Overload:Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveAllRoles
  href: Mewdeko.Modules.Administration.Administration.RoleCommands.html#Mewdeko_Modules_Administration_Administration_RoleCommands_RemoveAllRoles_Discord_IGuildUser_
  name: RemoveAllRoles
  nameWithType: Administration.RoleCommands.RemoveAllRoles
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.RemoveAllRoles
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.CreateRole*
  commentId: Overload:Mewdeko.Modules.Administration.Administration.RoleCommands.CreateRole
  href: Mewdeko.Modules.Administration.Administration.RoleCommands.html#Mewdeko_Modules_Administration_Administration_RoleCommands_CreateRole_System_String_
  name: CreateRole
  nameWithType: Administration.RoleCommands.CreateRole
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.CreateRole
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.DeleteRole*
  commentId: Overload:Mewdeko.Modules.Administration.Administration.RoleCommands.DeleteRole
  href: Mewdeko.Modules.Administration.Administration.RoleCommands.html#Mewdeko_Modules_Administration_Administration_RoleCommands_DeleteRole_Discord_IRole_
  name: DeleteRole
  nameWithType: Administration.RoleCommands.DeleteRole
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.DeleteRole
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.RoleHoist*
  commentId: Overload:Mewdeko.Modules.Administration.Administration.RoleCommands.RoleHoist
  href: Mewdeko.Modules.Administration.Administration.RoleCommands.html#Mewdeko_Modules_Administration_Administration_RoleCommands_RoleHoist_Discord_IRole_
  name: RoleHoist
  nameWithType: Administration.RoleCommands.RoleHoist
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.RoleHoist
- uid: Mewdeko.Modules.Administration.Administration.RoleCommands.RoleColor*
  commentId: Overload:Mewdeko.Modules.Administration.Administration.RoleCommands.RoleColor
  href: Mewdeko.Modules.Administration.Administration.RoleCommands.html#Mewdeko_Modules_Administration_Administration_RoleCommands_RoleColor_Discord_IRole_
  name: RoleColor
  nameWithType: Administration.RoleCommands.RoleColor
  fullName: Mewdeko.Modules.Administration.Administration.RoleCommands.RoleColor
- uid: SkiaSharp.SKColor
  commentId: T:SkiaSharp.SKColor
  parent: SkiaSharp
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/skiasharp.skcolor
  name: SKColor
  nameWithType: SKColor
  fullName: SkiaSharp.SKColor
- uid: SkiaSharp
  commentId: N:SkiaSharp
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/skiasharp
  name: SkiaSharp
  nameWithType: SkiaSharp
  fullName: SkiaSharp
