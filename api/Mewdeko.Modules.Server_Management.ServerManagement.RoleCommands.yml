### YamlMime:ManagedReference
items:
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  commentId: T:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  id: ServerManagement.RoleCommands
  parent: Mewdeko.Modules.Server_Management
  children:
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.#ctor(Mewdeko.Services.GuildSettingsService,Mewdeko.Services.Settings.BotConfigService)
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddRoleToList(Discord.IRole)
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddRoleToRole(Discord.IRole,Discord.IRole)
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddThenRemove(Discord.IRole,Discord.IRole)
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAll(Discord.IRole)
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAllBots(Discord.IRole)
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAllUsers(Discord.IRole)
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToUsersOver(Mewdeko.Common.TypeReaders.Models.StoopidTime,Discord.IRole)
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToUsersUnder(Mewdeko.Common.TypeReaders.Models.StoopidTime,Discord.IRole)
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddUsersToRole(Discord.IRole,Discord.IUser[])
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.CreateRoles(System.String)
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.DeleteRoles(Discord.IRole[])
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.ExportRoleList
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.ImportRoleList(System.Boolean)
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAll(Discord.IRole)
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAllBots(Discord.IRole)
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAllUsers(Discord.IRole)
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromRole(Discord.IRole,Discord.IRole)
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveRoles(Discord.IGuildUser,Discord.IRole[])
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveUsersFromRole(Discord.IRole,Discord.IUser[])
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RoleJobs
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SetRoles(Discord.IGuildUser,Discord.IRole[])
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.StopJob(System.Int32)
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAll(Discord.IRole)
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAllCategories(Discord.IRole)
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAllChannels(Discord.IRole)
  langs:
  - csharp
  - vb
  name: ServerManagement.RoleCommands
  nameWithType: ServerManagement.RoleCommands
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  type: Class
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RoleCommands
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 19
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Provides commands for managing roles within a guild, including creation, deletion, synchronization, and user assignment.
  example: []
  syntax:
    content: >-
      [Group]

      public class ServerManagement.RoleCommands : MewdekoSubmodule<RoleCommandsService>, IModuleBase
    content.vb: >-
      <Group>

      Public Class ServerManagement.RoleCommands Inherits MewdekoSubmodule(Of RoleCommandsService) Implements IModuleBase
  inheritance:
  - System.Object
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  - Discord.Commands.ModuleBase
  - Mewdeko.Common.MewdekoModule
  - Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Server_Management.Services.RoleCommandsService}
  - Mewdeko.Common.MewdekoSubmodule{Mewdeko.Modules.Server_Management.Services.RoleCommandsService}
  implements:
  - Discord.Commands.IModuleBase
  inheritedMembers:
  - Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Server_Management.Services.RoleCommandsService}.Service
  - Mewdeko.Common.MewdekoModule.CultureInfo
  - Mewdeko.Common.MewdekoModule.Strings
  - Mewdeko.Common.MewdekoModule.Localization
  - Mewdeko.Common.MewdekoModule.ctx
  - Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  - Mewdeko.Common.MewdekoModule.GetText(System.String)
  - Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
  - Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  - Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  - Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  - Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  - Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
  - Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.Context
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.Mewdeko.Extensions.Extensions.ThrowIfNull``1(System.String)
  attributes:
  - type: Discord.Commands.GroupAttribute
    ctor: Discord.Commands.GroupAttribute.#ctor
    arguments: []
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.#ctor(Mewdeko.Services.GuildSettingsService,Mewdeko.Services.Settings.BotConfigService)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.#ctor(Mewdeko.Services.GuildSettingsService,Mewdeko.Services.Settings.BotConfigService)
  id: '#ctor(Mewdeko.Services.GuildSettingsService,Mewdeko.Services.Settings.BotConfigService)'
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: RoleCommands(GuildSettingsService, BotConfigService)
  nameWithType: ServerManagement.RoleCommands.RoleCommands(GuildSettingsService, BotConfigService)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RoleCommands(Mewdeko.Services.GuildSettingsService, Mewdeko.Services.Settings.BotConfigService)
  type: Constructor
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: .ctor
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 19
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Provides commands for managing roles within a guild, including creation, deletion, synchronization, and user assignment.
  example: []
  syntax:
    content: public RoleCommands(GuildSettingsService guildSettings, BotConfigService config)
    parameters:
    - id: guildSettings
      type: Mewdeko.Services.GuildSettingsService
    - id: config
      type: Mewdeko.Services.Settings.BotConfigService
    content.vb: Public Sub New(guildSettings As GuildSettingsService, config As BotConfigService)
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.#ctor*
  nameWithType.vb: ServerManagement.RoleCommands.New(GuildSettingsService, BotConfigService)
  fullName.vb: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.New(Mewdeko.Services.GuildSettingsService, Mewdeko.Services.Settings.BotConfigService)
  name.vb: New(GuildSettingsService, BotConfigService)
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.CreateRoles(System.String)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.CreateRoles(System.String)
  id: CreateRoles(System.String)
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: CreateRoles(string)
  nameWithType: ServerManagement.RoleCommands.CreateRoles(string)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.CreateRoles(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: CreateRoles
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 27
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Creates multiple roles within the guild based on a provided list of role names.
  example: []
  syntax:
    content: >-
      [Cmd("CreateRoles")]

      [Aliases("CreateRoles")]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(ChannelPermission.ManageRoles)]

      public Task CreateRoles(string roles)
    parameters:
    - id: roles
      type: System.String
      description: A space-separated list of role names to create.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("CreateRoles")>

      <Aliases("CreateRoles")>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(ChannelPermission.ManageRoles)>

      Public Function CreateRoles(roles As String) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.CreateRoles*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: CreateRoles
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CreateRoles
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.ChannelPermission)
    arguments:
    - type: Discord.ChannelPermission
      value: "268435456"
  nameWithType.vb: ServerManagement.RoleCommands.CreateRoles(String)
  fullName.vb: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.CreateRoles(String)
  name.vb: CreateRoles(String)
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAll(Discord.IRole)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAll(Discord.IRole)
  id: SyncRoleToAll(Discord.IRole)
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: SyncRoleToAll(IRole)
  nameWithType: ServerManagement.RoleCommands.SyncRoleToAll(IRole)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAll(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SyncRoleToAll
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 55
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Synchronizes a role's permissions to all text channels and categories within the guild.
  example: []
  syntax:
    content: >-
      [Cmd("SyncRoleToAll")]

      [Aliases("SyncRoleToAll")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageChannels)]

      [BotPerm(GuildPermission.ManageChannels)]

      public Task SyncRoleToAll(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to synchronize across the guild.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SyncRoleToAll")>

      <Aliases("SyncRoleToAll")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageChannels)>

      <BotPerm(GuildPermission.ManageChannels)>

      Public Function SyncRoleToAll(role As IRole) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAll*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SyncRoleToAll
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SyncRoleToAll
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "16"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "16"
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAllChannels(Discord.IRole)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAllChannels(Discord.IRole)
  id: SyncRoleToAllChannels(Discord.IRole)
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: SyncRoleToAllChannels(IRole)
  nameWithType: ServerManagement.RoleCommands.SyncRoleToAllChannels(IRole)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAllChannels(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SyncRoleToAllChannels
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 97
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Synchronizes a role's permissions to all text channels within the guild.
  example: []
  syntax:
    content: >-
      [Cmd("SyncRoleToAllChannels")]

      [Aliases("SyncRoleToAllChannels")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageChannels)]

      [BotPerm(GuildPermission.ManageChannels)]

      public Task SyncRoleToAllChannels(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to synchronize across text channels.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SyncRoleToAllChannels")>

      <Aliases("SyncRoleToAllChannels")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageChannels)>

      <BotPerm(GuildPermission.ManageChannels)>

      Public Function SyncRoleToAllChannels(role As IRole) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAllChannels*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SyncRoleToAllChannels
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SyncRoleToAllChannels
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "16"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "16"
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAllCategories(Discord.IRole)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAllCategories(Discord.IRole)
  id: SyncRoleToAllCategories(Discord.IRole)
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: SyncRoleToAllCategories(IRole)
  nameWithType: ServerManagement.RoleCommands.SyncRoleToAllCategories(IRole)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAllCategories(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SyncRoleToAllCategories
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 133
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Synchronizes a role's permissions to all categories within the guild.
  example: []
  syntax:
    content: >-
      [Cmd("SyncRoleToAllCategories")]

      [Aliases("SyncRoleToAllCategories")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageChannels)]

      [BotPerm(GuildPermission.ManageChannels)]

      public Task SyncRoleToAllCategories(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to synchronize across categories.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SyncRoleToAllCategories")>

      <Aliases("SyncRoleToAllCategories")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageChannels)>

      <BotPerm(GuildPermission.ManageChannels)>

      Public Function SyncRoleToAllCategories(role As IRole) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAllCategories*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SyncRoleToAllCategories
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SyncRoleToAllCategories
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "16"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "16"
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.DeleteRoles(Discord.IRole[])
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.DeleteRoles(Discord.IRole[])
  id: DeleteRoles(Discord.IRole[])
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: DeleteRoles(params IRole[])
  nameWithType: ServerManagement.RoleCommands.DeleteRoles(params IRole[])
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.DeleteRoles(params Discord.IRole[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: DeleteRoles
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 168
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Deletes a list of roles from the guild.
  example: []
  syntax:
    content: >-
      [Cmd("DeleteRoles")]

      [Aliases("DeleteRoles")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task DeleteRoles(params IRole[] roles)
    parameters:
    - id: roles
      type: Discord.IRole[]
      description: An array of roles to delete.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("DeleteRoles")>

      <Aliases("DeleteRoles")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function DeleteRoles(ParamArray roles As IRole()) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.DeleteRoles*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: DeleteRoles
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DeleteRoles
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  nameWithType.vb: ServerManagement.RoleCommands.DeleteRoles(ParamArray IRole())
  fullName.vb: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.DeleteRoles(ParamArray Discord.IRole())
  name.vb: DeleteRoles(ParamArray IRole())
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.StopJob(System.Int32)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.StopJob(System.Int32)
  id: StopJob(System.Int32)
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: StopJob(int)
  nameWithType: ServerManagement.RoleCommands.StopJob(int)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.StopJob(int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: StopJob
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 222
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Stops a mass role operation job by its job number.
  example: []
  syntax:
    content: >-
      [Cmd("StopJob")]

      [Aliases("StopJob")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task StopJob(int jobnum)
    parameters:
    - id: jobnum
      type: System.Int32
      description: The job number of the mass role operation to stop.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("StopJob")>

      <Aliases("StopJob")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function StopJob(jobnum As Integer) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.StopJob*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: StopJob
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: StopJob
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  nameWithType.vb: ServerManagement.RoleCommands.StopJob(Integer)
  fullName.vb: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.StopJob(Integer)
  name.vb: StopJob(Integer)
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SetRoles(Discord.IGuildUser,Discord.IRole[])
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SetRoles(Discord.IGuildUser,Discord.IRole[])
  id: SetRoles(Discord.IGuildUser,Discord.IRole[])
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: SetRoles(IGuildUser, params IRole[])
  nameWithType: ServerManagement.RoleCommands.SetRoles(IGuildUser, params IRole[])
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SetRoles(Discord.IGuildUser, params Discord.IRole[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetRoles
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 257
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Modifies the roles of a user by adding new roles and/or removing existing ones.
  example: []
  syntax:
    content: >-
      [Cmd("SetRoles")]

      [Aliases("SetRoles")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task SetRoles(IGuildUser user, params IRole[] roles)
    parameters:
    - id: user
      type: Discord.IGuildUser
      description: The user whose roles will be modified.
    - id: roles
      type: Discord.IRole[]
      description: The roles to be added to the user.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SetRoles")>

      <Aliases("SetRoles")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function SetRoles(user As IGuildUser, ParamArray roles As IRole()) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SetRoles*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SetRoles
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SetRoles
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  nameWithType.vb: ServerManagement.RoleCommands.SetRoles(IGuildUser, ParamArray IRole())
  fullName.vb: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SetRoles(Discord.IGuildUser, ParamArray Discord.IRole())
  name.vb: SetRoles(IGuildUser, ParamArray IRole())
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddUsersToRole(Discord.IRole,Discord.IUser[])
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddUsersToRole(Discord.IRole,Discord.IUser[])
  id: AddUsersToRole(Discord.IRole,Discord.IUser[])
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: AddUsersToRole(IRole, params IUser[])
  nameWithType: ServerManagement.RoleCommands.AddUsersToRole(IRole, params IUser[])
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddUsersToRole(Discord.IRole, params Discord.IUser[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AddUsersToRole
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 286
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Assigns a specific role to a list of users, adding the role if they don't already have it.
  example: []
  syntax:
    content: >-
      [Cmd("AddUsersToRole")]

      [Aliases("AddUsersToRole")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task AddUsersToRole(IRole role, params IUser[] users)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to be added to the users.
    - id: users
      type: Discord.IUser[]
      description: The users to whom the role will be added.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("AddUsersToRole")>

      <Aliases("AddUsersToRole")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function AddUsersToRole(role As IRole, ParamArray users As IUser()) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddUsersToRole*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddUsersToRole
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddUsersToRole
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  nameWithType.vb: ServerManagement.RoleCommands.AddUsersToRole(IRole, ParamArray IUser())
  fullName.vb: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddUsersToRole(Discord.IRole, ParamArray Discord.IUser())
  name.vb: AddUsersToRole(IRole, ParamArray IUser())
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveUsersFromRole(Discord.IRole,Discord.IUser[])
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveUsersFromRole(Discord.IRole,Discord.IUser[])
  id: RemoveUsersFromRole(Discord.IRole,Discord.IUser[])
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: RemoveUsersFromRole(IRole, params IUser[])
  nameWithType: ServerManagement.RoleCommands.RemoveUsersFromRole(IRole, params IUser[])
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveUsersFromRole(Discord.IRole, params Discord.IUser[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RemoveUsersFromRole
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 318
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Removes a specific role from a list of users, if they have the role.
  example: []
  syntax:
    content: >-
      [Cmd("RemoveUsersFromRole")]

      [Aliases("RemoveUsersFromRole")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task RemoveUsersFromRole(IRole role, params IUser[] users)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to be removed from the users.
    - id: users
      type: Discord.IUser[]
      description: The users from whom the role will be removed.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("RemoveUsersFromRole")>

      <Aliases("RemoveUsersFromRole")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function RemoveUsersFromRole(role As IRole, ParamArray users As IUser()) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveUsersFromRole*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemoveUsersFromRole
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemoveUsersFromRole
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  nameWithType.vb: ServerManagement.RoleCommands.RemoveUsersFromRole(IRole, ParamArray IUser())
  fullName.vb: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveUsersFromRole(Discord.IRole, ParamArray Discord.IUser())
  name.vb: RemoveUsersFromRole(IRole, ParamArray IUser())
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveRoles(Discord.IGuildUser,Discord.IRole[])
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveRoles(Discord.IGuildUser,Discord.IRole[])
  id: RemoveRoles(Discord.IGuildUser,Discord.IRole[])
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: RemoveRoles(IGuildUser, params IRole[])
  nameWithType: ServerManagement.RoleCommands.RemoveRoles(IGuildUser, params IRole[])
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveRoles(Discord.IGuildUser, params Discord.IRole[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RemoveRoles
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 350
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Removes specified roles from a user.
  example: []
  syntax:
    content: >-
      [Cmd("RemoveRoles")]

      [Aliases("RemoveRoles")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task RemoveRoles(IGuildUser user, params IRole[] roles)
    parameters:
    - id: user
      type: Discord.IGuildUser
      description: The user from whom the roles will be removed.
    - id: roles
      type: Discord.IRole[]
      description: The roles to be removed from the user.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("RemoveRoles")>

      <Aliases("RemoveRoles")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function RemoveRoles(user As IGuildUser, ParamArray roles As IRole()) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveRoles*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemoveRoles
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemoveRoles
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  nameWithType.vb: ServerManagement.RoleCommands.RemoveRoles(IGuildUser, ParamArray IRole())
  fullName.vb: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveRoles(Discord.IGuildUser, ParamArray Discord.IRole())
  name.vb: RemoveRoles(IGuildUser, ParamArray IRole())
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RoleJobs
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RoleJobs
  id: RoleJobs
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: RoleJobs()
  nameWithType: ServerManagement.RoleCommands.RoleJobs()
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RoleJobs()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RoleJobs
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 380
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Lists all ongoing mass role operations within the server, providing details about each.
  remarks: This command helps in monitoring mass role operations, offering insights into the progress, type, and initiator of each operation.
  example: []
  syntax:
    content: >-
      [Cmd("RoleJobs")]

      [Aliases("RoleJobs")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task RoleJobs()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("RoleJobs")>

      <Aliases("RoleJobs")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function RoleJobs() As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RoleJobs*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RoleJobs
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RoleJobs
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAll(Discord.IRole)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAll(Discord.IRole)
  id: AddToAll(Discord.IRole)
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: AddToAll(IRole)
  nameWithType: ServerManagement.RoleCommands.AddToAll(IRole)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAll(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AddToAll
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 425
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Adds a specified role to all server members.
  remarks: This command initiates a mass role application process, applying the specified role to every member in the server.
  example: []
  syntax:
    content: >-
      [Cmd("AddToAll")]

      [Aliases("AddToAll")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task AddToAll(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to be added to all server members.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("AddToAll")>

      <Aliases("AddToAll")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function AddToAll(role As IRole) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAll*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddToAll
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddToAll
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAllBots(Discord.IRole)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAllBots(Discord.IRole)
  id: AddToAllBots(Discord.IRole)
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: AddToAllBots(IRole)
  nameWithType: ServerManagement.RoleCommands.AddToAllBots(IRole)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAllBots(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AddToAllBots
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 513
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Adds a specified role to all bots in the server.
  remarks: This command targets only bot accounts within the server, applying the specified role to them.
  example: []
  syntax:
    content: >-
      [Cmd("AddToAllBots")]

      [Aliases("AddToAllBots")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task AddToAllBots(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to be added to all bots.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("AddToAllBots")>

      <Aliases("AddToAllBots")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function AddToAllBots(role As IRole) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAllBots*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddToAllBots
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddToAllBots
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAllUsers(Discord.IRole)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAllUsers(Discord.IRole)
  id: AddToAllUsers(Discord.IRole)
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: AddToAllUsers(IRole)
  nameWithType: ServerManagement.RoleCommands.AddToAllUsers(IRole)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAllUsers(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AddToAllUsers
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 600
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Adds a specified role to all human users in the server, excluding bots.
  remarks: This command excludes bot accounts and applies the specified role only to human members of the server.
  example: []
  syntax:
    content: >-
      [Cmd("AddToAllUsers")]

      [Aliases("AddToAllUsers")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task AddToAllUsers(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to be added to all human users.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("AddToAllUsers")>

      <Aliases("AddToAllUsers")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function AddToAllUsers(role As IRole) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAllUsers*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddToAllUsers
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddToAllUsers
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.ExportRoleList
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.ExportRoleList
  id: ExportRoleList
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: ExportRoleList()
  nameWithType: ServerManagement.RoleCommands.ExportRoleList()
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.ExportRoleList()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ExportRoleList
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 683
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Exports a list of roles and their associated users to a text file, allowing for easy backup and transfer.
  example: []
  syntax:
    content: >-
      [Cmd("ExportRoleList")]

      [Aliases("ExportRoleList")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task ExportRoleList()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ExportRoleList")>

      <Aliases("ExportRoleList")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function ExportRoleList() As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.ExportRoleList*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ExportRoleList
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ExportRoleList
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.ImportRoleList(System.Boolean)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.ImportRoleList(System.Boolean)
  id: ImportRoleList(System.Boolean)
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: ImportRoleList(bool)
  nameWithType: ServerManagement.RoleCommands.ImportRoleList(bool)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.ImportRoleList(bool)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ImportRoleList
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 724
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Imports roles and user associations from a text file, applying the specified roles to the mentioned users.
  example: []
  syntax:
    content: >-
      [Cmd("ImportRoleList")]

      [Aliases("ImportRoleList")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task ImportRoleList(bool newRoles = false)
    parameters:
    - id: newRoles
      type: System.Boolean
      description: Indicates whether new roles should be created based on the import data.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ImportRoleList")>

      <Aliases("ImportRoleList")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function ImportRoleList(newRoles As Boolean = False) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.ImportRoleList*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ImportRoleList
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ImportRoleList
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  nameWithType.vb: ServerManagement.RoleCommands.ImportRoleList(Boolean)
  fullName.vb: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.ImportRoleList(Boolean)
  name.vb: ImportRoleList(Boolean)
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddRoleToList(Discord.IRole)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddRoleToList(Discord.IRole)
  id: AddRoleToList(Discord.IRole)
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: AddRoleToList(IRole)
  nameWithType: ServerManagement.RoleCommands.AddRoleToList(IRole)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddRoleToList(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AddRoleToList
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 846
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Adds a specified role to a list of users defined in an attached file.
  remarks: This command adds a specified role to users listed in a text file attached to the command message. It streamlines the process of applying a role to a specific subset of users.
  example: []
  syntax:
    content: >-
      [Cmd("AddRoleToList")]

      [Aliases("AddRoleToList")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task AddRoleToList(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to be added to the users listed in the attached file.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("AddRoleToList")>

      <Aliases("AddRoleToList")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function AddRoleToList(role As IRole) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddRoleToList*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddRoleToList
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddRoleToList
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToUsersOver(Mewdeko.Common.TypeReaders.Models.StoopidTime,Discord.IRole)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToUsersOver(Mewdeko.Common.TypeReaders.Models.StoopidTime,Discord.IRole)
  id: AddToUsersOver(Mewdeko.Common.TypeReaders.Models.StoopidTime,Discord.IRole)
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: AddToUsersOver(StoopidTime, IRole)
  nameWithType: ServerManagement.RoleCommands.AddToUsersOver(StoopidTime, IRole)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToUsersOver(Mewdeko.Common.TypeReaders.Models.StoopidTime, Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AddToUsersOver
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 971
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Adds a specified role to all users who have been a server member for longer than a specified duration.
  remarks: This command targets users based on their membership duration, applying a role to those who have been part of the server for longer than the specified time.
  example: []
  syntax:
    content: >-
      [Cmd("AddToUsersOver")]

      [Aliases("AddToUsersOver")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task AddToUsersOver(StoopidTime time, IRole role)
    parameters:
    - id: time
      type: Mewdeko.Common.TypeReaders.Models.StoopidTime
      description: The minimum duration a user must have been a member of the server to receive the role.
    - id: role
      type: Discord.IRole
      description: The role to be added to qualifying users.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("AddToUsersOver")>

      <Aliases("AddToUsersOver")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function AddToUsersOver(time As StoopidTime, role As IRole) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToUsersOver*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddToUsersOver
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddToUsersOver
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToUsersUnder(Mewdeko.Common.TypeReaders.Models.StoopidTime,Discord.IRole)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToUsersUnder(Mewdeko.Common.TypeReaders.Models.StoopidTime,Discord.IRole)
  id: AddToUsersUnder(Mewdeko.Common.TypeReaders.Models.StoopidTime,Discord.IRole)
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: AddToUsersUnder(StoopidTime, IRole)
  nameWithType: ServerManagement.RoleCommands.AddToUsersUnder(StoopidTime, IRole)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToUsersUnder(Mewdeko.Common.TypeReaders.Models.StoopidTime, Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AddToUsersUnder
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 1063
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Adds a specified role to all users who have been a server member for shorter than a specified duration.
  remarks: Similar to 'AddToUsersOver', but targets new members by applying a role to those who have been part of the server for less than the specified time.
  example: []
  syntax:
    content: >-
      [Cmd("AddToUsersUnder")]

      [Aliases("AddToUsersUnder")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task AddToUsersUnder(StoopidTime time, IRole role)
    parameters:
    - id: time
      type: Mewdeko.Common.TypeReaders.Models.StoopidTime
      description: The maximum duration a user can have been a member of the server to receive the role.
    - id: role
      type: Discord.IRole
      description: The role to be added to qualifying users.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("AddToUsersUnder")>

      <Aliases("AddToUsersUnder")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function AddToUsersUnder(time As StoopidTime, role As IRole) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToUsersUnder*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddToUsersUnder
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddToUsersUnder
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAll(Discord.IRole)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAll(Discord.IRole)
  id: RemoveFromAll(Discord.IRole)
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: RemoveFromAll(IRole)
  nameWithType: ServerManagement.RoleCommands.RemoveFromAll(IRole)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAll(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RemoveFromAll
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 1153
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Removes a specified role from all server members.
  remarks: This command initiates a mass role removal process, removing the specified role from every member in the server.
  example: []
  syntax:
    content: >-
      [Cmd("RemoveFromAll")]

      [Aliases("RemoveFromAll")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task RemoveFromAll(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to be removed from all server members.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("RemoveFromAll")>

      <Aliases("RemoveFromAll")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function RemoveFromAll(role As IRole) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAll*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemoveFromAll
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemoveFromAll
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAllUsers(Discord.IRole)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAllUsers(Discord.IRole)
  id: RemoveFromAllUsers(Discord.IRole)
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: RemoveFromAllUsers(IRole)
  nameWithType: ServerManagement.RoleCommands.RemoveFromAllUsers(IRole)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAllUsers(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RemoveFromAllUsers
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 1240
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Removes a specified role from all human users, excluding bots.
  remarks: This command targets only human members for role removal, allowing bots to retain their assigned roles. It's useful for adjusting roles among human users without affecting bots' configurations.
  example: []
  syntax:
    content: >-
      [Cmd("RemoveFromAllUsers")]

      [Aliases("RemoveFromAllUsers")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task RemoveFromAllUsers(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to be removed from all human members.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("RemoveFromAllUsers")>

      <Aliases("RemoveFromAllUsers")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function RemoveFromAllUsers(role As IRole) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAllUsers*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemoveFromAllUsers
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemoveFromAllUsers
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAllBots(Discord.IRole)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAllBots(Discord.IRole)
  id: RemoveFromAllBots(Discord.IRole)
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: RemoveFromAllBots(IRole)
  nameWithType: ServerManagement.RoleCommands.RemoveFromAllBots(IRole)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAllBots(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RemoveFromAllBots
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 1327
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Removes a specified role from all bots in the server.
  remarks: This command is specifically designed to remove a role from bot accounts only, leaving human users' roles intact. Ideal for managing bot permissions collectively.
  example: []
  syntax:
    content: >-
      [Cmd("RemoveFromAllBots")]

      [Aliases("RemoveFromAllBots")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task RemoveFromAllBots(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to be removed from all bots.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("RemoveFromAllBots")>

      <Aliases("RemoveFromAllBots")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function RemoveFromAllBots(role As IRole) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAllBots*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemoveFromAllBots
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemoveFromAllBots
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddRoleToRole(Discord.IRole,Discord.IRole)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddRoleToRole(Discord.IRole,Discord.IRole)
  id: AddRoleToRole(Discord.IRole,Discord.IRole)
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: AddRoleToRole(IRole, IRole)
  nameWithType: ServerManagement.RoleCommands.AddRoleToRole(IRole, IRole)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddRoleToRole(Discord.IRole, Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AddRoleToRole
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 1415
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Adds a specified role to all users who currently have another specified role.
  remarks: This command allows for the targeted application of a role based on existing role memberships, enabling administrators to dynamically adjust role assignments based on evolving server roles and user groups.
  example: []
  syntax:
    content: >-
      [Cmd("AddRoleToRole")]

      [Aliases("AddRoleToRole")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task AddRoleToRole(IRole role, IRole role2)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to add.
    - id: role2
      type: Discord.IRole
      description: The role whose members will receive the new role.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("AddRoleToRole")>

      <Aliases("AddRoleToRole")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function AddRoleToRole(role As IRole, role2 As IRole) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddRoleToRole*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddRoleToRole
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddRoleToRole
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromRole(Discord.IRole,Discord.IRole)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromRole(Discord.IRole,Discord.IRole)
  id: RemoveFromRole(Discord.IRole,Discord.IRole)
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: RemoveFromRole(IRole, IRole)
  nameWithType: ServerManagement.RoleCommands.RemoveFromRole(IRole, IRole)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromRole(Discord.IRole, Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RemoveFromRole
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 1505
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Removes a specified role from all users who currently have another specified role.
  remarks: Facilitates the cleaning or reorganization of roles within the server by removing a role from users based on their membership in another role. This is particularly useful in situations where roles need to be reassigned or permissions updated en masse.
  example: []
  syntax:
    content: >-
      [Cmd("RemoveFromRole")]

      [Aliases("RemoveFromRole")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task RemoveFromRole(IRole role, IRole role2)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to remove from users.
    - id: role2
      type: Discord.IRole
      description: The role whose members will have the first role removed.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("RemoveFromRole")>

      <Aliases("RemoveFromRole")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function RemoveFromRole(role As IRole, role2 As IRole) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromRole*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemoveFromRole
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemoveFromRole
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddThenRemove(Discord.IRole,Discord.IRole)
  commentId: M:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddThenRemove(Discord.IRole,Discord.IRole)
  id: AddThenRemove(Discord.IRole,Discord.IRole)
  parent: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
  langs:
  - csharp
  - vb
  name: AddThenRemove(IRole, IRole)
  nameWithType: ServerManagement.RoleCommands.AddThenRemove(IRole, IRole)
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddThenRemove(Discord.IRole, Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AddThenRemove
    path: src/Mewdeko/Modules/Server Management/RoleCommands.cs
    startLine: 1588
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Server_Management
  summary: Adds a role to users and then removes a different role from them in one operation.
  remarks: This command combines role addition and removal into a single step for users who have a specific role, streamlining the process of updating user roles and permissions. It's especially useful during role transitions or server restructurings.
  example: []
  syntax:
    content: >-
      [Cmd("AddThenRemove")]

      [Aliases("AddThenRemove")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageRoles)]

      [BotPerm(GuildPermission.ManageRoles)]

      public Task AddThenRemove(IRole role, IRole role2)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to add to the users.
    - id: role2
      type: Discord.IRole
      description: The role to remove from the same users.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("AddThenRemove")>

      <Aliases("AddThenRemove")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageRoles)>

      <BotPerm(GuildPermission.ManageRoles)>

      Public Function AddThenRemove(role As IRole, role2 As IRole) As Task
  overload: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddThenRemove*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddThenRemove
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddThenRemove
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
  - type: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.BotPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "268435456"
references:
- uid: Mewdeko.Modules.Server_Management
  commentId: N:Mewdeko.Modules.Server_Management
  href: Mewdeko.html
  name: Mewdeko.Modules.Server_Management
  nameWithType: Mewdeko.Modules.Server_Management
  fullName: Mewdeko.Modules.Server_Management
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Modules
    name: Modules
    href: Mewdeko.Modules.html
  - name: .
  - uid: Mewdeko.Modules.Server_Management
    name: Server_Management
    href: Mewdeko.Modules.Server_Management.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Modules
    name: Modules
    href: Mewdeko.Modules.html
  - name: .
  - uid: Mewdeko.Modules.Server_Management
    name: Server_Management
    href: Mewdeko.Modules.Server_Management.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  commentId: T:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  parent: Discord.Commands
  definition: Discord.Commands.ModuleBase`1
  name: ModuleBase<ICommandContext>
  nameWithType: ModuleBase<ICommandContext>
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>
  nameWithType.vb: ModuleBase(Of ICommandContext)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext)
  name.vb: ModuleBase(Of ICommandContext)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: <
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase
  commentId: T:Discord.Commands.ModuleBase
  parent: Discord.Commands
  isExternal: true
  name: ModuleBase
  nameWithType: ModuleBase
  fullName: Discord.Commands.ModuleBase
- uid: Mewdeko.Common.MewdekoModule
  commentId: T:Mewdeko.Common.MewdekoModule
  parent: Mewdeko.Common
  href: Mewdeko.Common.MewdekoModule.html
  name: MewdekoModule
  nameWithType: MewdekoModule
  fullName: Mewdeko.Common.MewdekoModule
- uid: Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Server_Management.Services.RoleCommandsService}
  commentId: T:Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Server_Management.Services.RoleCommandsService}
  parent: Mewdeko.Common
  definition: Mewdeko.Common.MewdekoModuleBase`1
  href: Mewdeko.Common.MewdekoModuleBase-1.html
  name: MewdekoModuleBase<RoleCommandsService>
  nameWithType: MewdekoModuleBase<RoleCommandsService>
  fullName: Mewdeko.Common.MewdekoModuleBase<Mewdeko.Modules.Server_Management.Services.RoleCommandsService>
  nameWithType.vb: MewdekoModuleBase(Of RoleCommandsService)
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of Mewdeko.Modules.Server_Management.Services.RoleCommandsService)
  name.vb: MewdekoModuleBase(Of RoleCommandsService)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: <
  - uid: Mewdeko.Modules.Server_Management.Services.RoleCommandsService
    name: RoleCommandsService
    href: Mewdeko.Modules.Server_Management.Services.RoleCommandsService.html
  - name: '>'
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Modules.Server_Management.Services.RoleCommandsService
    name: RoleCommandsService
    href: Mewdeko.Modules.Server_Management.Services.RoleCommandsService.html
  - name: )
- uid: Mewdeko.Common.MewdekoSubmodule{Mewdeko.Modules.Server_Management.Services.RoleCommandsService}
  commentId: T:Mewdeko.Common.MewdekoSubmodule{Mewdeko.Modules.Server_Management.Services.RoleCommandsService}
  parent: Mewdeko.Common
  definition: Mewdeko.Common.MewdekoSubmodule`1
  href: Mewdeko.Common.MewdekoSubmodule-1.html
  name: MewdekoSubmodule<RoleCommandsService>
  nameWithType: MewdekoSubmodule<RoleCommandsService>
  fullName: Mewdeko.Common.MewdekoSubmodule<Mewdeko.Modules.Server_Management.Services.RoleCommandsService>
  nameWithType.vb: MewdekoSubmodule(Of RoleCommandsService)
  fullName.vb: Mewdeko.Common.MewdekoSubmodule(Of Mewdeko.Modules.Server_Management.Services.RoleCommandsService)
  name.vb: MewdekoSubmodule(Of RoleCommandsService)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoSubmodule`1
    name: MewdekoSubmodule
    href: Mewdeko.Common.MewdekoSubmodule-1.html
  - name: <
  - uid: Mewdeko.Modules.Server_Management.Services.RoleCommandsService
    name: RoleCommandsService
    href: Mewdeko.Modules.Server_Management.Services.RoleCommandsService.html
  - name: '>'
  spec.vb:
  - uid: Mewdeko.Common.MewdekoSubmodule`1
    name: MewdekoSubmodule
    href: Mewdeko.Common.MewdekoSubmodule-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Modules.Server_Management.Services.RoleCommandsService
    name: RoleCommandsService
    href: Mewdeko.Modules.Server_Management.Services.RoleCommandsService.html
  - name: )
- uid: Discord.Commands.IModuleBase
  commentId: T:Discord.Commands.IModuleBase
  parent: Discord.Commands
  isExternal: true
  name: IModuleBase
  nameWithType: IModuleBase
  fullName: Discord.Commands.IModuleBase
- uid: Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Server_Management.Services.RoleCommandsService}.Service
  commentId: P:Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Server_Management.Services.RoleCommandsService}.Service
  parent: Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Server_Management.Services.RoleCommandsService}
  definition: Mewdeko.Common.MewdekoModuleBase`1.Service
  href: Mewdeko.Common.MewdekoModuleBase-1.html#Mewdeko_Common_MewdekoModuleBase_1_Service
  name: Service
  nameWithType: MewdekoModuleBase<RoleCommandsService>.Service
  fullName: Mewdeko.Common.MewdekoModuleBase<Mewdeko.Modules.Server_Management.Services.RoleCommandsService>.Service
  nameWithType.vb: MewdekoModuleBase(Of RoleCommandsService).Service
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of Mewdeko.Modules.Server_Management.Services.RoleCommandsService).Service
- uid: Mewdeko.Common.MewdekoModule.CultureInfo
  commentId: P:Mewdeko.Common.MewdekoModule.CultureInfo
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CultureInfo
  name: CultureInfo
  nameWithType: MewdekoModule.CultureInfo
  fullName: Mewdeko.Common.MewdekoModule.CultureInfo
- uid: Mewdeko.Common.MewdekoModule.Strings
  commentId: P:Mewdeko.Common.MewdekoModule.Strings
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_Strings
  name: Strings
  nameWithType: MewdekoModule.Strings
  fullName: Mewdeko.Common.MewdekoModule.Strings
- uid: Mewdeko.Common.MewdekoModule.Localization
  commentId: P:Mewdeko.Common.MewdekoModule.Localization
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_Localization
  name: Localization
  nameWithType: MewdekoModule.Localization
  fullName: Mewdeko.Common.MewdekoModule.Localization
- uid: Mewdeko.Common.MewdekoModule.ctx
  commentId: P:Mewdeko.Common.MewdekoModule.ctx
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ctx
  name: ctx
  nameWithType: MewdekoModule.ctx
  fullName: Mewdeko.Common.MewdekoModule.ctx
- uid: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  commentId: M:Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_BeforeExecute_Discord_Commands_CommandInfo_
  name: BeforeExecute(CommandInfo)
  nameWithType: MewdekoModule.BeforeExecute(CommandInfo)
  fullName: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
    name: BeforeExecute
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_BeforeExecute_Discord_Commands_CommandInfo_
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
    name: BeforeExecute
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_BeforeExecute_Discord_Commands_CommandInfo_
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Mewdeko.Common.MewdekoModule.GetText(System.String)
  commentId: M:Mewdeko.Common.MewdekoModule.GetText(System.String)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_
  name: GetText(string)
  nameWithType: MewdekoModule.GetText(string)
  fullName: Mewdeko.Common.MewdekoModule.GetText(string)
  nameWithType.vb: MewdekoModule.GetText(String)
  fullName.vb: Mewdeko.Common.MewdekoModule.GetText(String)
  name.vb: GetText(String)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String)
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String)
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_System_Object___
  name: GetText(string, params object[])
  nameWithType: MewdekoModule.GetText(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.GetText(string, params object[])
  nameWithType.vb: MewdekoModule.GetText(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.GetText(String, ParamArray Object())
  name.vb: GetText(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ErrorLocalizedAsync_System_String_System_Object___
  name: ErrorLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ErrorLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ErrorLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(String, ParamArray Object())
  name.vb: ErrorLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
    name: ErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
    name: ErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyErrorLocalizedAsync_System_String_System_Object___
  name: ReplyErrorLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ReplyErrorLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ReplyErrorLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(String, ParamArray Object())
  name.vb: ReplyErrorLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
    name: ReplyErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
    name: ReplyErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ConfirmLocalizedAsync_System_String_System_Object___
  name: ConfirmLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ConfirmLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ConfirmLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(String, ParamArray Object())
  name.vb: ConfirmLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
    name: ConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
    name: ConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyConfirmLocalizedAsync_System_String_System_Object___
  name: ReplyConfirmLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ReplyConfirmLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ReplyConfirmLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(String, ParamArray Object())
  name.vb: ReplyConfirmLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
    name: ReplyConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
    name: ReplyConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_System_String_System_UInt64_
  name: PromptUserConfirmAsync(string, ulong)
  nameWithType: MewdekoModule.PromptUserConfirmAsync(string, ulong)
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(string, ulong)
  nameWithType.vb: MewdekoModule.PromptUserConfirmAsync(String, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(String, ULong)
  name.vb: PromptUserConfirmAsync(String, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_System_String_System_UInt64_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_System_String_System_UInt64_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_EmbedBuilder_System_UInt64_
  name: PromptUserConfirmAsync(EmbedBuilder, ulong)
  nameWithType: MewdekoModule.PromptUserConfirmAsync(EmbedBuilder, ulong)
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder, ulong)
  nameWithType.vb: MewdekoModule.PromptUserConfirmAsync(EmbedBuilder, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder, ULong)
  name.vb: PromptUserConfirmAsync(EmbedBuilder, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  commentId: M:Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CheckRoleHierarchy_Discord_IGuildUser_System_Boolean_
  name: CheckRoleHierarchy(IGuildUser, bool)
  nameWithType: MewdekoModule.CheckRoleHierarchy(IGuildUser, bool)
  fullName: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser, bool)
  nameWithType.vb: MewdekoModule.CheckRoleHierarchy(IGuildUser, Boolean)
  fullName.vb: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser, Boolean)
  name.vb: CheckRoleHierarchy(IGuildUser, Boolean)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
    name: CheckRoleHierarchy
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CheckRoleHierarchy_Discord_IGuildUser_System_Boolean_
  - name: (
  - uid: Discord.IGuildUser
    name: IGuildUser
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
    name: CheckRoleHierarchy
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CheckRoleHierarchy_Discord_IGuildUser_System_Boolean_
  - name: (
  - uid: Discord.IGuildUser
    name: IGuildUser
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_IUserMessage_Discord_EmbedBuilder_System_UInt64_
  name: PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ulong)
  nameWithType: MewdekoModule.PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ulong)
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage, Discord.EmbedBuilder, ulong)
  nameWithType.vb: MewdekoModule.PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage, Discord.EmbedBuilder, ULong)
  name.vb: PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_IUserMessage_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_IUserMessage_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  commentId: M:Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetButtonInputAsync_System_UInt64_System_UInt64_System_UInt64_System_Boolean_
  name: GetButtonInputAsync(ulong, ulong, ulong, bool)
  nameWithType: MewdekoModule.GetButtonInputAsync(ulong, ulong, ulong, bool)
  fullName: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(ulong, ulong, ulong, bool)
  nameWithType.vb: MewdekoModule.GetButtonInputAsync(ULong, ULong, ULong, Boolean)
  fullName.vb: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(ULong, ULong, ULong, Boolean)
  name.vb: GetButtonInputAsync(ULong, ULong, ULong, Boolean)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
    name: GetButtonInputAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetButtonInputAsync_System_UInt64_System_UInt64_System_UInt64_System_Boolean_
  - name: (
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
    name: GetButtonInputAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetButtonInputAsync_System_UInt64_System_UInt64_System_UInt64_System_Boolean_
  - name: (
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextMessageAsync_System_UInt64_System_UInt64_
  name: NextMessageAsync(ulong, ulong)
  nameWithType: MewdekoModule.NextMessageAsync(ulong, ulong)
  fullName: Mewdeko.Common.MewdekoModule.NextMessageAsync(ulong, ulong)
  nameWithType.vb: MewdekoModule.NextMessageAsync(ULong, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.NextMessageAsync(ULong, ULong)
  name.vb: NextMessageAsync(ULong, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
    name: NextMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
    name: NextMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextFullMessageAsync_System_UInt64_System_UInt64_
  name: NextFullMessageAsync(ulong, ulong)
  nameWithType: MewdekoModule.NextFullMessageAsync(ulong, ulong)
  fullName: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(ulong, ulong)
  nameWithType.vb: MewdekoModule.NextFullMessageAsync(ULong, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(ULong, ULong)
  name.vb: NextFullMessageAsync(ULong, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
    name: NextFullMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextFullMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
    name: NextFullMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextFullMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  nameWithType: ModuleBase<ICommandContext>.ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.ReplyAsync(string, bool, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker[], Discord.Embed[], Discord.MessageFlags)
  nameWithType.vb: ModuleBase(Of ICommandContext).ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).ReplyAsync(String, Boolean, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker(), Discord.Embed(), Discord.MessageFlags)
  name.vb: ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  name: BeforeExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.BeforeExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).BeforeExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).BeforeExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
  name: AfterExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.AfterExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.AfterExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).AfterExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).AfterExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  name: AfterExecute(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.AfterExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.AfterExecute(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).AfterExecute(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).AfterExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  name: OnModuleBuilding(CommandService, ModuleBuilder)
  nameWithType: ModuleBase<ICommandContext>.OnModuleBuilding(CommandService, ModuleBuilder)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  nameWithType.vb: ModuleBase(Of ICommandContext).OnModuleBuilding(CommandService, ModuleBuilder)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.Context
  commentId: P:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.Context
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.Context
  name: Context
  nameWithType: ModuleBase<ICommandContext>.Context
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.Context
  nameWithType.vb: ModuleBase(Of ICommandContext).Context
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).Context
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.Mewdeko.Extensions.Extensions.ThrowIfNull``1(System.String)
  commentId: M:Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  parent: Mewdeko.Extensions.Extensions
  definition: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  name: ThrowIfNull<RoleCommands>(RoleCommands, string)
  nameWithType: Extensions.ThrowIfNull<ServerManagement.RoleCommands>(ServerManagement.RoleCommands, string)
  fullName: Mewdeko.Extensions.Extensions.ThrowIfNull<Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands>(Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands, string)
  nameWithType.vb: Extensions.ThrowIfNull(Of ServerManagement.RoleCommands)(ServerManagement.RoleCommands, String)
  fullName.vb: Mewdeko.Extensions.Extensions.ThrowIfNull(Of Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands)(Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands, String)
  name.vb: ThrowIfNull(Of RoleCommands)(RoleCommands, String)
  spec.csharp:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: <
  - uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
    name: RoleCommands
    href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html
  - name: '>'
  - name: (
  - uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
    name: RoleCommands
    href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
    name: RoleCommands
    href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html
  - name: )
  - name: (
  - uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands
    name: RoleCommands
    href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Commands.ModuleBase`1
  commentId: T:Discord.Commands.ModuleBase`1
  isExternal: true
  name: ModuleBase<T>
  nameWithType: ModuleBase<T>
  fullName: Discord.Commands.ModuleBase<T>
  nameWithType.vb: ModuleBase(Of T)
  fullName.vb: Discord.Commands.ModuleBase(Of T)
  name.vb: ModuleBase(Of T)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Discord.Commands
  commentId: N:Discord.Commands
  isExternal: true
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
  spec.csharp:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.Commands
    name: Commands
    isExternal: true
  spec.vb:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.Commands
    name: Commands
    isExternal: true
- uid: Mewdeko.Common
  commentId: N:Mewdeko.Common
  href: Mewdeko.html
  name: Mewdeko.Common
  nameWithType: Mewdeko.Common
  fullName: Mewdeko.Common
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
- uid: Mewdeko.Common.MewdekoModuleBase`1
  commentId: T:Mewdeko.Common.MewdekoModuleBase`1
  href: Mewdeko.Common.MewdekoModuleBase-1.html
  name: MewdekoModuleBase<TService>
  nameWithType: MewdekoModuleBase<TService>
  fullName: Mewdeko.Common.MewdekoModuleBase<TService>
  nameWithType.vb: MewdekoModuleBase(Of TService)
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of TService)
  name.vb: MewdekoModuleBase(Of TService)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: <
  - name: TService
  - name: '>'
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TService
  - name: )
- uid: Mewdeko.Common.MewdekoSubmodule`1
  commentId: T:Mewdeko.Common.MewdekoSubmodule`1
  href: Mewdeko.Common.MewdekoSubmodule-1.html
  name: MewdekoSubmodule<TService>
  nameWithType: MewdekoSubmodule<TService>
  fullName: Mewdeko.Common.MewdekoSubmodule<TService>
  nameWithType.vb: MewdekoSubmodule(Of TService)
  fullName.vb: Mewdeko.Common.MewdekoSubmodule(Of TService)
  name.vb: MewdekoSubmodule(Of TService)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoSubmodule`1
    name: MewdekoSubmodule
    href: Mewdeko.Common.MewdekoSubmodule-1.html
  - name: <
  - name: TService
  - name: '>'
  spec.vb:
  - uid: Mewdeko.Common.MewdekoSubmodule`1
    name: MewdekoSubmodule
    href: Mewdeko.Common.MewdekoSubmodule-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TService
  - name: )
- uid: Mewdeko.Common.MewdekoModuleBase`1.Service
  commentId: P:Mewdeko.Common.MewdekoModuleBase`1.Service
  href: Mewdeko.Common.MewdekoModuleBase-1.html#Mewdeko_Common_MewdekoModuleBase_1_Service
  name: Service
  nameWithType: MewdekoModuleBase<TService>.Service
  fullName: Mewdeko.Common.MewdekoModuleBase<TService>.Service
  nameWithType.vb: MewdekoModuleBase(Of TService).Service
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of TService).Service
- uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  commentId: M:Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  nameWithType: ModuleBase<T>.ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  fullName: Discord.Commands.ModuleBase<T>.ReplyAsync(string, bool, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker[], Discord.Embed[], Discord.MessageFlags)
  nameWithType.vb: ModuleBase(Of T).ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  fullName.vb: Discord.Commands.ModuleBase(Of T).ReplyAsync(String, Boolean, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker(), Discord.Embed(), Discord.MessageFlags)
  name.vb: ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  isExternal: true
  name: BeforeExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<T>.BeforeExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).BeforeExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).BeforeExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
  isExternal: true
  name: AfterExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<T>.AfterExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.AfterExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).AfterExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).AfterExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  isExternal: true
  name: AfterExecute(CommandInfo)
  nameWithType: ModuleBase<T>.AfterExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.AfterExecute(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).AfterExecute(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).AfterExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  commentId: M:Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  isExternal: true
  name: OnModuleBuilding(CommandService, ModuleBuilder)
  nameWithType: ModuleBase<T>.OnModuleBuilding(CommandService, ModuleBuilder)
  fullName: Discord.Commands.ModuleBase<T>.OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  nameWithType.vb: ModuleBase(Of T).OnModuleBuilding(CommandService, ModuleBuilder)
  fullName.vb: Discord.Commands.ModuleBase(Of T).OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.Context
  commentId: P:Discord.Commands.ModuleBase`1.Context
  isExternal: true
  name: Context
  nameWithType: ModuleBase<T>.Context
  fullName: Discord.Commands.ModuleBase<T>.Context
  nameWithType.vb: ModuleBase(Of T).Context
  fullName.vb: Discord.Commands.ModuleBase(Of T).Context
- uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  commentId: M:Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  isExternal: true
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  name: ThrowIfNull<T>(T, string)
  nameWithType: Extensions.ThrowIfNull<T>(T, string)
  fullName: Mewdeko.Extensions.Extensions.ThrowIfNull<T>(T, string)
  nameWithType.vb: Extensions.ThrowIfNull(Of T)(T, String)
  fullName.vb: Mewdeko.Extensions.Extensions.ThrowIfNull(Of T)(T, String)
  name.vb: ThrowIfNull(Of T)(T, String)
  spec.csharp:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Mewdeko.Extensions.Extensions
  commentId: T:Mewdeko.Extensions.Extensions
  parent: Mewdeko.Extensions
  href: Mewdeko.Extensions.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: Mewdeko.Extensions.Extensions
- uid: Mewdeko.Extensions
  commentId: N:Mewdeko.Extensions
  href: Mewdeko.html
  name: Mewdeko.Extensions
  nameWithType: Mewdeko.Extensions
  fullName: Mewdeko.Extensions
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Extensions
    name: Extensions
    href: Mewdeko.Extensions.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Extensions
    name: Extensions
    href: Mewdeko.Extensions.html
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.#ctor*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.#ctor
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands__ctor_Mewdeko_Services_GuildSettingsService_Mewdeko_Services_Settings_BotConfigService_
  name: RoleCommands
  nameWithType: ServerManagement.RoleCommands.RoleCommands
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RoleCommands
  nameWithType.vb: ServerManagement.RoleCommands.New
  fullName.vb: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.New
  name.vb: New
- uid: Mewdeko.Services.GuildSettingsService
  commentId: T:Mewdeko.Services.GuildSettingsService
  parent: Mewdeko.Services
  href: Mewdeko.Services.GuildSettingsService.html
  name: GuildSettingsService
  nameWithType: GuildSettingsService
  fullName: Mewdeko.Services.GuildSettingsService
- uid: Mewdeko.Services.Settings.BotConfigService
  commentId: T:Mewdeko.Services.Settings.BotConfigService
  parent: Mewdeko.Services.Settings
  href: Mewdeko.Services.Settings.BotConfigService.html
  name: BotConfigService
  nameWithType: BotConfigService
  fullName: Mewdeko.Services.Settings.BotConfigService
- uid: Mewdeko.Services
  commentId: N:Mewdeko.Services
  href: Mewdeko.html
  name: Mewdeko.Services
  nameWithType: Mewdeko.Services
  fullName: Mewdeko.Services
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
- uid: Mewdeko.Services.Settings
  commentId: N:Mewdeko.Services.Settings
  href: Mewdeko.html
  name: Mewdeko.Services.Settings
  nameWithType: Mewdeko.Services.Settings
  fullName: Mewdeko.Services.Settings
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
  - name: .
  - uid: Mewdeko.Services.Settings
    name: Settings
    href: Mewdeko.Services.Settings.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
  - name: .
  - uid: Mewdeko.Services.Settings
    name: Settings
    href: Mewdeko.Services.Settings.html
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.CreateRoles*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.CreateRoles
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_CreateRoles_System_String_
  name: CreateRoles
  nameWithType: ServerManagement.RoleCommands.CreateRoles
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.CreateRoles
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAll*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAll
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_SyncRoleToAll_Discord_IRole_
  name: SyncRoleToAll
  nameWithType: ServerManagement.RoleCommands.SyncRoleToAll
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAll
- uid: Discord.IRole
  commentId: T:Discord.IRole
  parent: Discord
  isExternal: true
  name: IRole
  nameWithType: IRole
  fullName: Discord.IRole
- uid: Discord
  commentId: N:Discord
  isExternal: true
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAllChannels*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAllChannels
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_SyncRoleToAllChannels_Discord_IRole_
  name: SyncRoleToAllChannels
  nameWithType: ServerManagement.RoleCommands.SyncRoleToAllChannels
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAllChannels
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAllCategories*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAllCategories
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_SyncRoleToAllCategories_Discord_IRole_
  name: SyncRoleToAllCategories
  nameWithType: ServerManagement.RoleCommands.SyncRoleToAllCategories
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SyncRoleToAllCategories
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.DeleteRoles*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.DeleteRoles
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_DeleteRoles_Discord_IRole___
  name: DeleteRoles
  nameWithType: ServerManagement.RoleCommands.DeleteRoles
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.DeleteRoles
- uid: Discord.IRole[]
  isExternal: true
  name: IRole[]
  nameWithType: IRole[]
  fullName: Discord.IRole[]
  nameWithType.vb: IRole()
  fullName.vb: Discord.IRole()
  name.vb: IRole()
  spec.csharp:
  - uid: Discord.IRole
    name: IRole
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Discord.IRole
    name: IRole
    isExternal: true
  - name: (
  - name: )
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.StopJob*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.StopJob
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_StopJob_System_Int32_
  name: StopJob
  nameWithType: ServerManagement.RoleCommands.StopJob
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.StopJob
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SetRoles*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SetRoles
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_SetRoles_Discord_IGuildUser_Discord_IRole___
  name: SetRoles
  nameWithType: ServerManagement.RoleCommands.SetRoles
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.SetRoles
- uid: Discord.IGuildUser
  commentId: T:Discord.IGuildUser
  parent: Discord
  isExternal: true
  name: IGuildUser
  nameWithType: IGuildUser
  fullName: Discord.IGuildUser
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddUsersToRole*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddUsersToRole
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_AddUsersToRole_Discord_IRole_Discord_IUser___
  name: AddUsersToRole
  nameWithType: ServerManagement.RoleCommands.AddUsersToRole
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddUsersToRole
- uid: Discord.IUser[]
  isExternal: true
  name: IUser[]
  nameWithType: IUser[]
  fullName: Discord.IUser[]
  nameWithType.vb: IUser()
  fullName.vb: Discord.IUser()
  name.vb: IUser()
  spec.csharp:
  - uid: Discord.IUser
    name: IUser
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Discord.IUser
    name: IUser
    isExternal: true
  - name: (
  - name: )
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveUsersFromRole*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveUsersFromRole
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_RemoveUsersFromRole_Discord_IRole_Discord_IUser___
  name: RemoveUsersFromRole
  nameWithType: ServerManagement.RoleCommands.RemoveUsersFromRole
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveUsersFromRole
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveRoles*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveRoles
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_RemoveRoles_Discord_IGuildUser_Discord_IRole___
  name: RemoveRoles
  nameWithType: ServerManagement.RoleCommands.RemoveRoles
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveRoles
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RoleJobs*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RoleJobs
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_RoleJobs
  name: RoleJobs
  nameWithType: ServerManagement.RoleCommands.RoleJobs
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RoleJobs
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAll*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAll
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_AddToAll_Discord_IRole_
  name: AddToAll
  nameWithType: ServerManagement.RoleCommands.AddToAll
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAll
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAllBots*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAllBots
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_AddToAllBots_Discord_IRole_
  name: AddToAllBots
  nameWithType: ServerManagement.RoleCommands.AddToAllBots
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAllBots
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAllUsers*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAllUsers
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_AddToAllUsers_Discord_IRole_
  name: AddToAllUsers
  nameWithType: ServerManagement.RoleCommands.AddToAllUsers
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToAllUsers
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.ExportRoleList*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.ExportRoleList
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_ExportRoleList
  name: ExportRoleList
  nameWithType: ServerManagement.RoleCommands.ExportRoleList
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.ExportRoleList
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.ImportRoleList*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.ImportRoleList
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_ImportRoleList_System_Boolean_
  name: ImportRoleList
  nameWithType: ServerManagement.RoleCommands.ImportRoleList
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.ImportRoleList
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddRoleToList*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddRoleToList
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_AddRoleToList_Discord_IRole_
  name: AddRoleToList
  nameWithType: ServerManagement.RoleCommands.AddRoleToList
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddRoleToList
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToUsersOver*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToUsersOver
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_AddToUsersOver_Mewdeko_Common_TypeReaders_Models_StoopidTime_Discord_IRole_
  name: AddToUsersOver
  nameWithType: ServerManagement.RoleCommands.AddToUsersOver
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToUsersOver
- uid: Mewdeko.Common.TypeReaders.Models.StoopidTime
  commentId: T:Mewdeko.Common.TypeReaders.Models.StoopidTime
  parent: Mewdeko.Common.TypeReaders.Models
  href: Mewdeko.Common.TypeReaders.Models.StoopidTime.html
  name: StoopidTime
  nameWithType: StoopidTime
  fullName: Mewdeko.Common.TypeReaders.Models.StoopidTime
- uid: Mewdeko.Common.TypeReaders.Models
  commentId: N:Mewdeko.Common.TypeReaders.Models
  href: Mewdeko.html
  name: Mewdeko.Common.TypeReaders.Models
  nameWithType: Mewdeko.Common.TypeReaders.Models
  fullName: Mewdeko.Common.TypeReaders.Models
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
  - name: .
  - uid: Mewdeko.Common.TypeReaders
    name: TypeReaders
    href: Mewdeko.Common.TypeReaders.html
  - name: .
  - uid: Mewdeko.Common.TypeReaders.Models
    name: Models
    href: Mewdeko.Common.TypeReaders.Models.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
  - name: .
  - uid: Mewdeko.Common.TypeReaders
    name: TypeReaders
    href: Mewdeko.Common.TypeReaders.html
  - name: .
  - uid: Mewdeko.Common.TypeReaders.Models
    name: Models
    href: Mewdeko.Common.TypeReaders.Models.html
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToUsersUnder*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToUsersUnder
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_AddToUsersUnder_Mewdeko_Common_TypeReaders_Models_StoopidTime_Discord_IRole_
  name: AddToUsersUnder
  nameWithType: ServerManagement.RoleCommands.AddToUsersUnder
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddToUsersUnder
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAll*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAll
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_RemoveFromAll_Discord_IRole_
  name: RemoveFromAll
  nameWithType: ServerManagement.RoleCommands.RemoveFromAll
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAll
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAllUsers*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAllUsers
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_RemoveFromAllUsers_Discord_IRole_
  name: RemoveFromAllUsers
  nameWithType: ServerManagement.RoleCommands.RemoveFromAllUsers
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAllUsers
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAllBots*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAllBots
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_RemoveFromAllBots_Discord_IRole_
  name: RemoveFromAllBots
  nameWithType: ServerManagement.RoleCommands.RemoveFromAllBots
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromAllBots
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddRoleToRole*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddRoleToRole
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_AddRoleToRole_Discord_IRole_Discord_IRole_
  name: AddRoleToRole
  nameWithType: ServerManagement.RoleCommands.AddRoleToRole
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddRoleToRole
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromRole*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromRole
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_RemoveFromRole_Discord_IRole_Discord_IRole_
  name: RemoveFromRole
  nameWithType: ServerManagement.RoleCommands.RemoveFromRole
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.RemoveFromRole
- uid: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddThenRemove*
  commentId: Overload:Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddThenRemove
  href: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.html#Mewdeko_Modules_Server_Management_ServerManagement_RoleCommands_AddThenRemove_Discord_IRole_Discord_IRole_
  name: AddThenRemove
  nameWithType: ServerManagement.RoleCommands.AddThenRemove
  fullName: Mewdeko.Modules.Server_Management.ServerManagement.RoleCommands.AddThenRemove
