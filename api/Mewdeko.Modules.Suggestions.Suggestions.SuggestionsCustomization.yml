### YamlMime:ManagedReference
items:
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  commentId: T:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  id: Suggestions.SuggestionsCustomization
  parent: Mewdeko.Modules.Suggestions
  children:
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.AcceptChannel(Discord.ITextChannel)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.AcceptMessage(System.String)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnAccept
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnConsider
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnDeny
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnImplement
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ConsiderChannel(Discord.ITextChannel)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ConsiderMessage(System.String)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.DenyChannel(Discord.ITextChannel)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.DenyMessage(System.String)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ImplementChannel(Discord.ITextChannel)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ImplementMessage(System.String)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.MaxSuggestionLength(System.Int32)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.MinSuggestionLength(System.Int32)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonChannel(Discord.ITextChannel)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonColor(Mewdeko.Modules.Suggestions.Suggestions.ButtonType)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonEmote(Discord.IEmote)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonLabel(System.String)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonMessage(System.String)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMessage(System.String)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMoteColor(System.Int32,Mewdeko.Modules.Suggestions.Suggestions.ButtonType)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMotes(System.String)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMotesMode(Mewdeko.Modules.Suggestions.Suggestions.SuggestEmoteModeEnum)
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestThreadsType(Mewdeko.Modules.Suggestions.Suggestions.SuggestThreadType)
  langs:
  - csharp
  - vb
  name: Suggestions.SuggestionsCustomization
  nameWithType: Suggestions.SuggestionsCustomization
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  type: Class
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SuggestionsCustomization
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 110
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Customization commands for the Suggestions module.
  example: []
  syntax:
    content: >-
      [Group]

      public class Suggestions.SuggestionsCustomization : MewdekoModuleBase<SuggestionsService>, IModuleBase
    content.vb: >-
      <Group>

      Public Class Suggestions.SuggestionsCustomization Inherits MewdekoModuleBase(Of SuggestionsService) Implements IModuleBase
  inheritance:
  - System.Object
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  - Discord.Commands.ModuleBase
  - Mewdeko.Common.MewdekoModule
  - Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Suggestions.Services.SuggestionsService}
  implements:
  - Discord.Commands.IModuleBase
  inheritedMembers:
  - Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Suggestions.Services.SuggestionsService}.Service
  - Mewdeko.Common.MewdekoModule.CultureInfo
  - Mewdeko.Common.MewdekoModule.Strings
  - Mewdeko.Common.MewdekoModule.Localization
  - Mewdeko.Common.MewdekoModule.ctx
  - Mewdeko.Common.MewdekoModule.Config
  - Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  - Mewdeko.Common.MewdekoModule.GetText(System.String)
  - Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
  - Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  - Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  - Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  - Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  - Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
  - Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.Context
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.Mewdeko.Extensions.Extensions.ThrowIfNull``1(System.String)
  attributes:
  - type: Discord.Commands.GroupAttribute
    ctor: Discord.Commands.GroupAttribute.#ctor
    arguments: []
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMessage(System.String)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMessage(System.String)
  id: SuggestMessage(System.String)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: SuggestMessage(string)
  nameWithType: Suggestions.SuggestionsCustomization.SuggestMessage(string)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMessage(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SuggestMessage
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 121
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets or updates the suggestion message.
  remarks: >-
    Allows customization of the suggestion message. Providing "-" will reset the message to its default appearance.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("SuggestMessage")]

      [Aliases("SuggestMessage")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task SuggestMessage(string embed)
    parameters:
    - id: embed
      type: System.String
      description: The message or embed code. Use "-" to reset to the default message.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SuggestMessage")>

      <Aliases("SuggestMessage")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function SuggestMessage(embed As String) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMessage*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestMessage
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestMessage
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  nameWithType.vb: Suggestions.SuggestionsCustomization.SuggestMessage(String)
  fullName.vb: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMessage(String)
  name.vb: SuggestMessage(String)
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.MinSuggestionLength(System.Int32)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.MinSuggestionLength(System.Int32)
  id: MinSuggestionLength(System.Int32)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: MinSuggestionLength(int)
  nameWithType: Suggestions.SuggestionsCustomization.MinSuggestionLength(int)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.MinSuggestionLength(int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: MinSuggestionLength
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 143
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets the minimum length for suggestions.
  remarks: >-
    Establishes a minimum character count for suggestions to ensure they are sufficiently detailed.

    Requires Administrator permissions. The length cannot be set to more than 2048 characters.
  example: []
  syntax:
    content: >-
      [Cmd("MinSuggestionLength")]

      [Aliases("MinSuggestionLength")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task MinSuggestionLength(int length)
    parameters:
    - id: length
      type: System.Int32
      description: The minimum number of characters a suggestion must have.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("MinSuggestionLength")>

      <Aliases("MinSuggestionLength")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function MinSuggestionLength(length As Integer) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.MinSuggestionLength*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: MinSuggestionLength
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: MinSuggestionLength
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  nameWithType.vb: Suggestions.SuggestionsCustomization.MinSuggestionLength(Integer)
  fullName.vb: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.MinSuggestionLength(Integer)
  name.vb: MinSuggestionLength(Integer)
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMotesMode(Mewdeko.Modules.Suggestions.Suggestions.SuggestEmoteModeEnum)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMotesMode(Mewdeko.Modules.Suggestions.Suggestions.SuggestEmoteModeEnum)
  id: SuggestMotesMode(Mewdeko.Modules.Suggestions.Suggestions.SuggestEmoteModeEnum)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: SuggestMotesMode(SuggestEmoteModeEnum)
  nameWithType: Suggestions.SuggestionsCustomization.SuggestMotesMode(Suggestions.SuggestEmoteModeEnum)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMotesMode(Mewdeko.Modules.Suggestions.Suggestions.SuggestEmoteModeEnum)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SuggestMotesMode
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 167
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets the mode for suggestion emotes, either as reactions or buttons.
  remarks: >-
    Configures how users can interact with suggestions, through traditional reactions or interactive buttons.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("SuggestMotesMode")]

      [Aliases("SuggestMotesMode")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task SuggestMotesMode(Suggestions.SuggestEmoteModeEnum mode)
    parameters:
    - id: mode
      type: Mewdeko.Modules.Suggestions.Suggestions.SuggestEmoteModeEnum
      description: The mode to use for suggestion emotes.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SuggestMotesMode")>

      <Aliases("SuggestMotesMode")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function SuggestMotesMode(mode As Suggestions.SuggestEmoteModeEnum) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMotesMode*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestMotesMode
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestMotesMode
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonColor(Mewdeko.Modules.Suggestions.Suggestions.ButtonType)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonColor(Mewdeko.Modules.Suggestions.Suggestions.ButtonType)
  id: SuggestButtonColor(Mewdeko.Modules.Suggestions.Suggestions.ButtonType)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: SuggestButtonColor(ButtonType)
  nameWithType: Suggestions.SuggestionsCustomization.SuggestButtonColor(Suggestions.ButtonType)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonColor(Mewdeko.Modules.Suggestions.Suggestions.ButtonType)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SuggestButtonColor
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 182
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets the color of the suggestion button.
  remarks: >-
    Changes the appearance of the suggestion button to the selected color. Affects all suggestion messages moving forward.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("SuggestButtonColor")]

      [Aliases("SuggestButtonColor")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task SuggestButtonColor(Suggestions.ButtonType type)
    parameters:
    - id: type
      type: Mewdeko.Modules.Suggestions.Suggestions.ButtonType
      description: The color type for the suggestion button.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SuggestButtonColor")>

      <Aliases("SuggestButtonColor")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function SuggestButtonColor(type As Suggestions.ButtonType) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonColor*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestButtonColor
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestButtonColor
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMoteColor(System.Int32,Mewdeko.Modules.Suggestions.Suggestions.ButtonType)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMoteColor(System.Int32,Mewdeko.Modules.Suggestions.Suggestions.ButtonType)
  id: SuggestMoteColor(System.Int32,Mewdeko.Modules.Suggestions.Suggestions.ButtonType)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: SuggestMoteColor(int, ButtonType)
  nameWithType: Suggestions.SuggestionsCustomization.SuggestMoteColor(int, Suggestions.ButtonType)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMoteColor(int, Mewdeko.Modules.Suggestions.Suggestions.ButtonType)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SuggestMoteColor
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 200
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets the color of specific emote buttons on suggestions.
  remarks: >-
    Allows customization of individual button colors on the suggestion messages, enhancing visual distinction.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("SuggestMoteColor")]

      [Aliases("SuggestMoteColor")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task SuggestMoteColor(int num, Suggestions.ButtonType type)
    parameters:
    - id: num
      type: System.Int32
      description: The button number to change.
    - id: type
      type: Mewdeko.Modules.Suggestions.Suggestions.ButtonType
      description: The color type to apply to the button.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SuggestMoteColor")>

      <Aliases("SuggestMoteColor")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function SuggestMoteColor(num As Integer, type As Suggestions.ButtonType) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMoteColor*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestMoteColor
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestMoteColor
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  nameWithType.vb: Suggestions.SuggestionsCustomization.SuggestMoteColor(Integer, Suggestions.ButtonType)
  fullName.vb: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMoteColor(Integer, Mewdeko.Modules.Suggestions.Suggestions.ButtonType)
  name.vb: SuggestMoteColor(Integer, ButtonType)
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.MaxSuggestionLength(System.Int32)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.MaxSuggestionLength(System.Int32)
  id: MaxSuggestionLength(System.Int32)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: MaxSuggestionLength(int)
  nameWithType: Suggestions.SuggestionsCustomization.MaxSuggestionLength(int)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.MaxSuggestionLength(int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: MaxSuggestionLength
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 217
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets the maximum length for suggestions.
  remarks: >-
    Establishes a maximum character count for suggestions to prevent excessively long submissions.

    Requires Administrator permissions. The length must be greater than 0.
  example: []
  syntax:
    content: >-
      [Cmd("MaxSuggestionLength")]

      [Aliases("MaxSuggestionLength")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task MaxSuggestionLength(int length)
    parameters:
    - id: length
      type: System.Int32
      description: The maximum number of characters a suggestion can have.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("MaxSuggestionLength")>

      <Aliases("MaxSuggestionLength")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function MaxSuggestionLength(length As Integer) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.MaxSuggestionLength*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: MaxSuggestionLength
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: MaxSuggestionLength
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  nameWithType.vb: Suggestions.SuggestionsCustomization.MaxSuggestionLength(Integer)
  fullName.vb: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.MaxSuggestionLength(Integer)
  name.vb: MaxSuggestionLength(Integer)
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.AcceptMessage(System.String)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.AcceptMessage(System.String)
  id: AcceptMessage(System.String)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: AcceptMessage(string)
  nameWithType: Suggestions.SuggestionsCustomization.AcceptMessage(string)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.AcceptMessage(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AcceptMessage
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 241
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets or updates the accept message for suggestions.
  remarks: >-
    Customizes the message displayed when a suggestion is accepted. Providing "-" will reset the message to its default appearance.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("AcceptMessage")]

      [Aliases("AcceptMessage")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task AcceptMessage(string embed)
    parameters:
    - id: embed
      type: System.String
      description: The message or embed code. Use "-" to reset to the default message.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("AcceptMessage")>

      <Aliases("AcceptMessage")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function AcceptMessage(embed As String) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.AcceptMessage*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: AcceptMessage
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: AcceptMessage
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  nameWithType.vb: Suggestions.SuggestionsCustomization.AcceptMessage(String)
  fullName.vb: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.AcceptMessage(String)
  name.vb: AcceptMessage(String)
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.AcceptChannel(Discord.ITextChannel)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.AcceptChannel(Discord.ITextChannel)
  id: AcceptChannel(Discord.ITextChannel)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: AcceptChannel(ITextChannel?)
  nameWithType: Suggestions.SuggestionsCustomization.AcceptChannel(ITextChannel?)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.AcceptChannel(Discord.ITextChannel?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AcceptChannel
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 265
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets the channel where accepted suggestions are posted.
  remarks: >-
    Designates a specific channel for showcasing accepted suggestions. Setting the channel to null disables this feature.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("AcceptChannel")]

      [Aliases("AcceptChannel")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task AcceptChannel(ITextChannel? channel = null)
    parameters:
    - id: channel
      type: Discord.ITextChannel
      description: The channel for posting accepted suggestions. If null, the feature is disabled.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("AcceptChannel")>

      <Aliases("AcceptChannel")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function AcceptChannel(channel As ITextChannel = Nothing) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.AcceptChannel*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: AcceptChannel
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: AcceptChannel
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  nameWithType.vb: Suggestions.SuggestionsCustomization.AcceptChannel(ITextChannel)
  fullName.vb: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.AcceptChannel(Discord.ITextChannel)
  name.vb: AcceptChannel(ITextChannel)
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.DenyChannel(Discord.ITextChannel)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.DenyChannel(Discord.ITextChannel)
  id: DenyChannel(Discord.ITextChannel)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: DenyChannel(ITextChannel?)
  nameWithType: Suggestions.SuggestionsCustomization.DenyChannel(ITextChannel?)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.DenyChannel(Discord.ITextChannel?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: DenyChannel
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 283
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets the channel where denied suggestions are posted.
  remarks: >-
    Designates a specific channel for showcasing denied suggestions. Setting the channel to null disables this feature.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("DenyChannel")]

      [Aliases("DenyChannel")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task DenyChannel(ITextChannel? channel = null)
    parameters:
    - id: channel
      type: Discord.ITextChannel
      description: The channel for posting denied suggestions. If null, the feature is disabled.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("DenyChannel")>

      <Aliases("DenyChannel")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function DenyChannel(channel As ITextChannel = Nothing) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.DenyChannel*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: DenyChannel
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DenyChannel
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  nameWithType.vb: Suggestions.SuggestionsCustomization.DenyChannel(ITextChannel)
  fullName.vb: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.DenyChannel(Discord.ITextChannel)
  name.vb: DenyChannel(ITextChannel)
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ConsiderChannel(Discord.ITextChannel)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ConsiderChannel(Discord.ITextChannel)
  id: ConsiderChannel(Discord.ITextChannel)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: ConsiderChannel(ITextChannel?)
  nameWithType: Suggestions.SuggestionsCustomization.ConsiderChannel(ITextChannel?)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ConsiderChannel(Discord.ITextChannel?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ConsiderChannel
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 301
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets the channel where considered suggestions are posted.
  remarks: >-
    Designates a specific channel for showcasing suggestions that are currently being considered. Setting the channel to null disables this feature.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("ConsiderChannel")]

      [Aliases("ConsiderChannel")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task ConsiderChannel(ITextChannel? channel = null)
    parameters:
    - id: channel
      type: Discord.ITextChannel
      description: The channel for posting considered suggestions. If null, the feature is disabled.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ConsiderChannel")>

      <Aliases("ConsiderChannel")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function ConsiderChannel(channel As ITextChannel = Nothing) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ConsiderChannel*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ConsiderChannel
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ConsiderChannel
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  nameWithType.vb: Suggestions.SuggestionsCustomization.ConsiderChannel(ITextChannel)
  fullName.vb: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ConsiderChannel(Discord.ITextChannel)
  name.vb: ConsiderChannel(ITextChannel)
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ImplementChannel(Discord.ITextChannel)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ImplementChannel(Discord.ITextChannel)
  id: ImplementChannel(Discord.ITextChannel)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: ImplementChannel(ITextChannel?)
  nameWithType: Suggestions.SuggestionsCustomization.ImplementChannel(ITextChannel?)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ImplementChannel(Discord.ITextChannel?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ImplementChannel
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 319
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets the channel where implemented suggestions are posted.
  remarks: >-
    Designates a specific channel for showcasing suggestions that have been implemented. Setting the channel to null disables this feature.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("ImplementChannel")]

      [Aliases("ImplementChannel")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task ImplementChannel(ITextChannel? channel = null)
    parameters:
    - id: channel
      type: Discord.ITextChannel
      description: The channel for posting implemented suggestions. If null, the feature is disabled.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ImplementChannel")>

      <Aliases("ImplementChannel")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function ImplementChannel(channel As ITextChannel = Nothing) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ImplementChannel*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ImplementChannel
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ImplementChannel
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  nameWithType.vb: Suggestions.SuggestionsCustomization.ImplementChannel(ITextChannel)
  fullName.vb: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ImplementChannel(Discord.ITextChannel)
  name.vb: ImplementChannel(ITextChannel)
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ImplementMessage(System.String)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ImplementMessage(System.String)
  id: ImplementMessage(System.String)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: ImplementMessage(string)
  nameWithType: Suggestions.SuggestionsCustomization.ImplementMessage(string)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ImplementMessage(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ImplementMessage
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 337
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets or updates the implement message for suggestions.
  remarks: >-
    Customizes the message displayed when a suggestion is marked as implemented. Providing "-" will reset the message to its default appearance.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("ImplementMessage")]

      [Aliases("ImplementMessage")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task ImplementMessage(string embed)
    parameters:
    - id: embed
      type: System.String
      description: The message or embed code. Use "-" to reset to the default message.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ImplementMessage")>

      <Aliases("ImplementMessage")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function ImplementMessage(embed As String) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ImplementMessage*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ImplementMessage
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ImplementMessage
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  nameWithType.vb: Suggestions.SuggestionsCustomization.ImplementMessage(String)
  fullName.vb: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ImplementMessage(String)
  name.vb: ImplementMessage(String)
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestThreadsType(Mewdeko.Modules.Suggestions.Suggestions.SuggestThreadType)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestThreadsType(Mewdeko.Modules.Suggestions.Suggestions.SuggestThreadType)
  id: SuggestThreadsType(Mewdeko.Modules.Suggestions.Suggestions.SuggestThreadType)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: SuggestThreadsType(SuggestThreadType)
  nameWithType: Suggestions.SuggestionsCustomization.SuggestThreadsType(Suggestions.SuggestThreadType)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestThreadsType(Mewdeko.Modules.Suggestions.Suggestions.SuggestThreadType)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SuggestThreadsType
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 360
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets the type of threads used in suggestions.
  remarks: Allows selection between no threads, public threads, or private threads for suggestion discussions.
  example: []
  syntax:
    content: >-
      [Cmd("SuggestThreadsType")]

      [Aliases("SuggestThreadsType")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task SuggestThreadsType(Suggestions.SuggestThreadType type)
    parameters:
    - id: type
      type: Mewdeko.Modules.Suggestions.Suggestions.SuggestThreadType
      description: The type of thread to use for new suggestions.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SuggestThreadsType")>

      <Aliases("SuggestThreadsType")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function SuggestThreadsType(type As Suggestions.SuggestThreadType) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestThreadsType*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestThreadsType
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestThreadsType
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonChannel(Discord.ITextChannel)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonChannel(Discord.ITextChannel)
  id: SuggestButtonChannel(Discord.ITextChannel)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: SuggestButtonChannel(ITextChannel)
  nameWithType: Suggestions.SuggestionsCustomization.SuggestButtonChannel(ITextChannel)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonChannel(Discord.ITextChannel)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SuggestButtonChannel
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 375
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets the suggestion button channel.
  remarks: Specifies a channel where the suggestion button will be updated or created. Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("SuggestButtonChannel")]

      [Aliases("SuggestButtonChannel")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task SuggestButtonChannel(ITextChannel channel)
    parameters:
    - id: channel
      type: Discord.ITextChannel
      description: The channel to set as the suggestion button channel.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SuggestButtonChannel")>

      <Aliases("SuggestButtonChannel")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function SuggestButtonChannel(channel As ITextChannel) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonChannel*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestButtonChannel
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestButtonChannel
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonMessage(System.String)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonMessage(System.String)
  id: SuggestButtonMessage(System.String)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: SuggestButtonMessage(string?)
  nameWithType: Suggestions.SuggestionsCustomization.SuggestButtonMessage(string?)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonMessage(string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SuggestButtonMessage
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 394
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets or updates the suggest button message.
  remarks: >-
    Customizes the message associated with the suggest button. Providing "-" will reset the message to its default appearance.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("SuggestButtonMessage")]

      [Aliases("SuggestButtonMessage")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task SuggestButtonMessage(string? toSet)
    parameters:
    - id: toSet
      type: System.String
      description: The message to set for the suggest button. Use "-" to reset to default.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SuggestButtonMessage")>

      <Aliases("SuggestButtonMessage")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function SuggestButtonMessage(toSet As String) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonMessage*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestButtonMessage
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestButtonMessage
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  nameWithType.vb: Suggestions.SuggestionsCustomization.SuggestButtonMessage(String)
  fullName.vb: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonMessage(String)
  name.vb: SuggestButtonMessage(String)
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonLabel(System.String)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonLabel(System.String)
  id: SuggestButtonLabel(System.String)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: SuggestButtonLabel(string)
  nameWithType: Suggestions.SuggestionsCustomization.SuggestButtonLabel(string)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonLabel(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SuggestButtonLabel
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 421
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets the label for the suggest button.
  remarks: >-
    Customizes the text label of the suggest button. Providing "-" will reset the label to its default text.

    Requires Administrator permissions. Max length is 80 characters.
  example: []
  syntax:
    content: >-
      [Cmd("SuggestButtonLabel")]

      [Aliases("SuggestButtonLabel")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task SuggestButtonLabel(string toSet)
    parameters:
    - id: toSet
      type: System.String
      description: The label text for the suggest button. Use "-" to reset to default.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SuggestButtonLabel")>

      <Aliases("SuggestButtonLabel")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function SuggestButtonLabel(toSet As String) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonLabel*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestButtonLabel
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestButtonLabel
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  nameWithType.vb: Suggestions.SuggestionsCustomization.SuggestButtonLabel(String)
  fullName.vb: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonLabel(String)
  name.vb: SuggestButtonLabel(String)
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonEmote(Discord.IEmote)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonEmote(Discord.IEmote)
  id: SuggestButtonEmote(Discord.IEmote)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: SuggestButtonEmote(IEmote?)
  nameWithType: Suggestions.SuggestionsCustomization.SuggestButtonEmote(IEmote?)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonEmote(Discord.IEmote?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SuggestButtonEmote
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 457
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets the emote for the suggest button.
  remarks: >-
    Customizes the emote displayed on the suggest button. Providing null will reset the emote to its default.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("SuggestButtonEmote")]

      [Aliases("SuggestButtonEmote")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task SuggestButtonEmote(IEmote? emote = null)
    parameters:
    - id: emote
      type: Discord.IEmote
      description: The emote to use for the suggest button. If null, resets to default.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SuggestButtonEmote")>

      <Aliases("SuggestButtonEmote")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function SuggestButtonEmote(emote As IEmote = Nothing) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonEmote*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestButtonEmote
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestButtonEmote
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  nameWithType.vb: Suggestions.SuggestionsCustomization.SuggestButtonEmote(IEmote)
  fullName.vb: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonEmote(Discord.IEmote)
  name.vb: SuggestButtonEmote(IEmote)
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnDeny
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnDeny
  id: ArchiveOnDeny
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: ArchiveOnDeny()
  nameWithType: Suggestions.SuggestionsCustomization.ArchiveOnDeny()
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnDeny()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ArchiveOnDeny
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 485
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Toggles the archive setting for suggestions upon denial.
  remarks: >-
    Enables or disables automatic archiving of suggestion threads when a suggestion is denied.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("ArchiveOnDeny")]

      [Aliases("ArchiveOnDeny")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task ArchiveOnDeny()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ArchiveOnDeny")>

      <Aliases("ArchiveOnDeny")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function ArchiveOnDeny() As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnDeny*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ArchiveOnDeny
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ArchiveOnDeny
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnAccept
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnAccept
  id: ArchiveOnAccept
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: ArchiveOnAccept()
  nameWithType: Suggestions.SuggestionsCustomization.ArchiveOnAccept()
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnAccept()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ArchiveOnAccept
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 500
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Toggles the archive setting for suggestions upon acceptance.
  remarks: >-
    Enables or disables automatic archiving of suggestion threads when a suggestion is accepted.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("ArchiveOnAccept")]

      [Aliases("ArchiveOnAccept")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task ArchiveOnAccept()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ArchiveOnAccept")>

      <Aliases("ArchiveOnAccept")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function ArchiveOnAccept() As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnAccept*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ArchiveOnAccept
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ArchiveOnAccept
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnConsider
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnConsider
  id: ArchiveOnConsider
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: ArchiveOnConsider()
  nameWithType: Suggestions.SuggestionsCustomization.ArchiveOnConsider()
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnConsider()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ArchiveOnConsider
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 515
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Toggles the archive setting for suggestions upon consideration.
  remarks: >-
    Enables or disables automatic archiving of suggestion threads when a suggestion is considered.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("ArchiveOnConsider")]

      [Aliases("ArchiveOnConsider")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task ArchiveOnConsider()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ArchiveOnConsider")>

      <Aliases("ArchiveOnConsider")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function ArchiveOnConsider() As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnConsider*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ArchiveOnConsider
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ArchiveOnConsider
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnImplement
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnImplement
  id: ArchiveOnImplement
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: ArchiveOnImplement()
  nameWithType: Suggestions.SuggestionsCustomization.ArchiveOnImplement()
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnImplement()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ArchiveOnImplement
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 530
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Toggles the archive setting for suggestions upon implementation.
  remarks: >-
    Enables or disables automatic archiving of suggestion threads when a suggestion is implemented.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("ArchiveOnImplement")]

      [Aliases("ArchiveOnImplement")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task ArchiveOnImplement()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ArchiveOnImplement")>

      <Aliases("ArchiveOnImplement")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function ArchiveOnImplement() As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnImplement*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ArchiveOnImplement
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ArchiveOnImplement
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.DenyMessage(System.String)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.DenyMessage(System.String)
  id: DenyMessage(System.String)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: DenyMessage(string)
  nameWithType: Suggestions.SuggestionsCustomization.DenyMessage(string)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.DenyMessage(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: DenyMessage
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 547
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets or updates the deny message for suggestions.
  remarks: >-
    Customizes the message displayed when a suggestion is denied. Providing "-" will reset the message to its default appearance.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("DenyMessage")]

      [Aliases("DenyMessage")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task DenyMessage(string embed)
    parameters:
    - id: embed
      type: System.String
      description: The message or embed code. Use "-" to reset to the default message.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("DenyMessage")>

      <Aliases("DenyMessage")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function DenyMessage(embed As String) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.DenyMessage*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: DenyMessage
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DenyMessage
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  nameWithType.vb: Suggestions.SuggestionsCustomization.DenyMessage(String)
  fullName.vb: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.DenyMessage(String)
  name.vb: DenyMessage(String)
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ConsiderMessage(System.String)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ConsiderMessage(System.String)
  id: ConsiderMessage(System.String)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: ConsiderMessage(string)
  nameWithType: Suggestions.SuggestionsCustomization.ConsiderMessage(string)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ConsiderMessage(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ConsiderMessage
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 570
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Sets or updates the consider message for suggestions.
  remarks: >-
    Customizes the message displayed when a suggestion is considered. Providing "-" will reset the message to its default appearance.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("ConsiderMessage")]

      [Aliases("ConsiderMessage")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task ConsiderMessage(string embed)
    parameters:
    - id: embed
      type: System.String
      description: The message or embed code. Use "-" to reset to the default message.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ConsiderMessage")>

      <Aliases("ConsiderMessage")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function ConsiderMessage(embed As String) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ConsiderMessage*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ConsiderMessage
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ConsiderMessage
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  nameWithType.vb: Suggestions.SuggestionsCustomization.ConsiderMessage(String)
  fullName.vb: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ConsiderMessage(String)
  name.vb: ConsiderMessage(String)
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMotes(System.String)
  commentId: M:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMotes(System.String)
  id: SuggestMotes(System.String)
  parent: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
  langs:
  - csharp
  - vb
  name: SuggestMotes(string?)
  nameWithType: Suggestions.SuggestionsCustomization.SuggestMotes(string?)
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMotes(string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SuggestMotes
    path: src/Mewdeko/Modules/Suggestions/SuggestionsCustomization.cs
    startLine: 592
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Suggestions
  summary: Configures the custom emotes used for suggestions.
  remarks: >-
    Allows the server to specify custom emotes for reacting to suggestions. Set to "disable" to revert to default thumbs up/down reactions.

    Requires Administrator permissions.
  example: []
  syntax:
    content: >-
      [Cmd("SuggestMotes")]

      [Aliases("SuggestMotes")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task SuggestMotes(string? _ = null)
    parameters:
    - id: _
      type: System.String
      description: A comma-separated list of emote strings, or "disable" to use default reactions.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SuggestMotes")>

      <Aliases("SuggestMotes")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function SuggestMotes(_ As String = Nothing) As Task
  overload: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMotes*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestMotes
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuggestMotes
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  nameWithType.vb: Suggestions.SuggestionsCustomization.SuggestMotes(String)
  fullName.vb: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMotes(String)
  name.vb: SuggestMotes(String)
references:
- uid: Mewdeko.Modules.Suggestions
  commentId: N:Mewdeko.Modules.Suggestions
  href: Mewdeko.html
  name: Mewdeko.Modules.Suggestions
  nameWithType: Mewdeko.Modules.Suggestions
  fullName: Mewdeko.Modules.Suggestions
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Modules
    name: Modules
    href: Mewdeko.Modules.html
  - name: .
  - uid: Mewdeko.Modules.Suggestions
    name: Suggestions
    href: Mewdeko.Modules.Suggestions.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Modules
    name: Modules
    href: Mewdeko.Modules.html
  - name: .
  - uid: Mewdeko.Modules.Suggestions
    name: Suggestions
    href: Mewdeko.Modules.Suggestions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  commentId: T:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  parent: Discord.Commands
  definition: Discord.Commands.ModuleBase`1
  name: ModuleBase<ICommandContext>
  nameWithType: ModuleBase<ICommandContext>
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>
  nameWithType.vb: ModuleBase(Of ICommandContext)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext)
  name.vb: ModuleBase(Of ICommandContext)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: <
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase
  commentId: T:Discord.Commands.ModuleBase
  parent: Discord.Commands
  isExternal: true
  name: ModuleBase
  nameWithType: ModuleBase
  fullName: Discord.Commands.ModuleBase
- uid: Mewdeko.Common.MewdekoModule
  commentId: T:Mewdeko.Common.MewdekoModule
  parent: Mewdeko.Common
  href: Mewdeko.Common.MewdekoModule.html
  name: MewdekoModule
  nameWithType: MewdekoModule
  fullName: Mewdeko.Common.MewdekoModule
- uid: Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Suggestions.Services.SuggestionsService}
  commentId: T:Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Suggestions.Services.SuggestionsService}
  parent: Mewdeko.Common
  definition: Mewdeko.Common.MewdekoModuleBase`1
  href: Mewdeko.Common.MewdekoModuleBase-1.html
  name: MewdekoModuleBase<SuggestionsService>
  nameWithType: MewdekoModuleBase<SuggestionsService>
  fullName: Mewdeko.Common.MewdekoModuleBase<Mewdeko.Modules.Suggestions.Services.SuggestionsService>
  nameWithType.vb: MewdekoModuleBase(Of SuggestionsService)
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of Mewdeko.Modules.Suggestions.Services.SuggestionsService)
  name.vb: MewdekoModuleBase(Of SuggestionsService)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: <
  - uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService
    name: SuggestionsService
    href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html
  - name: '>'
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Modules.Suggestions.Services.SuggestionsService
    name: SuggestionsService
    href: Mewdeko.Modules.Suggestions.Services.SuggestionsService.html
  - name: )
- uid: Discord.Commands.IModuleBase
  commentId: T:Discord.Commands.IModuleBase
  parent: Discord.Commands
  isExternal: true
  name: IModuleBase
  nameWithType: IModuleBase
  fullName: Discord.Commands.IModuleBase
- uid: Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Suggestions.Services.SuggestionsService}.Service
  commentId: P:Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Suggestions.Services.SuggestionsService}.Service
  parent: Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Suggestions.Services.SuggestionsService}
  definition: Mewdeko.Common.MewdekoModuleBase`1.Service
  href: Mewdeko.Common.MewdekoModuleBase-1.html#Mewdeko_Common_MewdekoModuleBase_1_Service
  name: Service
  nameWithType: MewdekoModuleBase<SuggestionsService>.Service
  fullName: Mewdeko.Common.MewdekoModuleBase<Mewdeko.Modules.Suggestions.Services.SuggestionsService>.Service
  nameWithType.vb: MewdekoModuleBase(Of SuggestionsService).Service
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of Mewdeko.Modules.Suggestions.Services.SuggestionsService).Service
- uid: Mewdeko.Common.MewdekoModule.CultureInfo
  commentId: P:Mewdeko.Common.MewdekoModule.CultureInfo
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CultureInfo
  name: CultureInfo
  nameWithType: MewdekoModule.CultureInfo
  fullName: Mewdeko.Common.MewdekoModule.CultureInfo
- uid: Mewdeko.Common.MewdekoModule.Strings
  commentId: P:Mewdeko.Common.MewdekoModule.Strings
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_Strings
  name: Strings
  nameWithType: MewdekoModule.Strings
  fullName: Mewdeko.Common.MewdekoModule.Strings
- uid: Mewdeko.Common.MewdekoModule.Localization
  commentId: P:Mewdeko.Common.MewdekoModule.Localization
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_Localization
  name: Localization
  nameWithType: MewdekoModule.Localization
  fullName: Mewdeko.Common.MewdekoModule.Localization
- uid: Mewdeko.Common.MewdekoModule.ctx
  commentId: P:Mewdeko.Common.MewdekoModule.ctx
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ctx
  name: ctx
  nameWithType: MewdekoModule.ctx
  fullName: Mewdeko.Common.MewdekoModule.ctx
- uid: Mewdeko.Common.MewdekoModule.Config
  commentId: P:Mewdeko.Common.MewdekoModule.Config
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_Config
  name: Config
  nameWithType: MewdekoModule.Config
  fullName: Mewdeko.Common.MewdekoModule.Config
- uid: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  commentId: M:Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_BeforeExecute_Discord_Commands_CommandInfo_
  name: BeforeExecute(CommandInfo)
  nameWithType: MewdekoModule.BeforeExecute(CommandInfo)
  fullName: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
    name: BeforeExecute
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_BeforeExecute_Discord_Commands_CommandInfo_
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
    name: BeforeExecute
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_BeforeExecute_Discord_Commands_CommandInfo_
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Mewdeko.Common.MewdekoModule.GetText(System.String)
  commentId: M:Mewdeko.Common.MewdekoModule.GetText(System.String)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_
  name: GetText(string)
  nameWithType: MewdekoModule.GetText(string)
  fullName: Mewdeko.Common.MewdekoModule.GetText(string)
  nameWithType.vb: MewdekoModule.GetText(String)
  fullName.vb: Mewdeko.Common.MewdekoModule.GetText(String)
  name.vb: GetText(String)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String)
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String)
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_System_Object___
  name: GetText(string, params object[])
  nameWithType: MewdekoModule.GetText(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.GetText(string, params object[])
  nameWithType.vb: MewdekoModule.GetText(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.GetText(String, ParamArray Object())
  name.vb: GetText(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ErrorLocalizedAsync_System_String_System_Object___
  name: ErrorLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ErrorLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ErrorLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(String, ParamArray Object())
  name.vb: ErrorLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
    name: ErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
    name: ErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyErrorLocalizedAsync_System_String_System_Object___
  name: ReplyErrorLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ReplyErrorLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ReplyErrorLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(String, ParamArray Object())
  name.vb: ReplyErrorLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
    name: ReplyErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
    name: ReplyErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ConfirmLocalizedAsync_System_String_System_Object___
  name: ConfirmLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ConfirmLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ConfirmLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(String, ParamArray Object())
  name.vb: ConfirmLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
    name: ConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
    name: ConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyConfirmLocalizedAsync_System_String_System_Object___
  name: ReplyConfirmLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ReplyConfirmLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ReplyConfirmLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(String, ParamArray Object())
  name.vb: ReplyConfirmLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
    name: ReplyConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
    name: ReplyConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_System_String_System_UInt64_
  name: PromptUserConfirmAsync(string, ulong)
  nameWithType: MewdekoModule.PromptUserConfirmAsync(string, ulong)
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(string, ulong)
  nameWithType.vb: MewdekoModule.PromptUserConfirmAsync(String, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(String, ULong)
  name.vb: PromptUserConfirmAsync(String, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_System_String_System_UInt64_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_System_String_System_UInt64_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_EmbedBuilder_System_UInt64_
  name: PromptUserConfirmAsync(EmbedBuilder, ulong)
  nameWithType: MewdekoModule.PromptUserConfirmAsync(EmbedBuilder, ulong)
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder, ulong)
  nameWithType.vb: MewdekoModule.PromptUserConfirmAsync(EmbedBuilder, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder, ULong)
  name.vb: PromptUserConfirmAsync(EmbedBuilder, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  commentId: M:Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CheckRoleHierarchy_Discord_IGuildUser_System_Boolean_
  name: CheckRoleHierarchy(IGuildUser, bool)
  nameWithType: MewdekoModule.CheckRoleHierarchy(IGuildUser, bool)
  fullName: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser, bool)
  nameWithType.vb: MewdekoModule.CheckRoleHierarchy(IGuildUser, Boolean)
  fullName.vb: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser, Boolean)
  name.vb: CheckRoleHierarchy(IGuildUser, Boolean)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
    name: CheckRoleHierarchy
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CheckRoleHierarchy_Discord_IGuildUser_System_Boolean_
  - name: (
  - uid: Discord.IGuildUser
    name: IGuildUser
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
    name: CheckRoleHierarchy
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CheckRoleHierarchy_Discord_IGuildUser_System_Boolean_
  - name: (
  - uid: Discord.IGuildUser
    name: IGuildUser
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_IUserMessage_Discord_EmbedBuilder_System_UInt64_
  name: PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ulong)
  nameWithType: MewdekoModule.PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ulong)
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage, Discord.EmbedBuilder, ulong)
  nameWithType.vb: MewdekoModule.PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage, Discord.EmbedBuilder, ULong)
  name.vb: PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_IUserMessage_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_IUserMessage_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  commentId: M:Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetButtonInputAsync_System_UInt64_System_UInt64_System_UInt64_System_Boolean_
  name: GetButtonInputAsync(ulong, ulong, ulong, bool)
  nameWithType: MewdekoModule.GetButtonInputAsync(ulong, ulong, ulong, bool)
  fullName: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(ulong, ulong, ulong, bool)
  nameWithType.vb: MewdekoModule.GetButtonInputAsync(ULong, ULong, ULong, Boolean)
  fullName.vb: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(ULong, ULong, ULong, Boolean)
  name.vb: GetButtonInputAsync(ULong, ULong, ULong, Boolean)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
    name: GetButtonInputAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetButtonInputAsync_System_UInt64_System_UInt64_System_UInt64_System_Boolean_
  - name: (
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
    name: GetButtonInputAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetButtonInputAsync_System_UInt64_System_UInt64_System_UInt64_System_Boolean_
  - name: (
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextMessageAsync_System_UInt64_System_UInt64_
  name: NextMessageAsync(ulong, ulong)
  nameWithType: MewdekoModule.NextMessageAsync(ulong, ulong)
  fullName: Mewdeko.Common.MewdekoModule.NextMessageAsync(ulong, ulong)
  nameWithType.vb: MewdekoModule.NextMessageAsync(ULong, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.NextMessageAsync(ULong, ULong)
  name.vb: NextMessageAsync(ULong, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
    name: NextMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
    name: NextMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextFullMessageAsync_System_UInt64_System_UInt64_
  name: NextFullMessageAsync(ulong, ulong)
  nameWithType: MewdekoModule.NextFullMessageAsync(ulong, ulong)
  fullName: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(ulong, ulong)
  nameWithType.vb: MewdekoModule.NextFullMessageAsync(ULong, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(ULong, ULong)
  name.vb: NextFullMessageAsync(ULong, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
    name: NextFullMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextFullMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
    name: NextFullMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextFullMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  nameWithType: ModuleBase<ICommandContext>.ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.ReplyAsync(string, bool, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker[], Discord.Embed[], Discord.MessageFlags)
  nameWithType.vb: ModuleBase(Of ICommandContext).ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).ReplyAsync(String, Boolean, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker(), Discord.Embed(), Discord.MessageFlags)
  name.vb: ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  name: BeforeExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.BeforeExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).BeforeExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).BeforeExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
  name: AfterExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.AfterExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.AfterExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).AfterExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).AfterExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  name: AfterExecute(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.AfterExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.AfterExecute(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).AfterExecute(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).AfterExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  name: OnModuleBuilding(CommandService, ModuleBuilder)
  nameWithType: ModuleBase<ICommandContext>.OnModuleBuilding(CommandService, ModuleBuilder)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  nameWithType.vb: ModuleBase(Of ICommandContext).OnModuleBuilding(CommandService, ModuleBuilder)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.Context
  commentId: P:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.Context
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.Context
  name: Context
  nameWithType: ModuleBase<ICommandContext>.Context
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.Context
  nameWithType.vb: ModuleBase(Of ICommandContext).Context
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).Context
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.Mewdeko.Extensions.Extensions.ThrowIfNull``1(System.String)
  commentId: M:Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  parent: Mewdeko.Extensions.Extensions
  definition: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  name: ThrowIfNull<SuggestionsCustomization>(SuggestionsCustomization, string)
  nameWithType: Extensions.ThrowIfNull<Suggestions.SuggestionsCustomization>(Suggestions.SuggestionsCustomization, string)
  fullName: Mewdeko.Extensions.Extensions.ThrowIfNull<Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization>(Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization, string)
  nameWithType.vb: Extensions.ThrowIfNull(Of Suggestions.SuggestionsCustomization)(Suggestions.SuggestionsCustomization, String)
  fullName.vb: Mewdeko.Extensions.Extensions.ThrowIfNull(Of Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization)(Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization, String)
  name.vb: ThrowIfNull(Of SuggestionsCustomization)(SuggestionsCustomization, String)
  spec.csharp:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: <
  - uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
    name: SuggestionsCustomization
    href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html
  - name: '>'
  - name: (
  - uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
    name: SuggestionsCustomization
    href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
    name: SuggestionsCustomization
    href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html
  - name: )
  - name: (
  - uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization
    name: SuggestionsCustomization
    href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Commands.ModuleBase`1
  commentId: T:Discord.Commands.ModuleBase`1
  isExternal: true
  name: ModuleBase<T>
  nameWithType: ModuleBase<T>
  fullName: Discord.Commands.ModuleBase<T>
  nameWithType.vb: ModuleBase(Of T)
  fullName.vb: Discord.Commands.ModuleBase(Of T)
  name.vb: ModuleBase(Of T)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Discord.Commands
  commentId: N:Discord.Commands
  isExternal: true
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
  spec.csharp:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.Commands
    name: Commands
    isExternal: true
  spec.vb:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.Commands
    name: Commands
    isExternal: true
- uid: Mewdeko.Common
  commentId: N:Mewdeko.Common
  href: Mewdeko.html
  name: Mewdeko.Common
  nameWithType: Mewdeko.Common
  fullName: Mewdeko.Common
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
- uid: Mewdeko.Common.MewdekoModuleBase`1
  commentId: T:Mewdeko.Common.MewdekoModuleBase`1
  href: Mewdeko.Common.MewdekoModuleBase-1.html
  name: MewdekoModuleBase<TService>
  nameWithType: MewdekoModuleBase<TService>
  fullName: Mewdeko.Common.MewdekoModuleBase<TService>
  nameWithType.vb: MewdekoModuleBase(Of TService)
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of TService)
  name.vb: MewdekoModuleBase(Of TService)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: <
  - name: TService
  - name: '>'
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TService
  - name: )
- uid: Mewdeko.Common.MewdekoModuleBase`1.Service
  commentId: P:Mewdeko.Common.MewdekoModuleBase`1.Service
  href: Mewdeko.Common.MewdekoModuleBase-1.html#Mewdeko_Common_MewdekoModuleBase_1_Service
  name: Service
  nameWithType: MewdekoModuleBase<TService>.Service
  fullName: Mewdeko.Common.MewdekoModuleBase<TService>.Service
  nameWithType.vb: MewdekoModuleBase(Of TService).Service
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of TService).Service
- uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  commentId: M:Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  nameWithType: ModuleBase<T>.ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  fullName: Discord.Commands.ModuleBase<T>.ReplyAsync(string, bool, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker[], Discord.Embed[], Discord.MessageFlags)
  nameWithType.vb: ModuleBase(Of T).ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  fullName.vb: Discord.Commands.ModuleBase(Of T).ReplyAsync(String, Boolean, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker(), Discord.Embed(), Discord.MessageFlags)
  name.vb: ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  isExternal: true
  name: BeforeExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<T>.BeforeExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).BeforeExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).BeforeExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
  isExternal: true
  name: AfterExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<T>.AfterExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.AfterExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).AfterExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).AfterExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  isExternal: true
  name: AfterExecute(CommandInfo)
  nameWithType: ModuleBase<T>.AfterExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.AfterExecute(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).AfterExecute(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).AfterExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  commentId: M:Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  isExternal: true
  name: OnModuleBuilding(CommandService, ModuleBuilder)
  nameWithType: ModuleBase<T>.OnModuleBuilding(CommandService, ModuleBuilder)
  fullName: Discord.Commands.ModuleBase<T>.OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  nameWithType.vb: ModuleBase(Of T).OnModuleBuilding(CommandService, ModuleBuilder)
  fullName.vb: Discord.Commands.ModuleBase(Of T).OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.Context
  commentId: P:Discord.Commands.ModuleBase`1.Context
  isExternal: true
  name: Context
  nameWithType: ModuleBase<T>.Context
  fullName: Discord.Commands.ModuleBase<T>.Context
  nameWithType.vb: ModuleBase(Of T).Context
  fullName.vb: Discord.Commands.ModuleBase(Of T).Context
- uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  commentId: M:Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  isExternal: true
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  name: ThrowIfNull<T>(T, string)
  nameWithType: Extensions.ThrowIfNull<T>(T, string)
  fullName: Mewdeko.Extensions.Extensions.ThrowIfNull<T>(T, string)
  nameWithType.vb: Extensions.ThrowIfNull(Of T)(T, String)
  fullName.vb: Mewdeko.Extensions.Extensions.ThrowIfNull(Of T)(T, String)
  name.vb: ThrowIfNull(Of T)(T, String)
  spec.csharp:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Mewdeko.Extensions.Extensions
  commentId: T:Mewdeko.Extensions.Extensions
  parent: Mewdeko.Extensions
  href: Mewdeko.Extensions.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: Mewdeko.Extensions.Extensions
- uid: Mewdeko.Extensions
  commentId: N:Mewdeko.Extensions
  href: Mewdeko.html
  name: Mewdeko.Extensions
  nameWithType: Mewdeko.Extensions
  fullName: Mewdeko.Extensions
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Extensions
    name: Extensions
    href: Mewdeko.Extensions.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Extensions
    name: Extensions
    href: Mewdeko.Extensions.html
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMessage
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_SuggestMessage_System_String_
  name: SuggestMessage
  nameWithType: Suggestions.SuggestionsCustomization.SuggestMessage
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMessage
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.MinSuggestionLength*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.MinSuggestionLength
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_MinSuggestionLength_System_Int32_
  name: MinSuggestionLength
  nameWithType: Suggestions.SuggestionsCustomization.MinSuggestionLength
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.MinSuggestionLength
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMotesMode*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMotesMode
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_SuggestMotesMode_Mewdeko_Modules_Suggestions_Suggestions_SuggestEmoteModeEnum_
  name: SuggestMotesMode
  nameWithType: Suggestions.SuggestionsCustomization.SuggestMotesMode
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMotesMode
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestEmoteModeEnum
  commentId: T:Mewdeko.Modules.Suggestions.Suggestions.SuggestEmoteModeEnum
  parent: Mewdeko.Modules.Suggestions
  href: Mewdeko.Modules.Suggestions.Suggestions.html
  name: Suggestions.SuggestEmoteModeEnum
  nameWithType: Suggestions.SuggestEmoteModeEnum
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestEmoteModeEnum
  spec.csharp:
  - uid: Mewdeko.Modules.Suggestions.Suggestions
    name: Suggestions
    href: Mewdeko.Modules.Suggestions.Suggestions.html
  - name: .
  - uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestEmoteModeEnum
    name: SuggestEmoteModeEnum
    href: Mewdeko.Modules.Suggestions.Suggestions.SuggestEmoteModeEnum.html
  spec.vb:
  - uid: Mewdeko.Modules.Suggestions.Suggestions
    name: Suggestions
    href: Mewdeko.Modules.Suggestions.Suggestions.html
  - name: .
  - uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestEmoteModeEnum
    name: SuggestEmoteModeEnum
    href: Mewdeko.Modules.Suggestions.Suggestions.SuggestEmoteModeEnum.html
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonColor*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonColor
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_SuggestButtonColor_Mewdeko_Modules_Suggestions_Suggestions_ButtonType_
  name: SuggestButtonColor
  nameWithType: Suggestions.SuggestionsCustomization.SuggestButtonColor
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonColor
- uid: Mewdeko.Modules.Suggestions.Suggestions.ButtonType
  commentId: T:Mewdeko.Modules.Suggestions.Suggestions.ButtonType
  parent: Mewdeko.Modules.Suggestions
  href: Mewdeko.Modules.Suggestions.Suggestions.html
  name: Suggestions.ButtonType
  nameWithType: Suggestions.ButtonType
  fullName: Mewdeko.Modules.Suggestions.Suggestions.ButtonType
  spec.csharp:
  - uid: Mewdeko.Modules.Suggestions.Suggestions
    name: Suggestions
    href: Mewdeko.Modules.Suggestions.Suggestions.html
  - name: .
  - uid: Mewdeko.Modules.Suggestions.Suggestions.ButtonType
    name: ButtonType
    href: Mewdeko.Modules.Suggestions.Suggestions.ButtonType.html
  spec.vb:
  - uid: Mewdeko.Modules.Suggestions.Suggestions
    name: Suggestions
    href: Mewdeko.Modules.Suggestions.Suggestions.html
  - name: .
  - uid: Mewdeko.Modules.Suggestions.Suggestions.ButtonType
    name: ButtonType
    href: Mewdeko.Modules.Suggestions.Suggestions.ButtonType.html
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMoteColor*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMoteColor
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_SuggestMoteColor_System_Int32_Mewdeko_Modules_Suggestions_Suggestions_ButtonType_
  name: SuggestMoteColor
  nameWithType: Suggestions.SuggestionsCustomization.SuggestMoteColor
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMoteColor
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.MaxSuggestionLength*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.MaxSuggestionLength
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_MaxSuggestionLength_System_Int32_
  name: MaxSuggestionLength
  nameWithType: Suggestions.SuggestionsCustomization.MaxSuggestionLength
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.MaxSuggestionLength
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.AcceptMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.AcceptMessage
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_AcceptMessage_System_String_
  name: AcceptMessage
  nameWithType: Suggestions.SuggestionsCustomization.AcceptMessage
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.AcceptMessage
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.AcceptChannel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.AcceptChannel
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_AcceptChannel_Discord_ITextChannel_
  name: AcceptChannel
  nameWithType: Suggestions.SuggestionsCustomization.AcceptChannel
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.AcceptChannel
- uid: Discord.ITextChannel
  commentId: T:Discord.ITextChannel
  parent: Discord
  isExternal: true
  name: ITextChannel
  nameWithType: ITextChannel
  fullName: Discord.ITextChannel
- uid: Discord
  commentId: N:Discord
  isExternal: true
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.DenyChannel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.DenyChannel
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_DenyChannel_Discord_ITextChannel_
  name: DenyChannel
  nameWithType: Suggestions.SuggestionsCustomization.DenyChannel
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.DenyChannel
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ConsiderChannel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ConsiderChannel
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_ConsiderChannel_Discord_ITextChannel_
  name: ConsiderChannel
  nameWithType: Suggestions.SuggestionsCustomization.ConsiderChannel
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ConsiderChannel
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ImplementChannel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ImplementChannel
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_ImplementChannel_Discord_ITextChannel_
  name: ImplementChannel
  nameWithType: Suggestions.SuggestionsCustomization.ImplementChannel
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ImplementChannel
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ImplementMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ImplementMessage
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_ImplementMessage_System_String_
  name: ImplementMessage
  nameWithType: Suggestions.SuggestionsCustomization.ImplementMessage
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ImplementMessage
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestThreadsType*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestThreadsType
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_SuggestThreadsType_Mewdeko_Modules_Suggestions_Suggestions_SuggestThreadType_
  name: SuggestThreadsType
  nameWithType: Suggestions.SuggestionsCustomization.SuggestThreadsType
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestThreadsType
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestThreadType
  commentId: T:Mewdeko.Modules.Suggestions.Suggestions.SuggestThreadType
  parent: Mewdeko.Modules.Suggestions
  href: Mewdeko.Modules.Suggestions.Suggestions.html
  name: Suggestions.SuggestThreadType
  nameWithType: Suggestions.SuggestThreadType
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestThreadType
  spec.csharp:
  - uid: Mewdeko.Modules.Suggestions.Suggestions
    name: Suggestions
    href: Mewdeko.Modules.Suggestions.Suggestions.html
  - name: .
  - uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestThreadType
    name: SuggestThreadType
    href: Mewdeko.Modules.Suggestions.Suggestions.SuggestThreadType.html
  spec.vb:
  - uid: Mewdeko.Modules.Suggestions.Suggestions
    name: Suggestions
    href: Mewdeko.Modules.Suggestions.Suggestions.html
  - name: .
  - uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestThreadType
    name: SuggestThreadType
    href: Mewdeko.Modules.Suggestions.Suggestions.SuggestThreadType.html
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonChannel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonChannel
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_SuggestButtonChannel_Discord_ITextChannel_
  name: SuggestButtonChannel
  nameWithType: Suggestions.SuggestionsCustomization.SuggestButtonChannel
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonChannel
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonMessage
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_SuggestButtonMessage_System_String_
  name: SuggestButtonMessage
  nameWithType: Suggestions.SuggestionsCustomization.SuggestButtonMessage
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonMessage
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonLabel*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonLabel
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_SuggestButtonLabel_System_String_
  name: SuggestButtonLabel
  nameWithType: Suggestions.SuggestionsCustomization.SuggestButtonLabel
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonLabel
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonEmote*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonEmote
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_SuggestButtonEmote_Discord_IEmote_
  name: SuggestButtonEmote
  nameWithType: Suggestions.SuggestionsCustomization.SuggestButtonEmote
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestButtonEmote
- uid: Discord.IEmote
  commentId: T:Discord.IEmote
  parent: Discord
  isExternal: true
  name: IEmote
  nameWithType: IEmote
  fullName: Discord.IEmote
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnDeny*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnDeny
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_ArchiveOnDeny
  name: ArchiveOnDeny
  nameWithType: Suggestions.SuggestionsCustomization.ArchiveOnDeny
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnDeny
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnAccept*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnAccept
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_ArchiveOnAccept
  name: ArchiveOnAccept
  nameWithType: Suggestions.SuggestionsCustomization.ArchiveOnAccept
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnAccept
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnConsider*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnConsider
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_ArchiveOnConsider
  name: ArchiveOnConsider
  nameWithType: Suggestions.SuggestionsCustomization.ArchiveOnConsider
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnConsider
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnImplement*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnImplement
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_ArchiveOnImplement
  name: ArchiveOnImplement
  nameWithType: Suggestions.SuggestionsCustomization.ArchiveOnImplement
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ArchiveOnImplement
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.DenyMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.DenyMessage
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_DenyMessage_System_String_
  name: DenyMessage
  nameWithType: Suggestions.SuggestionsCustomization.DenyMessage
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.DenyMessage
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ConsiderMessage*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ConsiderMessage
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_ConsiderMessage_System_String_
  name: ConsiderMessage
  nameWithType: Suggestions.SuggestionsCustomization.ConsiderMessage
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.ConsiderMessage
- uid: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMotes*
  commentId: Overload:Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMotes
  href: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.html#Mewdeko_Modules_Suggestions_Suggestions_SuggestionsCustomization_SuggestMotes_System_String_
  name: SuggestMotes
  nameWithType: Suggestions.SuggestionsCustomization.SuggestMotes
  fullName: Mewdeko.Modules.Suggestions.Suggestions.SuggestionsCustomization.SuggestMotes
