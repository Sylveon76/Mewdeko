### YamlMime:ManagedReference
items:
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly
  commentId: T:Mewdeko.Modules.OwnerOnly.OwnerOnly
  id: OwnerOnly
  parent: Mewdeko.Modules.OwnerOnly
  children:
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.#ctor(Discord.WebSocket.DiscordSocketClient,Mewdeko.Mewdeko,Mewdeko.Services.strings.IBotStrings,Fergun.Interactive.InteractiveService,Mewdeko.Services.ICoordinator,System.Collections.Generic.IEnumerable{Mewdeko.Services.Settings.IConfigService},Mewdeko.Database.DbService,Mewdeko.Services.IDataCache,Discord.Commands.CommandService,System.IServiceProvider,Mewdeko.Services.GuildSettingsService,Mewdeko.Services.CommandHandler,Mewdeko.Common.Configs.BotConfig)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.AddPlaying(Discord.ActivityType,System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandAdd(System.Int32,System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandRemove(System.Int32)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandsList(System.Int32)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.Bash(System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.ClearUsedTokens
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.CommandStats
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.Config(System.String,System.String,System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.DefPrefix(System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.Die
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.Evaluate(System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.ForwardMessages
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.ForwardToAll
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.ImagesReload
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.LanguageSetDefault(System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.LeaveServer(System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.ListPlaying
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.ListServers
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.RedisExec(System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.RemovePlaying(System.Int32)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.Restart
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.RestartShard(System.Int32)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.RotatePlaying
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.Send(System.UInt64,System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.Send(System.UInt64,System.UInt64,System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.SetAvatar(System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.SetGame(Discord.ActivityType,System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.SetName(System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.SetStatus(Mewdeko.Modules.OwnerOnly.OwnerOnly.SettableUserStatus)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.SetStream(System.String,System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.ShardStats
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.SqlExec(System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandAdd(System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandRemove(System.Int32)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandsClear
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandsList(System.Int32)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.StringsReload
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.Sudo(Discord.IGuildUser,System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.Sudo(System.String)
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.Update
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.Wait(System.Int32)
  langs:
  - csharp
  - vb
  name: OwnerOnly
  nameWithType: OwnerOnly
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly
  type: Class
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: OwnerOnly
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 39
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Initializes a new instance of the <xref href="Mewdeko.Modules.OwnerOnly.OwnerOnly" data-throw-if-not-resolved="false"></xref> class, intended for owner-only operations within the Mewdeko bot framework.
  example: []
  syntax:
    content: >-
      [OwnerOnly]

      public class OwnerOnly : MewdekoModuleBase<OwnerOnlyService>, IModuleBase
    content.vb: >-
      <OwnerOnly>

      Public Class OwnerOnly Inherits MewdekoModuleBase(Of OwnerOnlyService) Implements IModuleBase
  inheritance:
  - System.Object
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  - Discord.Commands.ModuleBase
  - Mewdeko.Common.MewdekoModule
  - Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.OwnerOnly.Services.OwnerOnlyService}
  implements:
  - Discord.Commands.IModuleBase
  inheritedMembers:
  - Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.OwnerOnly.Services.OwnerOnlyService}.Service
  - Mewdeko.Common.MewdekoModule.CultureInfo
  - Mewdeko.Common.MewdekoModule.Strings
  - Mewdeko.Common.MewdekoModule.Localization
  - Mewdeko.Common.MewdekoModule.ctx
  - Mewdeko.Common.MewdekoModule.Config
  - Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  - Mewdeko.Common.MewdekoModule.GetText(System.String)
  - Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
  - Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  - Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  - Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  - Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  - Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
  - Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.Context
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Mewdeko.Modules.OwnerOnly.OwnerOnly.Mewdeko.Extensions.Extensions.ThrowIfNull``1(System.String)
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.OwnerOnlyAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.OwnerOnlyAttribute.#ctor
    arguments: []
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.#ctor(Discord.WebSocket.DiscordSocketClient,Mewdeko.Mewdeko,Mewdeko.Services.strings.IBotStrings,Fergun.Interactive.InteractiveService,Mewdeko.Services.ICoordinator,System.Collections.Generic.IEnumerable{Mewdeko.Services.Settings.IConfigService},Mewdeko.Database.DbService,Mewdeko.Services.IDataCache,Discord.Commands.CommandService,System.IServiceProvider,Mewdeko.Services.GuildSettingsService,Mewdeko.Services.CommandHandler,Mewdeko.Common.Configs.BotConfig)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.#ctor(Discord.WebSocket.DiscordSocketClient,Mewdeko.Mewdeko,Mewdeko.Services.strings.IBotStrings,Fergun.Interactive.InteractiveService,Mewdeko.Services.ICoordinator,System.Collections.Generic.IEnumerable{Mewdeko.Services.Settings.IConfigService},Mewdeko.Database.DbService,Mewdeko.Services.IDataCache,Discord.Commands.CommandService,System.IServiceProvider,Mewdeko.Services.GuildSettingsService,Mewdeko.Services.CommandHandler,Mewdeko.Common.Configs.BotConfig)
  id: '#ctor(Discord.WebSocket.DiscordSocketClient,Mewdeko.Mewdeko,Mewdeko.Services.strings.IBotStrings,Fergun.Interactive.InteractiveService,Mewdeko.Services.ICoordinator,System.Collections.Generic.IEnumerable{Mewdeko.Services.Settings.IConfigService},Mewdeko.Database.DbService,Mewdeko.Services.IDataCache,Discord.Commands.CommandService,System.IServiceProvider,Mewdeko.Services.GuildSettingsService,Mewdeko.Services.CommandHandler,Mewdeko.Common.Configs.BotConfig)'
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: OwnerOnly(DiscordSocketClient, Mewdeko, IBotStrings, InteractiveService, ICoordinator, IEnumerable<IConfigService>, DbService, IDataCache, CommandService, IServiceProvider, GuildSettingsService, CommandHandler, BotConfig)
  nameWithType: OwnerOnly.OwnerOnly(DiscordSocketClient, Mewdeko, IBotStrings, InteractiveService, ICoordinator, IEnumerable<IConfigService>, DbService, IDataCache, CommandService, IServiceProvider, GuildSettingsService, CommandHandler, BotConfig)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.OwnerOnly(Discord.WebSocket.DiscordSocketClient, Mewdeko.Mewdeko, Mewdeko.Services.strings.IBotStrings, Fergun.Interactive.InteractiveService, Mewdeko.Services.ICoordinator, System.Collections.Generic.IEnumerable<Mewdeko.Services.Settings.IConfigService>, Mewdeko.Database.DbService, Mewdeko.Services.IDataCache, Discord.Commands.CommandService, System.IServiceProvider, Mewdeko.Services.GuildSettingsService, Mewdeko.Services.CommandHandler, Mewdeko.Common.Configs.BotConfig)
  type: Constructor
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: .ctor
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 39
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Initializes a new instance of the <xref href="Mewdeko.Modules.OwnerOnly.OwnerOnly" data-throw-if-not-resolved="false"></xref> class, intended for owner-only operations within the Mewdeko bot framework.
  example: []
  syntax:
    content: public OwnerOnly(DiscordSocketClient client, Mewdeko bot, IBotStrings strings, InteractiveService serv, ICoordinator coord, IEnumerable<IConfigService> settingServices, DbService db, IDataCache cache, CommandService commandService, IServiceProvider services, GuildSettingsService guildSettings, CommandHandler commandHandler, BotConfig config)
    parameters:
    - id: client
      type: Discord.WebSocket.DiscordSocketClient
      description: The Discord client used to interact with the Discord API.
    - id: bot
      type: Mewdeko.Mewdeko
      description: The main instance of the Mewdeko bot.
    - id: strings
      type: Mewdeko.Services.strings.IBotStrings
      description: Provides access to localized strings within the bot.
    - id: serv
      type: Fergun.Interactive.InteractiveService
      description: Interactive service for handling interactive user commands.
    - id: coord
      type: Mewdeko.Services.ICoordinator
      description: Coordinator for managing bot operations across different services and modules.
    - id: settingServices
      type: System.Collections.Generic.IEnumerable{Mewdeko.Services.Settings.IConfigService}
      description: A collection of configuration services for managing bot settings.
    - id: db
      type: Mewdeko.Database.DbService
      description: Service for database operations and access.
    - id: cache
      type: Mewdeko.Services.IDataCache
      description: Cache service for storing and retrieving temporary data.
    - id: commandService
      type: Discord.Commands.CommandService
      description: Service for handling and executing Discord commands.
    - id: services
      type: System.IServiceProvider
      description: The service provider for dependency injection.
    - id: guildSettings
      type: Mewdeko.Services.GuildSettingsService
      description: Service for accessing and modifying guild-specific settings.
    - id: commandHandler
      type: Mewdeko.Services.CommandHandler
      description: Handler for processing and executing commands received from users.
    - id: config
      type: Mewdeko.Common.Configs.BotConfig
    content.vb: Public Sub New(client As DiscordSocketClient, bot As Mewdeko, strings As IBotStrings, serv As InteractiveService, coord As ICoordinator, settingServices As IEnumerable(Of IConfigService), db As DbService, cache As IDataCache, commandService As CommandService, services As IServiceProvider, guildSettings As GuildSettingsService, commandHandler As CommandHandler, config As BotConfig)
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.#ctor*
  nameWithType.vb: OwnerOnly.New(DiscordSocketClient, Mewdeko, IBotStrings, InteractiveService, ICoordinator, IEnumerable(Of IConfigService), DbService, IDataCache, CommandService, IServiceProvider, GuildSettingsService, CommandHandler, BotConfig)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.New(Discord.WebSocket.DiscordSocketClient, Mewdeko.Mewdeko, Mewdeko.Services.strings.IBotStrings, Fergun.Interactive.InteractiveService, Mewdeko.Services.ICoordinator, System.Collections.Generic.IEnumerable(Of Mewdeko.Services.Settings.IConfigService), Mewdeko.Database.DbService, Mewdeko.Services.IDataCache, Discord.Commands.CommandService, System.IServiceProvider, Mewdeko.Services.GuildSettingsService, Mewdeko.Services.CommandHandler, Mewdeko.Common.Configs.BotConfig)
  name.vb: New(DiscordSocketClient, Mewdeko, IBotStrings, InteractiveService, ICoordinator, IEnumerable(Of IConfigService), DbService, IDataCache, CommandService, IServiceProvider, GuildSettingsService, CommandHandler, BotConfig)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.ClearUsedTokens
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.ClearUsedTokens
  id: ClearUsedTokens
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: ClearUsedTokens()
  nameWithType: OwnerOnly.ClearUsedTokens()
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.ClearUsedTokens()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ClearUsedTokens
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 90
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Clears the count of used GPT tokens after confirming with the user.
  remarks: >-
    This command prompts the user for confirmation before proceeding to clear the used token count.

    If the user confirms, it clears the count and notifies the user of completion.
  example: []
  syntax:
    content: >-
      [Cmd("ClearUsedTokens")]

      [Aliases("ClearUsedTokens")]

      public Task ClearUsedTokens()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ClearUsedTokens")>

      <Aliases("ClearUsedTokens")>

      Public Function ClearUsedTokens() As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.ClearUsedTokens*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ClearUsedTokens
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ClearUsedTokens
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Update
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.Update
  id: Update
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: OwnerOnly.Update()
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Update()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Update
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 106
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Updates the bot to the latest version available on the repository.
  example: []
  syntax:
    content: >-
      [Cmd("Update")]

      [Aliases("Update")]

      public Task Update()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Update")>

      <Aliases("Update")>

      Public Function Update() As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.Update*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Update
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Update
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Sudo(Discord.IGuildUser,System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.Sudo(Discord.IGuildUser,System.String)
  id: Sudo(Discord.IGuildUser,System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: Sudo(IGuildUser, string)
  nameWithType: OwnerOnly.Sudo(IGuildUser, string)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Sudo(Discord.IGuildUser, string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Sudo
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 259
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Executes a command as if it were sent by the specified guild user.
  remarks: >-
    This method constructs a fake message with the specified user as the author and the given command string,

    then enqueues it for command parsing and execution.
  example: []
  syntax:
    content: >-
      [Cmd("Sudo")]

      [Aliases("Sudo")]

      public Task Sudo(IGuildUser user, string args)
    parameters:
    - id: user
      type: Discord.IGuildUser
      description: The guild user to impersonate when executing the command.
    - id: args
      type: System.String
      description: The command string to execute, including command name and arguments.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Sudo")>

      <Aliases("Sudo")>

      Public Function Sudo(user As IGuildUser, args As String) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.Sudo*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Sudo
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Sudo
  nameWithType.vb: OwnerOnly.Sudo(IGuildUser, String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.Sudo(Discord.IGuildUser, String)
  name.vb: Sudo(IGuildUser, String)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Sudo(System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.Sudo(System.String)
  id: Sudo(System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: Sudo(string)
  nameWithType: OwnerOnly.Sudo(string)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Sudo(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Sudo
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 279
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Executes a command as if it were sent by the owner of the guild.
  remarks: >-
    This method constructs a fake message with the guild owner as the author and the given command string,

    then enqueues it for command parsing and execution. Useful for performing actions that require owner permissions.
  example: []
  syntax:
    content: >-
      [Cmd("Sudo")]

      [Aliases("Sudo")]

      public Task Sudo(string args)
    parameters:
    - id: args
      type: System.String
      description: The command string to execute, including command name and arguments.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Sudo")>

      <Aliases("Sudo")>

      Public Function Sudo(args As String) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.Sudo*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Sudo
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Sudo
  nameWithType.vb: OwnerOnly.Sudo(String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.Sudo(String)
  name.vb: Sudo(String)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.RedisExec(System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.RedisExec(System.String)
  id: RedisExec(System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: RedisExec(string)
  nameWithType: OwnerOnly.RedisExec(string)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.RedisExec(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RedisExec
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 302
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Executes a Redis command and returns the result.
  remarks: >-
    This method sends the specified command to Redis through the configured cache connection.

    The result of the command execution is then sent back as a message in the Discord channel.
  example: []
  syntax:
    content: >-
      [Cmd("RedisExec")]

      [Aliases("RedisExec")]

      public Task RedisExec(string command)
    parameters:
    - id: command
      type: System.String
      description: The Redis command to execute.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("RedisExec")>

      <Aliases("RedisExec")>

      Public Function RedisExec(command As String) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.RedisExec*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RedisExec
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RedisExec
  nameWithType.vb: OwnerOnly.RedisExec(String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.RedisExec(String)
  name.vb: RedisExec(String)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.SqlExec(System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.SqlExec(System.String)
  id: SqlExec(System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: SqlExec(string)
  nameWithType: OwnerOnly.SqlExec(string)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.SqlExec(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SqlExec
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 320
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Executes a raw SQL command against the database.
  remarks: >-
    Prompts the user for confirmation before executing the SQL command.

    The number of affected rows is sent back as a message in the Discord channel.

    Use with caution, as executing raw SQL can directly affect the database integrity.
  example: []
  syntax:
    content: >-
      [Cmd("SqlExec")]

      [Aliases("SqlExec")]

      public Task SqlExec(string sql)
    parameters:
    - id: sql
      type: System.String
      description: The SQL command to execute.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SqlExec")>

      <Aliases("SqlExec")>

      Public Function SqlExec(sql As String) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.SqlExec*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SqlExec
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SqlExec
  nameWithType.vb: OwnerOnly.SqlExec(String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.SqlExec(String)
  name.vb: SqlExec(String)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.ListServers
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.ListServers
  id: ListServers
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: ListServers()
  nameWithType: OwnerOnly.ListServers()
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.ListServers()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ListServers
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 337
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Lists all servers the bot is currently in.
  remarks: >-
    This method creates a paginated list of servers, showing server names, IDs, member counts, online member counts,

    server owners, and creation dates. Pagination allows browsing through the server list if it exceeds the page limit.
  example: []
  syntax:
    content: >-
      [Cmd("ListServers")]

      [Aliases("ListServers")]

      public Task ListServers()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ListServers")>

      <Aliases("ListServers")>

      Public Function ListServers() As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.ListServers*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ListServers
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ListServers
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.CommandStats
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.CommandStats
  id: CommandStats
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: CommandStats()
  nameWithType: OwnerOnly.CommandStats()
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.CommandStats()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: CommandStats
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 378
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Retrieves and displays statistics on the most used command, module, guild, and user.
  remarks: >-
    This method calculates and reports the top entities based on their usage count.

    It displays the most frequently used command, the module that's used the most,

    the user who has used commands the most, and the guild with the highest command usage.

    These statistics are presented as an embed in the Discord channel.
  example: []
  syntax:
    content: >-
      [Cmd("CommandStats")]

      [Aliases("CommandStats")]

      public Task CommandStats()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("CommandStats")>

      <Aliases("CommandStats")>

      Public Function CommandStats() As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.CommandStats*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: CommandStats
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CommandStats
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Config(System.String,System.String,System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.Config(System.String,System.String,System.String)
  id: Config(System.String,System.String,System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: Config(string?, string?, string?)
  nameWithType: OwnerOnly.Config(string?, string?, string?)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Config(string?, string?, string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Config
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 419
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Changes yml based config for the bot.
  example: []
  syntax:
    content: >-
      [Cmd("Config")]

      [Aliases("Config")]

      public Task Config(string? name = null, string? prop = null, string? value = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the config to change.
    - id: prop
      type: System.String
      description: The property of the config to change.
    - id: value
      type: System.String
      description: The new value to set for the property.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Config")>

      <Aliases("Config")>

      Public Function Config(name As String = Nothing, prop As String = Nothing, value As String = Nothing) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.Config*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Config
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Config
  nameWithType.vb: OwnerOnly.Config(String, String, String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.Config(String, String, String)
  name.vb: Config(String, String, String)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.RotatePlaying
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.RotatePlaying
  id: RotatePlaying
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: RotatePlaying()
  nameWithType: OwnerOnly.RotatePlaying()
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.RotatePlaying()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RotatePlaying
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 552
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Toggles the rotation of playing statuses for the bot.
  remarks: If rotation is enabled, it will be disabled, and vice versa. Confirmation of the action is sent as a reply.
  example: []
  syntax:
    content: >-
      [Cmd("RotatePlaying")]

      [Aliases("RotatePlaying")]

      public Task RotatePlaying()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("RotatePlaying")>

      <Aliases("RotatePlaying")>

      Public Function RotatePlaying() As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.RotatePlaying*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RotatePlaying
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RotatePlaying
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.AddPlaying(Discord.ActivityType,System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.AddPlaying(Discord.ActivityType,System.String)
  id: AddPlaying(Discord.ActivityType,System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: AddPlaying(ActivityType, string)
  nameWithType: OwnerOnly.AddPlaying(ActivityType, string)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.AddPlaying(Discord.ActivityType, string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AddPlaying
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 569
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Adds a new status to the rotation of playing statuses for the bot.
  remarks: Adds a new status with the specified activity type and text. Confirmation of addition is sent as a reply.
  example: []
  syntax:
    content: >-
      [Cmd("AddPlaying")]

      [Aliases("AddPlaying")]

      public Task AddPlaying(ActivityType t, string status)
    parameters:
    - id: t
      type: Discord.ActivityType
      description: The type of activity (e.g., Playing, Streaming).
    - id: status
      type: System.String
      description: The text of the status to add.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("AddPlaying")>

      <Aliases("AddPlaying")>

      Public Function AddPlaying(t As ActivityType, status As String) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.AddPlaying*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddPlaying
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: AddPlaying
  nameWithType.vb: OwnerOnly.AddPlaying(ActivityType, String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.AddPlaying(Discord.ActivityType, String)
  name.vb: AddPlaying(ActivityType, String)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.ListPlaying
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.ListPlaying
  id: ListPlaying
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: ListPlaying()
  nameWithType: OwnerOnly.ListPlaying()
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.ListPlaying()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ListPlaying
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 583
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Lists all statuses currently in the rotation.
  remarks: Sends a reply with a numbered list of all statuses in the rotation. If no statuses are set, sends an error message.
  example: []
  syntax:
    content: >-
      [Cmd("ListPlaying")]

      [Aliases("ListPlaying")]

      public Task ListPlaying()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ListPlaying")>

      <Aliases("ListPlaying")>

      Public Function ListPlaying() As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.ListPlaying*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ListPlaying
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ListPlaying
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.DefPrefix(System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.DefPrefix(System.String)
  id: DefPrefix(System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: DefPrefix(string?)
  nameWithType: OwnerOnly.DefPrefix(string?)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.DefPrefix(string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: DefPrefix
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 609
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Sets or displays the default command prefix.
  remarks: >-
    Changes the bot's command prefix for the server or displays the current prefix if no new prefix is provided.

    Confirmation of the new prefix or the current prefix is sent as a reply.
  example: []
  syntax:
    content: >-
      [Cmd("DefPrefix")]

      [Aliases("DefPrefix")]

      public Task DefPrefix(string? prefix = null)
    parameters:
    - id: prefix
      type: System.String
      description: The new prefix to set. If null or whitespace, the current prefix is displayed instead.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("DefPrefix")>

      <Aliases("DefPrefix")>

      Public Function DefPrefix(prefix As String = Nothing) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.DefPrefix*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: DefPrefix
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DefPrefix
  nameWithType.vb: OwnerOnly.DefPrefix(String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.DefPrefix(String)
  name.vb: DefPrefix(String)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.RemovePlaying(System.Int32)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.RemovePlaying(System.Int32)
  id: RemovePlaying(System.Int32)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: RemovePlaying(int)
  nameWithType: OwnerOnly.RemovePlaying(int)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.RemovePlaying(int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RemovePlaying
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 633
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Removes a status from the rotating playing statuses by its index.
  remarks: If the status at the provided index exists, it will be removed, and a confirmation message is sent.
  example: []
  syntax:
    content: >-
      [Cmd("RemovePlaying")]

      [Aliases("RemovePlaying")]

      public Task RemovePlaying(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The one-based index of the status to remove. The actual removal will use zero-based indexing.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("RemovePlaying")>

      <Aliases("RemovePlaying")>

      Public Function RemovePlaying(index As Integer) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.RemovePlaying*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemovePlaying
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RemovePlaying
  nameWithType.vb: OwnerOnly.RemovePlaying(Integer)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.RemovePlaying(Integer)
  name.vb: RemovePlaying(Integer)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.LanguageSetDefault(System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.LanguageSetDefault(System.String)
  id: LanguageSetDefault(System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: LanguageSetDefault(string)
  nameWithType: OwnerOnly.LanguageSetDefault(string)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.LanguageSetDefault(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: LanguageSetDefault
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 654
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Sets the default language for the bot by specifying a culture name.
  remarks: >-
    This method allows changing the bot's default language or resetting it to its original default.

    A confirmation message will be sent upon successful change.
  example: []
  syntax:
    content: >-
      [Cmd("LanguageSetDefault")]

      [Aliases("LanguageSetDefault")]

      public Task LanguageSetDefault(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the culture to set as the default language. Use "default" to reset to the bot's original default language.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("LanguageSetDefault")>

      <Aliases("LanguageSetDefault")>

      Public Function LanguageSetDefault(name As String) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.LanguageSetDefault*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: LanguageSetDefault
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: LanguageSetDefault
  nameWithType.vb: OwnerOnly.LanguageSetDefault(String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.LanguageSetDefault(String)
  name.vb: LanguageSetDefault(String)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandAdd(System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandAdd(System.String)
  id: StartupCommandAdd(System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: StartupCommandAdd(string)
  nameWithType: OwnerOnly.StartupCommandAdd(string)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandAdd(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: StartupCommandAdd
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 688
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Adds a new startup command to be executed when the bot starts.
  remarks: >-
    Requires the user to have Administrator permissions or be the owner of the bot.

    Commands that could potentially restart or shut down the bot are ignored for safety reasons.
  example: []
  syntax:
    content: >-
      [Cmd("StartupCommandAdd")]

      [Aliases("StartupCommandAdd")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      [OwnerOnly]

      public Task StartupCommandAdd(string cmdText)
    parameters:
    - id: cmdText
      type: System.String
      description: The text of the command to add, excluding the prefix.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("StartupCommandAdd")>

      <Aliases("StartupCommandAdd")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      <OwnerOnly>

      Public Function StartupCommandAdd(cmdText As String) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandAdd*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: StartupCommandAdd
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: StartupCommandAdd
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  - type: Mewdeko.Common.Attributes.TextCommands.OwnerOnlyAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.OwnerOnlyAttribute.#ctor
    arguments: []
  nameWithType.vb: OwnerOnly.StartupCommandAdd(String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandAdd(String)
  name.vb: StartupCommandAdd(String)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandAdd(System.Int32,System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandAdd(System.Int32,System.String)
  id: AutoCommandAdd(System.Int32,System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: AutoCommandAdd(int, string)
  nameWithType: OwnerOnly.AutoCommandAdd(int, string)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandAdd(int, string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AutoCommandAdd
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 731
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Adds an auto command to be executed periodically in the specified guild.
  remarks: >-
    Requires the user to have Administrator permissions or to be the owner of the bot.

    The command will not be added if it fails any precondition checks,

    if it matches a forbidden command (e.g., a command to shut down the bot),

    or if the maximum number of auto commands (15) for the guild has been reached.
  example: []
  syntax:
    content: >-
      [Cmd("AutoCommandAdd")]

      [Aliases("AutoCommandAdd")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      [OwnerOnly]

      public Task AutoCommandAdd(int interval, string cmdText)
    parameters:
    - id: interval
      type: System.Int32
      description: The interval in seconds at which the command should be executed. Must be 5 seconds or more.
    - id: cmdText
      type: System.String
      description: The command text to be executed automatically.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("AutoCommandAdd")>

      <Aliases("AutoCommandAdd")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      <OwnerOnly>

      Public Function AutoCommandAdd(interval As Integer, cmdText As String) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandAdd*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: AutoCommandAdd
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: AutoCommandAdd
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  - type: Mewdeko.Common.Attributes.TextCommands.OwnerOnlyAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.OwnerOnlyAttribute.#ctor
    arguments: []
  nameWithType.vb: OwnerOnly.AutoCommandAdd(Integer, String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandAdd(Integer, String)
  name.vb: AutoCommandAdd(Integer, String)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandsList(System.Int32)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandsList(System.Int32)
  id: StartupCommandsList(System.Int32)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: StartupCommandsList(int)
  nameWithType: OwnerOnly.StartupCommandsList(int)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandsList(int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: StartupCommandsList
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 780
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Lists the startup commands configured for the guild.
  remarks: >-
    Displays a paginated list of startup commands. Each page shows up to 5 commands.

    Requires the user to be the owner of the bot.
  example: []
  syntax:
    content: >-
      [Cmd("StartupCommandsList")]

      [Aliases("StartupCommandsList")]

      [RequireContext(ContextType.Guild)]

      [OwnerOnly]

      public Task StartupCommandsList(int page = 1)
    parameters:
    - id: page
      type: System.Int32
      description: The page number of the list to display, starting from 1.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("StartupCommandsList")>

      <Aliases("StartupCommandsList")>

      <RequireContext(ContextType.Guild)>

      <OwnerOnly>

      Public Function StartupCommandsList(page As Integer = 1) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandsList*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: StartupCommandsList
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: StartupCommandsList
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.OwnerOnlyAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.OwnerOnlyAttribute.#ctor
    arguments: []
  nameWithType.vb: OwnerOnly.StartupCommandsList(Integer)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandsList(Integer)
  name.vb: StartupCommandsList(Integer)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandsList(System.Int32)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandsList(System.Int32)
  id: AutoCommandsList(System.Int32)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: AutoCommandsList(int)
  nameWithType: OwnerOnly.AutoCommandsList(int)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandsList(int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AutoCommandsList
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 821
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Lists the auto commands configured for the guild.
  remarks: >-
    Displays a paginated list of auto commands. Each page shows up to 5 commands.

    Requires the user to be the owner of the bot and the command to be executed in a guild context.

    If there are no auto commands set, an error message is displayed.
  example: []
  syntax:
    content: >-
      [Cmd("AutoCommandsList")]

      [Aliases("AutoCommandsList")]

      [RequireContext(ContextType.Guild)]

      [OwnerOnly]

      public Task AutoCommandsList(int page = 1)
    parameters:
    - id: page
      type: System.Int32
      description: The page number of the list to display, starting from 1.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("AutoCommandsList")>

      <Aliases("AutoCommandsList")>

      <RequireContext(ContextType.Guild)>

      <OwnerOnly>

      Public Function AutoCommandsList(page As Integer = 1) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandsList*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: AutoCommandsList
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: AutoCommandsList
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.OwnerOnlyAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.OwnerOnlyAttribute.#ctor
    arguments: []
  nameWithType.vb: OwnerOnly.AutoCommandsList(Integer)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandsList(Integer)
  name.vb: AutoCommandsList(Integer)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Wait(System.Int32)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.Wait(System.Int32)
  id: Wait(System.Int32)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: Wait(int)
  nameWithType: OwnerOnly.Wait(int)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Wait(int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Wait
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 868
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Executes a wait command that delays for a specified number of milliseconds.
  remarks: >-
    The command message is immediately deleted, and a new message showing the delay is sent.

    This message is then deleted after the delay period has passed.

    If the provided milliseconds value is less than or equal to 0, the command does nothing.
  example: []
  syntax:
    content: >-
      [Cmd("Wait")]

      [Aliases("Wait")]

      public Task Wait(int miliseconds)
    parameters:
    - id: miliseconds
      type: System.Int32
      description: The number of milliseconds to delay.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Wait")>

      <Aliases("Wait")>

      Public Function Wait(miliseconds As Integer) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.Wait*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Wait
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Wait
  nameWithType.vb: OwnerOnly.Wait(Integer)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.Wait(Integer)
  name.vb: Wait(Integer)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandRemove(System.Int32)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandRemove(System.Int32)
  id: AutoCommandRemove(System.Int32)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: AutoCommandRemove(int)
  nameWithType: OwnerOnly.AutoCommandRemove(int)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandRemove(int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AutoCommandRemove
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 898
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Removes an auto command based on its index.
  remarks: >-
    Requires the user to have Administrator permissions or to be the owner of the bot.

    The command will decrement the index to match zero-based indexing before attempting removal.

    If the removal fails, an error message is sent.
  example: []
  syntax:
    content: >-
      [Cmd("AutoCommandRemove")]

      [Aliases("AutoCommandRemove")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      [OwnerOnly]

      public Task AutoCommandRemove(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The one-based index of the auto command to remove.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("AutoCommandRemove")>

      <Aliases("AutoCommandRemove")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      <OwnerOnly>

      Public Function AutoCommandRemove(index As Integer) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandRemove*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: AutoCommandRemove
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: AutoCommandRemove
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  - type: Mewdeko.Common.Attributes.TextCommands.OwnerOnlyAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.OwnerOnlyAttribute.#ctor
    arguments: []
  nameWithType.vb: OwnerOnly.AutoCommandRemove(Integer)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandRemove(Integer)
  name.vb: AutoCommandRemove(Integer)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandRemove(System.Int32)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandRemove(System.Int32)
  id: StartupCommandRemove(System.Int32)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: StartupCommandRemove(int)
  nameWithType: OwnerOnly.StartupCommandRemove(int)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandRemove(int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: StartupCommandRemove
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 920
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Removes a startup command based on its index.
  remarks: >-
    Requires the user to be the owner of the bot.

    The command will decrement the index to match zero-based indexing before attempting removal.

    If the removal fails, an error message is sent; otherwise, a confirmation message is sent.
  example: []
  syntax:
    content: >-
      [Cmd("StartupCommandRemove")]

      [Aliases("StartupCommandRemove")]

      [RequireContext(ContextType.Guild)]

      [OwnerOnly]

      public Task StartupCommandRemove(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The one-based index of the startup command to remove.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("StartupCommandRemove")>

      <Aliases("StartupCommandRemove")>

      <RequireContext(ContextType.Guild)>

      <OwnerOnly>

      Public Function StartupCommandRemove(index As Integer) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandRemove*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: StartupCommandRemove
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: StartupCommandRemove
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.OwnerOnlyAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.OwnerOnlyAttribute.#ctor
    arguments: []
  nameWithType.vb: OwnerOnly.StartupCommandRemove(Integer)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandRemove(Integer)
  name.vb: StartupCommandRemove(Integer)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandsClear
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandsClear
  id: StartupCommandsClear
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: StartupCommandsClear()
  nameWithType: OwnerOnly.StartupCommandsClear()
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandsClear()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: StartupCommandsClear
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 936
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Clears all startup commands for the guild.
  remarks: >-
    Requires the user to have Administrator permissions or to be the owner of the bot.

    A confirmation message is sent upon successful clearance.
  example: []
  syntax:
    content: >-
      [Cmd("StartupCommandsClear")]

      [Aliases("StartupCommandsClear")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      [OwnerOnly]

      public Task StartupCommandsClear()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("StartupCommandsClear")>

      <Aliases("StartupCommandsClear")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      <OwnerOnly>

      Public Function StartupCommandsClear() As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandsClear*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: StartupCommandsClear
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: StartupCommandsClear
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  - type: Mewdeko.Common.Attributes.TextCommands.OwnerOnlyAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.OwnerOnlyAttribute.#ctor
    arguments: []
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.ForwardMessages
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.ForwardMessages
  id: ForwardMessages
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: ForwardMessages()
  nameWithType: OwnerOnly.ForwardMessages()
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.ForwardMessages()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ForwardMessages
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 952
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Toggles the forwarding of direct messages to the bot's owner(s).
  remarks: >-
    If message forwarding is enabled, it will be disabled, and vice versa.

    A confirmation message is sent indicating the new state of message forwarding.
  example: []
  syntax:
    content: >-
      [Cmd("ForwardMessages")]

      [Aliases("ForwardMessages")]

      public Task ForwardMessages()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ForwardMessages")>

      <Aliases("ForwardMessages")>

      Public Function ForwardMessages() As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.ForwardMessages*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ForwardMessages
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ForwardMessages
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.ForwardToAll
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.ForwardToAll
  id: ForwardToAll
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: ForwardToAll()
  nameWithType: OwnerOnly.ForwardToAll()
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.ForwardToAll()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ForwardToAll
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 970
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Toggles whether forwarded messages are sent to all of the bot's owners or just the primary owner.
  remarks: >-
    If forwarding to all owners is enabled, it will be disabled, and vice versa.

    A confirmation message is sent indicating the new state of this setting.
  example: []
  syntax:
    content: >-
      [Cmd("ForwardToAll")]

      [Aliases("ForwardToAll")]

      public Task ForwardToAll()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ForwardToAll")>

      <Aliases("ForwardToAll")>

      Public Function ForwardToAll() As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.ForwardToAll*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ForwardToAll
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ForwardToAll
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.ShardStats
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.ShardStats
  id: ShardStats
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: ShardStats()
  nameWithType: OwnerOnly.ShardStats()
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.ShardStats()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ShardStats
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 990
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Displays statistics for all shards of the bot, including their statuses, guild counts, and user counts.
  remarks: >-
    This command aggregates the current status of all shards and displays a summary followed by a detailed

    paginated list of each shard's status, including the time since last update, guild count, and user count.

    The statuses are represented by emojis for quick visual reference.
  example: []
  syntax:
    content: >-
      [Cmd("ShardStats")]

      [Aliases("ShardStats")]

      public Task ShardStats()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ShardStats")>

      <Aliases("ShardStats")>

      Public Function ShardStats() As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.ShardStats*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ShardStats
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ShardStats
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.RestartShard(System.Int32)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.RestartShard(System.Int32)
  id: RestartShard(System.Int32)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: RestartShard(int)
  nameWithType: OwnerOnly.RestartShard(int)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.RestartShard(int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RestartShard
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 1062
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Attempts to restart a specified shard by its ID.
  remarks: Sends a confirmation message if the shard is successfully marked for restart, or an error message if the shard ID is not found.
  example: []
  syntax:
    content: >-
      [Cmd("RestartShard")]

      [Aliases("RestartShard")]

      public Task RestartShard(int shardId)
    parameters:
    - id: shardId
      type: System.Int32
      description: The ID of the shard to restart.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("RestartShard")>

      <Aliases("RestartShard")>

      Public Function RestartShard(shardId As Integer) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.RestartShard*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RestartShard
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RestartShard
  nameWithType.vb: OwnerOnly.RestartShard(Integer)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.RestartShard(Integer)
  name.vb: RestartShard(Integer)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.LeaveServer(System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.LeaveServer(System.String)
  id: LeaveServer(System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: LeaveServer(string)
  nameWithType: OwnerOnly.LeaveServer(string)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.LeaveServer(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: LeaveServer
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 1079
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Commands the bot to leave a server.
  remarks: This action is irreversible through bot commands and should be used with caution.
  example: []
  syntax:
    content: >-
      [Cmd("LeaveServer")]

      [Aliases("LeaveServer")]

      public Task LeaveServer(string guildStr)
    parameters:
    - id: guildStr
      type: System.String
      description: The identifier or name of the guild to leave.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("LeaveServer")>

      <Aliases("LeaveServer")>

      Public Function LeaveServer(guildStr As String) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.LeaveServer*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: LeaveServer
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: LeaveServer
  nameWithType.vb: OwnerOnly.LeaveServer(String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.LeaveServer(String)
  name.vb: LeaveServer(String)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Die
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.Die
  id: Die
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: Die()
  nameWithType: OwnerOnly.Die()
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Die()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Die
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 1088
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Initiates a shutdown of the bot.
  remarks: Before shutting down, the bot attempts to send a confirmation message. Delays for a short period before triggering the shutdown sequence.
  example: []
  syntax:
    content: >-
      [Cmd("Die")]

      [Aliases("Die")]

      public Task Die()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Die")>

      <Aliases("Die")>

      Public Function Die() As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.Die*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Die
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Die
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Restart
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.Restart
  id: Restart
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: Restart()
  nameWithType: OwnerOnly.Restart()
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Restart()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Restart
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 1112
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Restarts the entire bot.
  remarks: Sends an error message if the restart fails, otherwise sends a confirmation message before initiating the restart.
  example: []
  syntax:
    content: >-
      [Cmd("Restart")]

      [Aliases("Restart")]

      public Task Restart()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Restart")>

      <Aliases("Restart")>

      Public Function Restart() As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.Restart*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Restart
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Restart
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetName(System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.SetName(System.String)
  id: SetName(System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: SetName(string)
  nameWithType: OwnerOnly.SetName(string)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetName(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetName
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 1139
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Changes the bot's username to the specified new name.
  remarks: Does nothing if the new name is empty or whitespace. If a change is attempted and ratelimited, logs a warning message.
  example: []
  syntax:
    content: >-
      [Cmd("SetName")]

      [Aliases("SetName")]

      public Task SetName(string newName)
    parameters:
    - id: newName
      type: System.String
      description: The new username for the bot.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SetName")>

      <Aliases("SetName")>

      Public Function SetName(newName As String) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetName*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SetName
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SetName
  nameWithType.vb: OwnerOnly.SetName(String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetName(String)
  name.vb: SetName(String)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetStatus(Mewdeko.Modules.OwnerOnly.OwnerOnly.SettableUserStatus)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.SetStatus(Mewdeko.Modules.OwnerOnly.OwnerOnly.SettableUserStatus)
  id: SetStatus(Mewdeko.Modules.OwnerOnly.OwnerOnly.SettableUserStatus)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: SetStatus(SettableUserStatus)
  nameWithType: OwnerOnly.SetStatus(OwnerOnly.SettableUserStatus)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetStatus(Mewdeko.Modules.OwnerOnly.OwnerOnly.SettableUserStatus)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetStatus
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 1165
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Sets the bot's online status.
  remarks: "Changes the bot's presence status to one of the specified options: Online, Idle, Do Not Disturb, or Invisible."
  example: []
  syntax:
    content: >-
      [Cmd("SetStatus")]

      [Aliases("SetStatus")]

      public Task SetStatus(OwnerOnly.SettableUserStatus status)
    parameters:
    - id: status
      type: Mewdeko.Modules.OwnerOnly.OwnerOnly.SettableUserStatus
      description: The new status to set.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SetStatus")>

      <Aliases("SetStatus")>

      Public Function SetStatus(status As OwnerOnly.SettableUserStatus) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetStatus*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SetStatus
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SetStatus
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetAvatar(System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.SetAvatar(System.String)
  id: SetAvatar(System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: SetAvatar(string?)
  nameWithType: OwnerOnly.SetAvatar(string?)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetAvatar(string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetAvatar
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 1180
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Sets the bot's avatar.
  remarks: Attempts to change the bot's avatar to the image found at the specified URL. Confirmation is sent upon success.
  example: []
  syntax:
    content: >-
      [Cmd("SetAvatar")]

      [Aliases("SetAvatar")]

      public Task SetAvatar(string? img = null)
    parameters:
    - id: img
      type: System.String
      description: The URL of the new avatar image. If null, the command may default to removing the current avatar or doing nothing, based on implementation.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SetAvatar")>

      <Aliases("SetAvatar")>

      Public Function SetAvatar(img As String = Nothing) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetAvatar*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SetAvatar
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SetAvatar
  nameWithType.vb: OwnerOnly.SetAvatar(String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetAvatar(String)
  name.vb: SetAvatar(String)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetGame(Discord.ActivityType,System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.SetGame(Discord.ActivityType,System.String)
  id: SetGame(Discord.ActivityType,System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: SetGame(ActivityType, string?)
  nameWithType: OwnerOnly.SetGame(ActivityType, string?)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetGame(Discord.ActivityType, string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetGame
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 1197
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Sets the bot's currently playing game.
  remarks: This method updates the bot's "Playing" status. The actual displayed status will depend on the provided activity type.
  example: []
  syntax:
    content: >-
      [Cmd("SetGame")]

      [Aliases("SetGame")]

      public Task SetGame(ActivityType type, string? game = null)
    parameters:
    - id: type
      type: Discord.ActivityType
      description: The type of activity (e.g., Playing, Streaming).
    - id: game
      type: System.String
      description: The name of the game or activity. If null, might clear the current game.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SetGame")>

      <Aliases("SetGame")>

      Public Function SetGame(type As ActivityType, game As String = Nothing) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetGame*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SetGame
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SetGame
  nameWithType.vb: OwnerOnly.SetGame(ActivityType, String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetGame(Discord.ActivityType, String)
  name.vb: SetGame(ActivityType, String)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetStream(System.String,System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.SetStream(System.String,System.String)
  id: SetStream(System.String,System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: SetStream(string, string?)
  nameWithType: OwnerOnly.SetStream(string, string?)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetStream(string, string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetStream
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 1217
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Sets the bot's streaming status.
  remarks: Changes the bot's activity to streaming, using the provided URL and name for the stream. Useful for when the bot is used to indicate live streams.
  example: []
  syntax:
    content: >-
      [Cmd("SetStream")]

      [Aliases("SetStream")]

      public Task SetStream(string url, string? name = null)
    parameters:
    - id: url
      type: System.String
      description: The URL of the stream.
    - id: name
      type: System.String
      description: The name of the stream. If null, might use a default name or no name.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SetStream")>

      <Aliases("SetStream")>

      Public Function SetStream(url As String, name As String = Nothing) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetStream*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SetStream
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SetStream
  nameWithType.vb: OwnerOnly.SetStream(String, String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetStream(String, String)
  name.vb: SetStream(String, String)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Send(System.UInt64,System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.Send(System.UInt64,System.String)
  id: Send(System.UInt64,System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: Send(ulong, string)
  nameWithType: OwnerOnly.Send(ulong, string)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Send(ulong, string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Send
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 1233
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Sends a message to a specified channel or user.
  example: []
  syntax:
    content: >-
      [Cmd("Send")]

      [Aliases("Send")]

      public Task Send(ulong whereOrTo, string msg)
    parameters:
    - id: whereOrTo
      type: System.UInt64
      description: The ID of the channel or user to send the message to.
    - id: msg
      type: System.String
      description: The message to send.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: >-
      <Cmd("Send")>

      <Aliases("Send")>

      Public Function Send(whereOrTo As ULong, msg As String) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.Send*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Send
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Send
  nameWithType.vb: OwnerOnly.Send(ULong, String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.Send(ULong, String)
  name.vb: Send(ULong, String)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Send(System.UInt64,System.UInt64,System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.Send(System.UInt64,System.UInt64,System.String)
  id: Send(System.UInt64,System.UInt64,System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: Send(ulong, ulong, string?)
  nameWithType: OwnerOnly.Send(ulong, ulong, string?)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Send(ulong, ulong, string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Send
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 1246
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Sends a message to a specified channel or user.
  remarks: If the first ID is a server, the second ID is a channel, and the message is sent to that channel.
  example: []
  syntax:
    content: >-
      [Cmd("Send")]

      [Aliases("Send")]

      public Task Send(ulong whereOrTo, ulong to = 0, string? msg = null)
    parameters:
    - id: whereOrTo
      type: System.UInt64
      description: The ID of the channel or user to send the message to.
    - id: to
      type: System.UInt64
      description: The ID of the user to send the message to.
    - id: msg
      type: System.String
      description: The message to send.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Send")>

      <Aliases("Send")>

      Public Function Send(whereOrTo As ULong, [to] As ULong = 0, msg As String = Nothing) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.Send*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Send
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Send
  nameWithType.vb: OwnerOnly.Send(ULong, ULong, String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.Send(ULong, ULong, String)
  name.vb: Send(ULong, ULong, String)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.ImagesReload
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.ImagesReload
  id: ImagesReload
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: ImagesReload()
  nameWithType: OwnerOnly.ImagesReload()
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.ImagesReload()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ImagesReload
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 1337
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Initiates the reloading of images used by the bot.
  remarks: >-
    This command triggers a process to reload all images, ensuring that any updates to image resources are reflected without restarting the bot.

    A confirmation message is sent upon the start of the reload process.
  example: []
  syntax:
    content: >-
      [Cmd("ImagesReload")]

      [Aliases("ImagesReload")]

      public Task ImagesReload()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ImagesReload")>

      <Aliases("ImagesReload")>

      Public Function ImagesReload() As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.ImagesReload*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ImagesReload
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ImagesReload
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.StringsReload
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.StringsReload
  id: StringsReload
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: StringsReload()
  nameWithType: OwnerOnly.StringsReload()
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.StringsReload()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: StringsReload
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 1351
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Initiates the reloading of bot strings (localizations).
  remarks: >-
    This command triggers a process to reload all localized strings, ensuring that any updates to text resources are applied without restarting the bot.

    A confirmation message is sent upon successful reloading of bot strings.
  example: []
  syntax:
    content: >-
      [Cmd("StringsReload")]

      [Aliases("StringsReload")]

      public Task StringsReload()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("StringsReload")>

      <Aliases("StringsReload")>

      Public Function StringsReload() As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.StringsReload*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: StringsReload
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: StringsReload
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Bash(System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.Bash(System.String)
  id: Bash(System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: Bash(string)
  nameWithType: OwnerOnly.Bash(string)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Bash(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Bash
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 1375
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Executes a bash command. Depending on the platform, the command is executed in either bash or PowerShell.
  remarks: The command is executed in a new process, and the output is sent as a paginated message. If the process hangs, it is terminated. The command has a timeout of 2 hours. The output is split into chunks of 1988 characters to avoid Discord message limits.
  example: []
  syntax:
    content: >-
      [Cmd("Bash")]

      [Aliases("Bash")]

      public Task Bash(string message)
    parameters:
    - id: message
      type: System.String
      description: The command to execute.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Bash")>

      <Aliases("Bash")>

      Public Function Bash(message As String) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.Bash*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Bash
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Bash
  nameWithType.vb: OwnerOnly.Bash(String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.Bash(String)
  name.vb: Bash(String)
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Evaluate(System.String)
  commentId: M:Mewdeko.Modules.OwnerOnly.OwnerOnly.Evaluate(System.String)
  id: Evaluate(System.String)
  parent: Mewdeko.Modules.OwnerOnly.OwnerOnly
  langs:
  - csharp
  - vb
  name: Evaluate(string)
  nameWithType: OwnerOnly.Evaluate(string)
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Evaluate(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Evaluate
    path: src/Mewdeko/Modules/OwnerOnly/OwnerOnly.cs
    startLine: 1476
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.OwnerOnly
  summary: Evaluates a C# code snippet.
  remarks: The code is compiled and executed in a sandboxed environment. The result is displayed in an embed, including the return value, compilation time, and execution time.
  example: []
  syntax:
    content: >-
      [Cmd("Evaluate")]

      [Aliases("Evaluate")]

      [OwnerOnly]

      public Task Evaluate(string code)
    parameters:
    - id: code
      type: System.String
      description: The C# code to evaluate.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Evaluate")>

      <Aliases("Evaluate")>

      <OwnerOnly>

      Public Function Evaluate(code As String) As Task
  overload: Mewdeko.Modules.OwnerOnly.OwnerOnly.Evaluate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: ''
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Evaluate
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Evaluate
  - type: Mewdeko.Common.Attributes.TextCommands.OwnerOnlyAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.OwnerOnlyAttribute.#ctor
    arguments: []
  nameWithType.vb: OwnerOnly.Evaluate(String)
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.Evaluate(String)
  name.vb: Evaluate(String)
references:
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly
  commentId: T:Mewdeko.Modules.OwnerOnly.OwnerOnly
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html
  name: OwnerOnly
  nameWithType: OwnerOnly
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly
- uid: Mewdeko.Modules.OwnerOnly
  commentId: N:Mewdeko.Modules.OwnerOnly
  href: Mewdeko.html
  name: Mewdeko.Modules.OwnerOnly
  nameWithType: Mewdeko.Modules.OwnerOnly
  fullName: Mewdeko.Modules.OwnerOnly
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Modules
    name: Modules
    href: Mewdeko.Modules.html
  - name: .
  - uid: Mewdeko.Modules.OwnerOnly
    name: OwnerOnly
    href: Mewdeko.Modules.OwnerOnly.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Modules
    name: Modules
    href: Mewdeko.Modules.html
  - name: .
  - uid: Mewdeko.Modules.OwnerOnly
    name: OwnerOnly
    href: Mewdeko.Modules.OwnerOnly.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  commentId: T:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  parent: Discord.Commands
  definition: Discord.Commands.ModuleBase`1
  name: ModuleBase<ICommandContext>
  nameWithType: ModuleBase<ICommandContext>
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>
  nameWithType.vb: ModuleBase(Of ICommandContext)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext)
  name.vb: ModuleBase(Of ICommandContext)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: <
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase
  commentId: T:Discord.Commands.ModuleBase
  parent: Discord.Commands
  isExternal: true
  name: ModuleBase
  nameWithType: ModuleBase
  fullName: Discord.Commands.ModuleBase
- uid: Mewdeko.Common.MewdekoModule
  commentId: T:Mewdeko.Common.MewdekoModule
  parent: Mewdeko.Common
  href: Mewdeko.Common.MewdekoModule.html
  name: MewdekoModule
  nameWithType: MewdekoModule
  fullName: Mewdeko.Common.MewdekoModule
- uid: Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.OwnerOnly.Services.OwnerOnlyService}
  commentId: T:Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.OwnerOnly.Services.OwnerOnlyService}
  parent: Mewdeko.Common
  definition: Mewdeko.Common.MewdekoModuleBase`1
  href: Mewdeko.Common.MewdekoModuleBase-1.html
  name: MewdekoModuleBase<OwnerOnlyService>
  nameWithType: MewdekoModuleBase<OwnerOnlyService>
  fullName: Mewdeko.Common.MewdekoModuleBase<Mewdeko.Modules.OwnerOnly.Services.OwnerOnlyService>
  nameWithType.vb: MewdekoModuleBase(Of OwnerOnlyService)
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of Mewdeko.Modules.OwnerOnly.Services.OwnerOnlyService)
  name.vb: MewdekoModuleBase(Of OwnerOnlyService)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: <
  - uid: Mewdeko.Modules.OwnerOnly.Services.OwnerOnlyService
    name: OwnerOnlyService
    href: Mewdeko.Modules.OwnerOnly.Services.OwnerOnlyService.html
  - name: '>'
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Modules.OwnerOnly.Services.OwnerOnlyService
    name: OwnerOnlyService
    href: Mewdeko.Modules.OwnerOnly.Services.OwnerOnlyService.html
  - name: )
- uid: Discord.Commands.IModuleBase
  commentId: T:Discord.Commands.IModuleBase
  parent: Discord.Commands
  isExternal: true
  name: IModuleBase
  nameWithType: IModuleBase
  fullName: Discord.Commands.IModuleBase
- uid: Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.OwnerOnly.Services.OwnerOnlyService}.Service
  commentId: P:Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.OwnerOnly.Services.OwnerOnlyService}.Service
  parent: Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.OwnerOnly.Services.OwnerOnlyService}
  definition: Mewdeko.Common.MewdekoModuleBase`1.Service
  href: Mewdeko.Common.MewdekoModuleBase-1.html#Mewdeko_Common_MewdekoModuleBase_1_Service
  name: Service
  nameWithType: MewdekoModuleBase<OwnerOnlyService>.Service
  fullName: Mewdeko.Common.MewdekoModuleBase<Mewdeko.Modules.OwnerOnly.Services.OwnerOnlyService>.Service
  nameWithType.vb: MewdekoModuleBase(Of OwnerOnlyService).Service
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of Mewdeko.Modules.OwnerOnly.Services.OwnerOnlyService).Service
- uid: Mewdeko.Common.MewdekoModule.CultureInfo
  commentId: P:Mewdeko.Common.MewdekoModule.CultureInfo
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CultureInfo
  name: CultureInfo
  nameWithType: MewdekoModule.CultureInfo
  fullName: Mewdeko.Common.MewdekoModule.CultureInfo
- uid: Mewdeko.Common.MewdekoModule.Strings
  commentId: P:Mewdeko.Common.MewdekoModule.Strings
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_Strings
  name: Strings
  nameWithType: MewdekoModule.Strings
  fullName: Mewdeko.Common.MewdekoModule.Strings
- uid: Mewdeko.Common.MewdekoModule.Localization
  commentId: P:Mewdeko.Common.MewdekoModule.Localization
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_Localization
  name: Localization
  nameWithType: MewdekoModule.Localization
  fullName: Mewdeko.Common.MewdekoModule.Localization
- uid: Mewdeko.Common.MewdekoModule.ctx
  commentId: P:Mewdeko.Common.MewdekoModule.ctx
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ctx
  name: ctx
  nameWithType: MewdekoModule.ctx
  fullName: Mewdeko.Common.MewdekoModule.ctx
- uid: Mewdeko.Common.MewdekoModule.Config
  commentId: P:Mewdeko.Common.MewdekoModule.Config
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_Config
  name: Config
  nameWithType: MewdekoModule.Config
  fullName: Mewdeko.Common.MewdekoModule.Config
- uid: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  commentId: M:Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_BeforeExecute_Discord_Commands_CommandInfo_
  name: BeforeExecute(CommandInfo)
  nameWithType: MewdekoModule.BeforeExecute(CommandInfo)
  fullName: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
    name: BeforeExecute
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_BeforeExecute_Discord_Commands_CommandInfo_
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
    name: BeforeExecute
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_BeforeExecute_Discord_Commands_CommandInfo_
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Mewdeko.Common.MewdekoModule.GetText(System.String)
  commentId: M:Mewdeko.Common.MewdekoModule.GetText(System.String)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_
  name: GetText(string)
  nameWithType: MewdekoModule.GetText(string)
  fullName: Mewdeko.Common.MewdekoModule.GetText(string)
  nameWithType.vb: MewdekoModule.GetText(String)
  fullName.vb: Mewdeko.Common.MewdekoModule.GetText(String)
  name.vb: GetText(String)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String)
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String)
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_System_Object___
  name: GetText(string, params object[])
  nameWithType: MewdekoModule.GetText(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.GetText(string, params object[])
  nameWithType.vb: MewdekoModule.GetText(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.GetText(String, ParamArray Object())
  name.vb: GetText(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ErrorLocalizedAsync_System_String_System_Object___
  name: ErrorLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ErrorLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ErrorLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(String, ParamArray Object())
  name.vb: ErrorLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
    name: ErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
    name: ErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyErrorLocalizedAsync_System_String_System_Object___
  name: ReplyErrorLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ReplyErrorLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ReplyErrorLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(String, ParamArray Object())
  name.vb: ReplyErrorLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
    name: ReplyErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
    name: ReplyErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ConfirmLocalizedAsync_System_String_System_Object___
  name: ConfirmLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ConfirmLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ConfirmLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(String, ParamArray Object())
  name.vb: ConfirmLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
    name: ConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
    name: ConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyConfirmLocalizedAsync_System_String_System_Object___
  name: ReplyConfirmLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ReplyConfirmLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ReplyConfirmLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(String, ParamArray Object())
  name.vb: ReplyConfirmLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
    name: ReplyConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
    name: ReplyConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_System_String_System_UInt64_
  name: PromptUserConfirmAsync(string, ulong)
  nameWithType: MewdekoModule.PromptUserConfirmAsync(string, ulong)
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(string, ulong)
  nameWithType.vb: MewdekoModule.PromptUserConfirmAsync(String, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(String, ULong)
  name.vb: PromptUserConfirmAsync(String, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_System_String_System_UInt64_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_System_String_System_UInt64_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_EmbedBuilder_System_UInt64_
  name: PromptUserConfirmAsync(EmbedBuilder, ulong)
  nameWithType: MewdekoModule.PromptUserConfirmAsync(EmbedBuilder, ulong)
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder, ulong)
  nameWithType.vb: MewdekoModule.PromptUserConfirmAsync(EmbedBuilder, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder, ULong)
  name.vb: PromptUserConfirmAsync(EmbedBuilder, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  commentId: M:Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CheckRoleHierarchy_Discord_IGuildUser_System_Boolean_
  name: CheckRoleHierarchy(IGuildUser, bool)
  nameWithType: MewdekoModule.CheckRoleHierarchy(IGuildUser, bool)
  fullName: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser, bool)
  nameWithType.vb: MewdekoModule.CheckRoleHierarchy(IGuildUser, Boolean)
  fullName.vb: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser, Boolean)
  name.vb: CheckRoleHierarchy(IGuildUser, Boolean)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
    name: CheckRoleHierarchy
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CheckRoleHierarchy_Discord_IGuildUser_System_Boolean_
  - name: (
  - uid: Discord.IGuildUser
    name: IGuildUser
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
    name: CheckRoleHierarchy
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CheckRoleHierarchy_Discord_IGuildUser_System_Boolean_
  - name: (
  - uid: Discord.IGuildUser
    name: IGuildUser
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_IUserMessage_Discord_EmbedBuilder_System_UInt64_
  name: PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ulong)
  nameWithType: MewdekoModule.PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ulong)
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage, Discord.EmbedBuilder, ulong)
  nameWithType.vb: MewdekoModule.PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage, Discord.EmbedBuilder, ULong)
  name.vb: PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_IUserMessage_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_IUserMessage_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  commentId: M:Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetButtonInputAsync_System_UInt64_System_UInt64_System_UInt64_System_Boolean_
  name: GetButtonInputAsync(ulong, ulong, ulong, bool)
  nameWithType: MewdekoModule.GetButtonInputAsync(ulong, ulong, ulong, bool)
  fullName: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(ulong, ulong, ulong, bool)
  nameWithType.vb: MewdekoModule.GetButtonInputAsync(ULong, ULong, ULong, Boolean)
  fullName.vb: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(ULong, ULong, ULong, Boolean)
  name.vb: GetButtonInputAsync(ULong, ULong, ULong, Boolean)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
    name: GetButtonInputAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetButtonInputAsync_System_UInt64_System_UInt64_System_UInt64_System_Boolean_
  - name: (
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
    name: GetButtonInputAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetButtonInputAsync_System_UInt64_System_UInt64_System_UInt64_System_Boolean_
  - name: (
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextMessageAsync_System_UInt64_System_UInt64_
  name: NextMessageAsync(ulong, ulong)
  nameWithType: MewdekoModule.NextMessageAsync(ulong, ulong)
  fullName: Mewdeko.Common.MewdekoModule.NextMessageAsync(ulong, ulong)
  nameWithType.vb: MewdekoModule.NextMessageAsync(ULong, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.NextMessageAsync(ULong, ULong)
  name.vb: NextMessageAsync(ULong, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
    name: NextMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
    name: NextMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextFullMessageAsync_System_UInt64_System_UInt64_
  name: NextFullMessageAsync(ulong, ulong)
  nameWithType: MewdekoModule.NextFullMessageAsync(ulong, ulong)
  fullName: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(ulong, ulong)
  nameWithType.vb: MewdekoModule.NextFullMessageAsync(ULong, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(ULong, ULong)
  name.vb: NextFullMessageAsync(ULong, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
    name: NextFullMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextFullMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
    name: NextFullMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextFullMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  nameWithType: ModuleBase<ICommandContext>.ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.ReplyAsync(string, bool, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker[], Discord.Embed[], Discord.MessageFlags)
  nameWithType.vb: ModuleBase(Of ICommandContext).ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).ReplyAsync(String, Boolean, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker(), Discord.Embed(), Discord.MessageFlags)
  name.vb: ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  name: BeforeExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.BeforeExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).BeforeExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).BeforeExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
  name: AfterExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.AfterExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.AfterExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).AfterExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).AfterExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  name: AfterExecute(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.AfterExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.AfterExecute(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).AfterExecute(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).AfterExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  name: OnModuleBuilding(CommandService, ModuleBuilder)
  nameWithType: ModuleBase<ICommandContext>.OnModuleBuilding(CommandService, ModuleBuilder)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  nameWithType.vb: ModuleBase(Of ICommandContext).OnModuleBuilding(CommandService, ModuleBuilder)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.Context
  commentId: P:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.Context
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.Context
  name: Context
  nameWithType: ModuleBase<ICommandContext>.Context
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.Context
  nameWithType.vb: ModuleBase(Of ICommandContext).Context
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).Context
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Mewdeko.Extensions.Extensions.ThrowIfNull``1(System.String)
  commentId: M:Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  parent: Mewdeko.Extensions.Extensions
  definition: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  name: ThrowIfNull<OwnerOnly>(OwnerOnly, string)
  nameWithType: Extensions.ThrowIfNull<OwnerOnly>(OwnerOnly, string)
  fullName: Mewdeko.Extensions.Extensions.ThrowIfNull<Mewdeko.Modules.OwnerOnly.OwnerOnly>(Mewdeko.Modules.OwnerOnly.OwnerOnly, string)
  nameWithType.vb: Extensions.ThrowIfNull(Of OwnerOnly)(OwnerOnly, String)
  fullName.vb: Mewdeko.Extensions.Extensions.ThrowIfNull(Of Mewdeko.Modules.OwnerOnly.OwnerOnly)(Mewdeko.Modules.OwnerOnly.OwnerOnly, String)
  name.vb: ThrowIfNull(Of OwnerOnly)(OwnerOnly, String)
  spec.csharp:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(Mewdeko.Modules.OwnerOnly.OwnerOnly,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: <
  - uid: Mewdeko.Modules.OwnerOnly.OwnerOnly
    name: OwnerOnly
    href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html
  - name: '>'
  - name: (
  - uid: Mewdeko.Modules.OwnerOnly.OwnerOnly
    name: OwnerOnly
    href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(Mewdeko.Modules.OwnerOnly.OwnerOnly,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Modules.OwnerOnly.OwnerOnly
    name: OwnerOnly
    href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html
  - name: )
  - name: (
  - uid: Mewdeko.Modules.OwnerOnly.OwnerOnly
    name: OwnerOnly
    href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Commands.ModuleBase`1
  commentId: T:Discord.Commands.ModuleBase`1
  isExternal: true
  name: ModuleBase<T>
  nameWithType: ModuleBase<T>
  fullName: Discord.Commands.ModuleBase<T>
  nameWithType.vb: ModuleBase(Of T)
  fullName.vb: Discord.Commands.ModuleBase(Of T)
  name.vb: ModuleBase(Of T)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Discord.Commands
  commentId: N:Discord.Commands
  isExternal: true
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
  spec.csharp:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.Commands
    name: Commands
    isExternal: true
  spec.vb:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.Commands
    name: Commands
    isExternal: true
- uid: Mewdeko.Common
  commentId: N:Mewdeko.Common
  href: Mewdeko.html
  name: Mewdeko.Common
  nameWithType: Mewdeko.Common
  fullName: Mewdeko.Common
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
- uid: Mewdeko.Common.MewdekoModuleBase`1
  commentId: T:Mewdeko.Common.MewdekoModuleBase`1
  href: Mewdeko.Common.MewdekoModuleBase-1.html
  name: MewdekoModuleBase<TService>
  nameWithType: MewdekoModuleBase<TService>
  fullName: Mewdeko.Common.MewdekoModuleBase<TService>
  nameWithType.vb: MewdekoModuleBase(Of TService)
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of TService)
  name.vb: MewdekoModuleBase(Of TService)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: <
  - name: TService
  - name: '>'
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TService
  - name: )
- uid: Mewdeko.Common.MewdekoModuleBase`1.Service
  commentId: P:Mewdeko.Common.MewdekoModuleBase`1.Service
  href: Mewdeko.Common.MewdekoModuleBase-1.html#Mewdeko_Common_MewdekoModuleBase_1_Service
  name: Service
  nameWithType: MewdekoModuleBase<TService>.Service
  fullName: Mewdeko.Common.MewdekoModuleBase<TService>.Service
  nameWithType.vb: MewdekoModuleBase(Of TService).Service
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of TService).Service
- uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  commentId: M:Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  nameWithType: ModuleBase<T>.ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  fullName: Discord.Commands.ModuleBase<T>.ReplyAsync(string, bool, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker[], Discord.Embed[], Discord.MessageFlags)
  nameWithType.vb: ModuleBase(Of T).ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  fullName.vb: Discord.Commands.ModuleBase(Of T).ReplyAsync(String, Boolean, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker(), Discord.Embed(), Discord.MessageFlags)
  name.vb: ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  isExternal: true
  name: BeforeExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<T>.BeforeExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).BeforeExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).BeforeExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
  isExternal: true
  name: AfterExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<T>.AfterExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.AfterExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).AfterExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).AfterExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  isExternal: true
  name: AfterExecute(CommandInfo)
  nameWithType: ModuleBase<T>.AfterExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.AfterExecute(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).AfterExecute(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).AfterExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  commentId: M:Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  isExternal: true
  name: OnModuleBuilding(CommandService, ModuleBuilder)
  nameWithType: ModuleBase<T>.OnModuleBuilding(CommandService, ModuleBuilder)
  fullName: Discord.Commands.ModuleBase<T>.OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  nameWithType.vb: ModuleBase(Of T).OnModuleBuilding(CommandService, ModuleBuilder)
  fullName.vb: Discord.Commands.ModuleBase(Of T).OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.Context
  commentId: P:Discord.Commands.ModuleBase`1.Context
  isExternal: true
  name: Context
  nameWithType: ModuleBase<T>.Context
  fullName: Discord.Commands.ModuleBase<T>.Context
  nameWithType.vb: ModuleBase(Of T).Context
  fullName.vb: Discord.Commands.ModuleBase(Of T).Context
- uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  commentId: M:Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  isExternal: true
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  name: ThrowIfNull<T>(T, string)
  nameWithType: Extensions.ThrowIfNull<T>(T, string)
  fullName: Mewdeko.Extensions.Extensions.ThrowIfNull<T>(T, string)
  nameWithType.vb: Extensions.ThrowIfNull(Of T)(T, String)
  fullName.vb: Mewdeko.Extensions.Extensions.ThrowIfNull(Of T)(T, String)
  name.vb: ThrowIfNull(Of T)(T, String)
  spec.csharp:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Mewdeko.Extensions.Extensions
  commentId: T:Mewdeko.Extensions.Extensions
  parent: Mewdeko.Extensions
  href: Mewdeko.Extensions.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: Mewdeko.Extensions.Extensions
- uid: Mewdeko.Extensions
  commentId: N:Mewdeko.Extensions
  href: Mewdeko.html
  name: Mewdeko.Extensions
  nameWithType: Mewdeko.Extensions
  fullName: Mewdeko.Extensions
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Extensions
    name: Extensions
    href: Mewdeko.Extensions.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Extensions
    name: Extensions
    href: Mewdeko.Extensions.html
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.#ctor*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.#ctor
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly__ctor_Discord_WebSocket_DiscordSocketClient_Mewdeko_Mewdeko_Mewdeko_Services_strings_IBotStrings_Fergun_Interactive_InteractiveService_Mewdeko_Services_ICoordinator_System_Collections_Generic_IEnumerable_Mewdeko_Services_Settings_IConfigService__Mewdeko_Database_DbService_Mewdeko_Services_IDataCache_Discord_Commands_CommandService_System_IServiceProvider_Mewdeko_Services_GuildSettingsService_Mewdeko_Services_CommandHandler_Mewdeko_Common_Configs_BotConfig_
  name: OwnerOnly
  nameWithType: OwnerOnly.OwnerOnly
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.OwnerOnly
  nameWithType.vb: OwnerOnly.New
  fullName.vb: Mewdeko.Modules.OwnerOnly.OwnerOnly.New
  name.vb: New
- uid: Discord.WebSocket.DiscordSocketClient
  commentId: T:Discord.WebSocket.DiscordSocketClient
  parent: Discord.WebSocket
  isExternal: true
  name: DiscordSocketClient
  nameWithType: DiscordSocketClient
  fullName: Discord.WebSocket.DiscordSocketClient
- uid: Mewdeko.Mewdeko
  commentId: T:Mewdeko.Mewdeko
  parent: Mewdeko
  href: Mewdeko.Mewdeko.html
  name: Mewdeko
  nameWithType: Mewdeko
  fullName: Mewdeko.Mewdeko
- uid: Mewdeko.Services.strings.IBotStrings
  commentId: T:Mewdeko.Services.strings.IBotStrings
  parent: Mewdeko.Services.strings
  href: Mewdeko.Services.strings.IBotStrings.html
  name: IBotStrings
  nameWithType: IBotStrings
  fullName: Mewdeko.Services.strings.IBotStrings
- uid: Fergun.Interactive.InteractiveService
  commentId: T:Fergun.Interactive.InteractiveService
  parent: Fergun.Interactive
  isExternal: true
  name: InteractiveService
  nameWithType: InteractiveService
  fullName: Fergun.Interactive.InteractiveService
- uid: Mewdeko.Services.ICoordinator
  commentId: T:Mewdeko.Services.ICoordinator
  parent: Mewdeko.Services
  href: Mewdeko.Services.ICoordinator.html
  name: ICoordinator
  nameWithType: ICoordinator
  fullName: Mewdeko.Services.ICoordinator
- uid: System.Collections.Generic.IEnumerable{Mewdeko.Services.Settings.IConfigService}
  commentId: T:System.Collections.Generic.IEnumerable{Mewdeko.Services.Settings.IConfigService}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IConfigService>
  nameWithType: IEnumerable<IConfigService>
  fullName: System.Collections.Generic.IEnumerable<Mewdeko.Services.Settings.IConfigService>
  nameWithType.vb: IEnumerable(Of IConfigService)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Mewdeko.Services.Settings.IConfigService)
  name.vb: IEnumerable(Of IConfigService)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Mewdeko.Services.Settings.IConfigService
    name: IConfigService
    href: Mewdeko.Services.Settings.IConfigService.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Services.Settings.IConfigService
    name: IConfigService
    href: Mewdeko.Services.Settings.IConfigService.html
  - name: )
- uid: Mewdeko.Database.DbService
  commentId: T:Mewdeko.Database.DbService
  parent: Mewdeko.Database
  href: Mewdeko.Database.DbService.html
  name: DbService
  nameWithType: DbService
  fullName: Mewdeko.Database.DbService
- uid: Mewdeko.Services.IDataCache
  commentId: T:Mewdeko.Services.IDataCache
  parent: Mewdeko.Services
  href: Mewdeko.Services.IDataCache.html
  name: IDataCache
  nameWithType: IDataCache
  fullName: Mewdeko.Services.IDataCache
- uid: Discord.Commands.CommandService
  commentId: T:Discord.Commands.CommandService
  parent: Discord.Commands
  isExternal: true
  name: CommandService
  nameWithType: CommandService
  fullName: Discord.Commands.CommandService
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iserviceprovider
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: Mewdeko.Services.GuildSettingsService
  commentId: T:Mewdeko.Services.GuildSettingsService
  parent: Mewdeko.Services
  href: Mewdeko.Services.GuildSettingsService.html
  name: GuildSettingsService
  nameWithType: GuildSettingsService
  fullName: Mewdeko.Services.GuildSettingsService
- uid: Mewdeko.Services.CommandHandler
  commentId: T:Mewdeko.Services.CommandHandler
  parent: Mewdeko.Services
  href: Mewdeko.Services.CommandHandler.html
  name: CommandHandler
  nameWithType: CommandHandler
  fullName: Mewdeko.Services.CommandHandler
- uid: Mewdeko.Common.Configs.BotConfig
  commentId: T:Mewdeko.Common.Configs.BotConfig
  parent: Mewdeko.Common.Configs
  href: Mewdeko.Common.Configs.BotConfig.html
  name: BotConfig
  nameWithType: BotConfig
  fullName: Mewdeko.Common.Configs.BotConfig
- uid: Discord.WebSocket
  commentId: N:Discord.WebSocket
  isExternal: true
  name: Discord.WebSocket
  nameWithType: Discord.WebSocket
  fullName: Discord.WebSocket
  spec.csharp:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.WebSocket
    name: WebSocket
    isExternal: true
  spec.vb:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.WebSocket
    name: WebSocket
    isExternal: true
- uid: Mewdeko
  commentId: N:Mewdeko
  href: Mewdeko.html
  name: Mewdeko
  nameWithType: Mewdeko
  fullName: Mewdeko
- uid: Mewdeko.Services.strings
  commentId: N:Mewdeko.Services.strings
  href: Mewdeko.html
  name: Mewdeko.Services.strings
  nameWithType: Mewdeko.Services.strings
  fullName: Mewdeko.Services.strings
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
  - name: .
  - uid: Mewdeko.Services.strings
    name: strings
    href: Mewdeko.Services.strings.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
  - name: .
  - uid: Mewdeko.Services.strings
    name: strings
    href: Mewdeko.Services.strings.html
- uid: Fergun.Interactive
  commentId: N:Fergun.Interactive
  isExternal: true
  name: Fergun.Interactive
  nameWithType: Fergun.Interactive
  fullName: Fergun.Interactive
  spec.csharp:
  - uid: Fergun
    name: Fergun
    isExternal: true
  - name: .
  - uid: Fergun.Interactive
    name: Interactive
    isExternal: true
  spec.vb:
  - uid: Fergun
    name: Fergun
    isExternal: true
  - name: .
  - uid: Fergun.Interactive
    name: Interactive
    isExternal: true
- uid: Mewdeko.Services
  commentId: N:Mewdeko.Services
  href: Mewdeko.html
  name: Mewdeko.Services
  nameWithType: Mewdeko.Services
  fullName: Mewdeko.Services
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Mewdeko.Database
  commentId: N:Mewdeko.Database
  href: Mewdeko.html
  name: Mewdeko.Database
  nameWithType: Mewdeko.Database
  fullName: Mewdeko.Database
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Database
    name: Database
    href: Mewdeko.Database.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Database
    name: Database
    href: Mewdeko.Database.html
- uid: Mewdeko.Common.Configs
  commentId: N:Mewdeko.Common.Configs
  href: Mewdeko.html
  name: Mewdeko.Common.Configs
  nameWithType: Mewdeko.Common.Configs
  fullName: Mewdeko.Common.Configs
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
  - name: .
  - uid: Mewdeko.Common.Configs
    name: Configs
    href: Mewdeko.Common.Configs.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
  - name: .
  - uid: Mewdeko.Common.Configs
    name: Configs
    href: Mewdeko.Common.Configs.html
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.ClearUsedTokens*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.ClearUsedTokens
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_ClearUsedTokens
  name: ClearUsedTokens
  nameWithType: OwnerOnly.ClearUsedTokens
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.ClearUsedTokens
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Update*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.Update
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_Update
  name: Update
  nameWithType: OwnerOnly.Update
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Update
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Sudo*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.Sudo
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_Sudo_Discord_IGuildUser_System_String_
  name: Sudo
  nameWithType: OwnerOnly.Sudo
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Sudo
- uid: Discord.IGuildUser
  commentId: T:Discord.IGuildUser
  parent: Discord
  isExternal: true
  name: IGuildUser
  nameWithType: IGuildUser
  fullName: Discord.IGuildUser
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Discord
  commentId: N:Discord
  isExternal: true
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.RedisExec*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.RedisExec
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_RedisExec_System_String_
  name: RedisExec
  nameWithType: OwnerOnly.RedisExec
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.RedisExec
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.SqlExec*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.SqlExec
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_SqlExec_System_String_
  name: SqlExec
  nameWithType: OwnerOnly.SqlExec
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.SqlExec
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.ListServers*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.ListServers
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_ListServers
  name: ListServers
  nameWithType: OwnerOnly.ListServers
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.ListServers
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.CommandStats*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.CommandStats
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_CommandStats
  name: CommandStats
  nameWithType: OwnerOnly.CommandStats
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.CommandStats
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Config*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.Config
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_Config_System_String_System_String_System_String_
  name: Config
  nameWithType: OwnerOnly.Config
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Config
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.RotatePlaying*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.RotatePlaying
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_RotatePlaying
  name: RotatePlaying
  nameWithType: OwnerOnly.RotatePlaying
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.RotatePlaying
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.AddPlaying*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.AddPlaying
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_AddPlaying_Discord_ActivityType_System_String_
  name: AddPlaying
  nameWithType: OwnerOnly.AddPlaying
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.AddPlaying
- uid: Discord.ActivityType
  commentId: T:Discord.ActivityType
  parent: Discord
  isExternal: true
  name: ActivityType
  nameWithType: ActivityType
  fullName: Discord.ActivityType
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.ListPlaying*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.ListPlaying
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_ListPlaying
  name: ListPlaying
  nameWithType: OwnerOnly.ListPlaying
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.ListPlaying
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.DefPrefix*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.DefPrefix
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_DefPrefix_System_String_
  name: DefPrefix
  nameWithType: OwnerOnly.DefPrefix
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.DefPrefix
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.RemovePlaying*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.RemovePlaying
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_RemovePlaying_System_Int32_
  name: RemovePlaying
  nameWithType: OwnerOnly.RemovePlaying
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.RemovePlaying
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.LanguageSetDefault*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.LanguageSetDefault
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_LanguageSetDefault_System_String_
  name: LanguageSetDefault
  nameWithType: OwnerOnly.LanguageSetDefault
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.LanguageSetDefault
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandAdd*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandAdd
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_StartupCommandAdd_System_String_
  name: StartupCommandAdd
  nameWithType: OwnerOnly.StartupCommandAdd
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandAdd
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandAdd*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandAdd
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_AutoCommandAdd_System_Int32_System_String_
  name: AutoCommandAdd
  nameWithType: OwnerOnly.AutoCommandAdd
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandAdd
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandsList*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandsList
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_StartupCommandsList_System_Int32_
  name: StartupCommandsList
  nameWithType: OwnerOnly.StartupCommandsList
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandsList
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandsList*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandsList
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_AutoCommandsList_System_Int32_
  name: AutoCommandsList
  nameWithType: OwnerOnly.AutoCommandsList
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandsList
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Wait*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.Wait
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_Wait_System_Int32_
  name: Wait
  nameWithType: OwnerOnly.Wait
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Wait
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandRemove*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandRemove
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_AutoCommandRemove_System_Int32_
  name: AutoCommandRemove
  nameWithType: OwnerOnly.AutoCommandRemove
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.AutoCommandRemove
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandRemove*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandRemove
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_StartupCommandRemove_System_Int32_
  name: StartupCommandRemove
  nameWithType: OwnerOnly.StartupCommandRemove
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandRemove
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandsClear*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandsClear
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_StartupCommandsClear
  name: StartupCommandsClear
  nameWithType: OwnerOnly.StartupCommandsClear
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.StartupCommandsClear
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.ForwardMessages*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.ForwardMessages
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_ForwardMessages
  name: ForwardMessages
  nameWithType: OwnerOnly.ForwardMessages
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.ForwardMessages
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.ForwardToAll*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.ForwardToAll
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_ForwardToAll
  name: ForwardToAll
  nameWithType: OwnerOnly.ForwardToAll
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.ForwardToAll
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.ShardStats*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.ShardStats
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_ShardStats
  name: ShardStats
  nameWithType: OwnerOnly.ShardStats
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.ShardStats
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.RestartShard*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.RestartShard
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_RestartShard_System_Int32_
  name: RestartShard
  nameWithType: OwnerOnly.RestartShard
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.RestartShard
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.LeaveServer*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.LeaveServer
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_LeaveServer_System_String_
  name: LeaveServer
  nameWithType: OwnerOnly.LeaveServer
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.LeaveServer
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Die*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.Die
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_Die
  name: Die
  nameWithType: OwnerOnly.Die
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Die
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Restart*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.Restart
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_Restart
  name: Restart
  nameWithType: OwnerOnly.Restart
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Restart
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetName*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.SetName
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_SetName_System_String_
  name: SetName
  nameWithType: OwnerOnly.SetName
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetName
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetStatus*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.SetStatus
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_SetStatus_Mewdeko_Modules_OwnerOnly_OwnerOnly_SettableUserStatus_
  name: SetStatus
  nameWithType: OwnerOnly.SetStatus
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetStatus
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.SettableUserStatus
  commentId: T:Mewdeko.Modules.OwnerOnly.OwnerOnly.SettableUserStatus
  parent: Mewdeko.Modules.OwnerOnly
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html
  name: OwnerOnly.SettableUserStatus
  nameWithType: OwnerOnly.SettableUserStatus
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.SettableUserStatus
  spec.csharp:
  - uid: Mewdeko.Modules.OwnerOnly.OwnerOnly
    name: OwnerOnly
    href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html
  - name: .
  - uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.SettableUserStatus
    name: SettableUserStatus
    href: Mewdeko.Modules.OwnerOnly.OwnerOnly.SettableUserStatus.html
  spec.vb:
  - uid: Mewdeko.Modules.OwnerOnly.OwnerOnly
    name: OwnerOnly
    href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html
  - name: .
  - uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.SettableUserStatus
    name: SettableUserStatus
    href: Mewdeko.Modules.OwnerOnly.OwnerOnly.SettableUserStatus.html
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetAvatar*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.SetAvatar
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_SetAvatar_System_String_
  name: SetAvatar
  nameWithType: OwnerOnly.SetAvatar
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetAvatar
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetGame*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.SetGame
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_SetGame_Discord_ActivityType_System_String_
  name: SetGame
  nameWithType: OwnerOnly.SetGame
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetGame
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetStream*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.SetStream
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_SetStream_System_String_System_String_
  name: SetStream
  nameWithType: OwnerOnly.SetStream
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.SetStream
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Send*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.Send
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_Send_System_UInt64_System_String_
  name: Send
  nameWithType: OwnerOnly.Send
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Send
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.ImagesReload*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.ImagesReload
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_ImagesReload
  name: ImagesReload
  nameWithType: OwnerOnly.ImagesReload
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.ImagesReload
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.StringsReload*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.StringsReload
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_StringsReload
  name: StringsReload
  nameWithType: OwnerOnly.StringsReload
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.StringsReload
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Bash*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.Bash
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_Bash_System_String_
  name: Bash
  nameWithType: OwnerOnly.Bash
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Bash
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: Mewdeko.Modules.OwnerOnly.OwnerOnly.Evaluate*
  commentId: Overload:Mewdeko.Modules.OwnerOnly.OwnerOnly.Evaluate
  href: Mewdeko.Modules.OwnerOnly.OwnerOnly.html#Mewdeko_Modules_OwnerOnly_OwnerOnly_Evaluate_System_String_
  name: Evaluate
  nameWithType: OwnerOnly.Evaluate
  fullName: Mewdeko.Modules.OwnerOnly.OwnerOnly.Evaluate
