### YamlMime:ManagedReference
items:
- uid: Mewdeko.Modules.Currency.Services.ICurrencyService
  commentId: T:Mewdeko.Modules.Currency.Services.ICurrencyService
  id: ICurrencyService
  parent: Mewdeko.Modules.Currency.Services
  children:
  - Mewdeko.Modules.Currency.Services.ICurrencyService.AddTransactionAsync(System.UInt64,System.Int64,System.String,System.Nullable{System.UInt64})
  - Mewdeko.Modules.Currency.Services.ICurrencyService.AddUserBalanceAsync(System.UInt64,System.Int64,System.Nullable{System.UInt64})
  - Mewdeko.Modules.Currency.Services.ICurrencyService.GetAllUserBalancesAsync(System.Nullable{System.UInt64})
  - Mewdeko.Modules.Currency.Services.ICurrencyService.GetCurrencyEmote(System.Nullable{System.UInt64})
  - Mewdeko.Modules.Currency.Services.ICurrencyService.GetReward(System.Nullable{System.UInt64})
  - Mewdeko.Modules.Currency.Services.ICurrencyService.GetTransactionsAsync(System.UInt64,System.Nullable{System.UInt64})
  - Mewdeko.Modules.Currency.Services.ICurrencyService.GetUserBalanceAsync(System.UInt64,System.Nullable{System.UInt64})
  - Mewdeko.Modules.Currency.Services.ICurrencyService.SetReward(System.Int32,System.Int32,System.Nullable{System.UInt64})
  langs:
  - csharp
  - vb
  name: ICurrencyService
  nameWithType: ICurrencyService
  fullName: Mewdeko.Modules.Currency.Services.ICurrencyService
  type: Interface
  source:
    remote:
      path: src/Mewdeko/Modules/Currency/Services/ICurrencyService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ICurrencyService
    path: src/Mewdeko/Modules/Currency/Services/ICurrencyService.cs
    startLine: 7
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Currency.Services
  summary: Service interface for managing user currency balances and transactions.
  example: []
  syntax:
    content: public interface ICurrencyService
    content.vb: Public Interface ICurrencyService
  extensionMethods:
  - Mewdeko.Modules.Currency.Services.ICurrencyService.Mewdeko.Extensions.Extensions.ThrowIfNull``1(System.String)
- uid: Mewdeko.Modules.Currency.Services.ICurrencyService.AddUserBalanceAsync(System.UInt64,System.Int64,System.Nullable{System.UInt64})
  commentId: M:Mewdeko.Modules.Currency.Services.ICurrencyService.AddUserBalanceAsync(System.UInt64,System.Int64,System.Nullable{System.UInt64})
  id: AddUserBalanceAsync(System.UInt64,System.Int64,System.Nullable{System.UInt64})
  parent: Mewdeko.Modules.Currency.Services.ICurrencyService
  langs:
  - csharp
  - vb
  name: AddUserBalanceAsync(ulong, long, ulong?)
  nameWithType: ICurrencyService.AddUserBalanceAsync(ulong, long, ulong?)
  fullName: Mewdeko.Modules.Currency.Services.ICurrencyService.AddUserBalanceAsync(ulong, long, ulong?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Currency/Services/ICurrencyService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AddUserBalanceAsync
    path: src/Mewdeko/Modules/Currency/Services/ICurrencyService.cs
    startLine: 16
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Currency.Services
  summary: Adds the specified amount to the balance of the user.
  example: []
  syntax:
    content: Task AddUserBalanceAsync(ulong userId, long amount, ulong? guildId = null)
    parameters:
    - id: userId
      type: System.UInt64
      description: The ID of the user.
    - id: amount
      type: System.Int64
      description: The amount to add to the balance.
    - id: guildId
      type: System.Nullable{System.UInt64}
      description: The ID of the guild (optional).
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: Function AddUserBalanceAsync(userId As ULong, amount As Long, guildId As ULong? = Nothing) As Task
  overload: Mewdeko.Modules.Currency.Services.ICurrencyService.AddUserBalanceAsync*
  nameWithType.vb: ICurrencyService.AddUserBalanceAsync(ULong, Long, ULong?)
  fullName.vb: Mewdeko.Modules.Currency.Services.ICurrencyService.AddUserBalanceAsync(ULong, Long, ULong?)
  name.vb: AddUserBalanceAsync(ULong, Long, ULong?)
- uid: Mewdeko.Modules.Currency.Services.ICurrencyService.GetUserBalanceAsync(System.UInt64,System.Nullable{System.UInt64})
  commentId: M:Mewdeko.Modules.Currency.Services.ICurrencyService.GetUserBalanceAsync(System.UInt64,System.Nullable{System.UInt64})
  id: GetUserBalanceAsync(System.UInt64,System.Nullable{System.UInt64})
  parent: Mewdeko.Modules.Currency.Services.ICurrencyService
  langs:
  - csharp
  - vb
  name: GetUserBalanceAsync(ulong, ulong?)
  nameWithType: ICurrencyService.GetUserBalanceAsync(ulong, ulong?)
  fullName: Mewdeko.Modules.Currency.Services.ICurrencyService.GetUserBalanceAsync(ulong, ulong?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Currency/Services/ICurrencyService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetUserBalanceAsync
    path: src/Mewdeko/Modules/Currency/Services/ICurrencyService.cs
    startLine: 24
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Currency.Services
  summary: Gets the balance of the user.
  example: []
  syntax:
    content: Task<long> GetUserBalanceAsync(ulong userId, ulong? guildId = null)
    parameters:
    - id: userId
      type: System.UInt64
      description: The ID of the user.
    - id: guildId
      type: System.Nullable{System.UInt64}
      description: The ID of the guild (optional).
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: The balance of the user.
    content.vb: Function GetUserBalanceAsync(userId As ULong, guildId As ULong? = Nothing) As Task(Of Long)
  overload: Mewdeko.Modules.Currency.Services.ICurrencyService.GetUserBalanceAsync*
  nameWithType.vb: ICurrencyService.GetUserBalanceAsync(ULong, ULong?)
  fullName.vb: Mewdeko.Modules.Currency.Services.ICurrencyService.GetUserBalanceAsync(ULong, ULong?)
  name.vb: GetUserBalanceAsync(ULong, ULong?)
- uid: Mewdeko.Modules.Currency.Services.ICurrencyService.AddTransactionAsync(System.UInt64,System.Int64,System.String,System.Nullable{System.UInt64})
  commentId: M:Mewdeko.Modules.Currency.Services.ICurrencyService.AddTransactionAsync(System.UInt64,System.Int64,System.String,System.Nullable{System.UInt64})
  id: AddTransactionAsync(System.UInt64,System.Int64,System.String,System.Nullable{System.UInt64})
  parent: Mewdeko.Modules.Currency.Services.ICurrencyService
  langs:
  - csharp
  - vb
  name: AddTransactionAsync(ulong, long, string, ulong?)
  nameWithType: ICurrencyService.AddTransactionAsync(ulong, long, string, ulong?)
  fullName: Mewdeko.Modules.Currency.Services.ICurrencyService.AddTransactionAsync(ulong, long, string, ulong?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Currency/Services/ICurrencyService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: AddTransactionAsync
    path: src/Mewdeko/Modules/Currency/Services/ICurrencyService.cs
    startLine: 34
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Currency.Services
  summary: Adds a transaction for the user.
  example: []
  syntax:
    content: Task AddTransactionAsync(ulong userId, long amount, string description, ulong? guildId = null)
    parameters:
    - id: userId
      type: System.UInt64
      description: The ID of the user.
    - id: amount
      type: System.Int64
      description: The transaction amount.
    - id: description
      type: System.String
      description: The description of the transaction.
    - id: guildId
      type: System.Nullable{System.UInt64}
      description: The ID of the guild (optional).
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: Function AddTransactionAsync(userId As ULong, amount As Long, description As String, guildId As ULong? = Nothing) As Task
  overload: Mewdeko.Modules.Currency.Services.ICurrencyService.AddTransactionAsync*
  nameWithType.vb: ICurrencyService.AddTransactionAsync(ULong, Long, String, ULong?)
  fullName.vb: Mewdeko.Modules.Currency.Services.ICurrencyService.AddTransactionAsync(ULong, Long, String, ULong?)
  name.vb: AddTransactionAsync(ULong, Long, String, ULong?)
- uid: Mewdeko.Modules.Currency.Services.ICurrencyService.GetTransactionsAsync(System.UInt64,System.Nullable{System.UInt64})
  commentId: M:Mewdeko.Modules.Currency.Services.ICurrencyService.GetTransactionsAsync(System.UInt64,System.Nullable{System.UInt64})
  id: GetTransactionsAsync(System.UInt64,System.Nullable{System.UInt64})
  parent: Mewdeko.Modules.Currency.Services.ICurrencyService
  langs:
  - csharp
  - vb
  name: GetTransactionsAsync(ulong, ulong?)
  nameWithType: ICurrencyService.GetTransactionsAsync(ulong, ulong?)
  fullName: Mewdeko.Modules.Currency.Services.ICurrencyService.GetTransactionsAsync(ulong, ulong?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Currency/Services/ICurrencyService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetTransactionsAsync
    path: src/Mewdeko/Modules/Currency/Services/ICurrencyService.cs
    startLine: 42
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Currency.Services
  summary: Gets the transaction history of the user.
  example: []
  syntax:
    content: Task<IEnumerable<TransactionHistory>?> GetTransactionsAsync(ulong userId, ulong? guildId = null)
    parameters:
    - id: userId
      type: System.UInt64
      description: The ID of the user.
    - id: guildId
      type: System.Nullable{System.UInt64}
      description: The ID of the guild (optional).
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Mewdeko.Database.Models.TransactionHistory}}
      description: The transaction history of the user.
    content.vb: Function GetTransactionsAsync(userId As ULong, guildId As ULong? = Nothing) As Task(Of IEnumerable(Of TransactionHistory))
  overload: Mewdeko.Modules.Currency.Services.ICurrencyService.GetTransactionsAsync*
  nameWithType.vb: ICurrencyService.GetTransactionsAsync(ULong, ULong?)
  fullName.vb: Mewdeko.Modules.Currency.Services.ICurrencyService.GetTransactionsAsync(ULong, ULong?)
  name.vb: GetTransactionsAsync(ULong, ULong?)
- uid: Mewdeko.Modules.Currency.Services.ICurrencyService.GetCurrencyEmote(System.Nullable{System.UInt64})
  commentId: M:Mewdeko.Modules.Currency.Services.ICurrencyService.GetCurrencyEmote(System.Nullable{System.UInt64})
  id: GetCurrencyEmote(System.Nullable{System.UInt64})
  parent: Mewdeko.Modules.Currency.Services.ICurrencyService
  langs:
  - csharp
  - vb
  name: GetCurrencyEmote(ulong?)
  nameWithType: ICurrencyService.GetCurrencyEmote(ulong?)
  fullName: Mewdeko.Modules.Currency.Services.ICurrencyService.GetCurrencyEmote(ulong?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Currency/Services/ICurrencyService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetCurrencyEmote
    path: src/Mewdeko/Modules/Currency/Services/ICurrencyService.cs
    startLine: 49
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Currency.Services
  summary: Gets the currency emote of the guild.
  example: []
  syntax:
    content: Task<string> GetCurrencyEmote(ulong? guildId)
    parameters:
    - id: guildId
      type: System.Nullable{System.UInt64}
      description: The ID of the guild (optional).
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The currency emote of the guild.
    content.vb: Function GetCurrencyEmote(guildId As ULong?) As Task(Of String)
  overload: Mewdeko.Modules.Currency.Services.ICurrencyService.GetCurrencyEmote*
  nameWithType.vb: ICurrencyService.GetCurrencyEmote(ULong?)
  fullName.vb: Mewdeko.Modules.Currency.Services.ICurrencyService.GetCurrencyEmote(ULong?)
  name.vb: GetCurrencyEmote(ULong?)
- uid: Mewdeko.Modules.Currency.Services.ICurrencyService.GetAllUserBalancesAsync(System.Nullable{System.UInt64})
  commentId: M:Mewdeko.Modules.Currency.Services.ICurrencyService.GetAllUserBalancesAsync(System.Nullable{System.UInt64})
  id: GetAllUserBalancesAsync(System.Nullable{System.UInt64})
  parent: Mewdeko.Modules.Currency.Services.ICurrencyService
  langs:
  - csharp
  - vb
  name: GetAllUserBalancesAsync(ulong?)
  nameWithType: ICurrencyService.GetAllUserBalancesAsync(ulong?)
  fullName: Mewdeko.Modules.Currency.Services.ICurrencyService.GetAllUserBalancesAsync(ulong?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Currency/Services/ICurrencyService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetAllUserBalancesAsync
    path: src/Mewdeko/Modules/Currency/Services/ICurrencyService.cs
    startLine: 56
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Currency.Services
  summary: Gets the balances of all users in the guild.
  example: []
  syntax:
    content: Task<IEnumerable<LbCurrency>> GetAllUserBalancesAsync(ulong? guildId = null)
    parameters:
    - id: guildId
      type: System.Nullable{System.UInt64}
      description: The ID of the guild (optional).
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Mewdeko.Modules.Currency.Services.Impl.LbCurrency}}
      description: The balances of all users in the guild.
    content.vb: Function GetAllUserBalancesAsync(guildId As ULong? = Nothing) As Task(Of IEnumerable(Of LbCurrency))
  overload: Mewdeko.Modules.Currency.Services.ICurrencyService.GetAllUserBalancesAsync*
  nameWithType.vb: ICurrencyService.GetAllUserBalancesAsync(ULong?)
  fullName.vb: Mewdeko.Modules.Currency.Services.ICurrencyService.GetAllUserBalancesAsync(ULong?)
  name.vb: GetAllUserBalancesAsync(ULong?)
- uid: Mewdeko.Modules.Currency.Services.ICurrencyService.SetReward(System.Int32,System.Int32,System.Nullable{System.UInt64})
  commentId: M:Mewdeko.Modules.Currency.Services.ICurrencyService.SetReward(System.Int32,System.Int32,System.Nullable{System.UInt64})
  id: SetReward(System.Int32,System.Int32,System.Nullable{System.UInt64})
  parent: Mewdeko.Modules.Currency.Services.ICurrencyService
  langs:
  - csharp
  - vb
  name: SetReward(int, int, ulong?)
  nameWithType: ICurrencyService.SetReward(int, int, ulong?)
  fullName: Mewdeko.Modules.Currency.Services.ICurrencyService.SetReward(int, int, ulong?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Currency/Services/ICurrencyService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SetReward
    path: src/Mewdeko/Modules/Currency/Services/ICurrencyService.cs
    startLine: 65
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Currency.Services
  summary: Sets the reward for currency gain.
  example: []
  syntax:
    content: Task SetReward(int amount, int seconds, ulong? guildId)
    parameters:
    - id: amount
      type: System.Int32
      description: The amount of currency to reward.
    - id: seconds
      type: System.Int32
      description: The cooldown duration for the reward.
    - id: guildId
      type: System.Nullable{System.UInt64}
      description: The ID of the guild (optional).
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: Function SetReward(amount As Integer, seconds As Integer, guildId As ULong?) As Task
  overload: Mewdeko.Modules.Currency.Services.ICurrencyService.SetReward*
  nameWithType.vb: ICurrencyService.SetReward(Integer, Integer, ULong?)
  fullName.vb: Mewdeko.Modules.Currency.Services.ICurrencyService.SetReward(Integer, Integer, ULong?)
  name.vb: SetReward(Integer, Integer, ULong?)
- uid: Mewdeko.Modules.Currency.Services.ICurrencyService.GetReward(System.Nullable{System.UInt64})
  commentId: M:Mewdeko.Modules.Currency.Services.ICurrencyService.GetReward(System.Nullable{System.UInt64})
  id: GetReward(System.Nullable{System.UInt64})
  parent: Mewdeko.Modules.Currency.Services.ICurrencyService
  langs:
  - csharp
  - vb
  name: GetReward(ulong?)
  nameWithType: ICurrencyService.GetReward(ulong?)
  fullName: Mewdeko.Modules.Currency.Services.ICurrencyService.GetReward(ulong?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Currency/Services/ICurrencyService.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetReward
    path: src/Mewdeko/Modules/Currency/Services/ICurrencyService.cs
    startLine: 72
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Currency.Services
  summary: Gets the reward for currency gain.
  example: []
  syntax:
    content: Task<(int, int)> GetReward(ulong? guildId)
    parameters:
    - id: guildId
      type: System.Nullable{System.UInt64}
      description: The ID of the guild (optional).
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.Int32,System.Int32}}
      description: The reward amount and cooldown duration.
    content.vb: Function GetReward(guildId As ULong?) As Task(Of (Integer, Integer))
  overload: Mewdeko.Modules.Currency.Services.ICurrencyService.GetReward*
  nameWithType.vb: ICurrencyService.GetReward(ULong?)
  fullName.vb: Mewdeko.Modules.Currency.Services.ICurrencyService.GetReward(ULong?)
  name.vb: GetReward(ULong?)
references:
- uid: Mewdeko.Modules.Currency.Services
  commentId: N:Mewdeko.Modules.Currency.Services
  href: Mewdeko.html
  name: Mewdeko.Modules.Currency.Services
  nameWithType: Mewdeko.Modules.Currency.Services
  fullName: Mewdeko.Modules.Currency.Services
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Modules
    name: Modules
    href: Mewdeko.Modules.html
  - name: .
  - uid: Mewdeko.Modules.Currency
    name: Currency
    href: Mewdeko.Modules.Currency.html
  - name: .
  - uid: Mewdeko.Modules.Currency.Services
    name: Services
    href: Mewdeko.Modules.Currency.Services.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Modules
    name: Modules
    href: Mewdeko.Modules.html
  - name: .
  - uid: Mewdeko.Modules.Currency
    name: Currency
    href: Mewdeko.Modules.Currency.html
  - name: .
  - uid: Mewdeko.Modules.Currency.Services
    name: Services
    href: Mewdeko.Modules.Currency.Services.html
- uid: Mewdeko.Modules.Currency.Services.ICurrencyService.Mewdeko.Extensions.Extensions.ThrowIfNull``1(System.String)
  commentId: M:Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  parent: Mewdeko.Extensions.Extensions
  definition: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  name: ThrowIfNull<ICurrencyService>(ICurrencyService, string)
  nameWithType: Extensions.ThrowIfNull<ICurrencyService>(ICurrencyService, string)
  fullName: Mewdeko.Extensions.Extensions.ThrowIfNull<Mewdeko.Modules.Currency.Services.ICurrencyService>(Mewdeko.Modules.Currency.Services.ICurrencyService, string)
  nameWithType.vb: Extensions.ThrowIfNull(Of ICurrencyService)(ICurrencyService, String)
  fullName.vb: Mewdeko.Extensions.Extensions.ThrowIfNull(Of Mewdeko.Modules.Currency.Services.ICurrencyService)(Mewdeko.Modules.Currency.Services.ICurrencyService, String)
  name.vb: ThrowIfNull(Of ICurrencyService)(ICurrencyService, String)
  spec.csharp:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(Mewdeko.Modules.Currency.Services.ICurrencyService,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: <
  - uid: Mewdeko.Modules.Currency.Services.ICurrencyService
    name: ICurrencyService
    href: Mewdeko.Modules.Currency.Services.ICurrencyService.html
  - name: '>'
  - name: (
  - uid: Mewdeko.Modules.Currency.Services.ICurrencyService
    name: ICurrencyService
    href: Mewdeko.Modules.Currency.Services.ICurrencyService.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(Mewdeko.Modules.Currency.Services.ICurrencyService,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Modules.Currency.Services.ICurrencyService
    name: ICurrencyService
    href: Mewdeko.Modules.Currency.Services.ICurrencyService.html
  - name: )
  - name: (
  - uid: Mewdeko.Modules.Currency.Services.ICurrencyService
    name: ICurrencyService
    href: Mewdeko.Modules.Currency.Services.ICurrencyService.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  commentId: M:Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  isExternal: true
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  name: ThrowIfNull<T>(T, string)
  nameWithType: Extensions.ThrowIfNull<T>(T, string)
  fullName: Mewdeko.Extensions.Extensions.ThrowIfNull<T>(T, string)
  nameWithType.vb: Extensions.ThrowIfNull(Of T)(T, String)
  fullName.vb: Mewdeko.Extensions.Extensions.ThrowIfNull(Of T)(T, String)
  name.vb: ThrowIfNull(Of T)(T, String)
  spec.csharp:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Mewdeko.Extensions.Extensions
  commentId: T:Mewdeko.Extensions.Extensions
  parent: Mewdeko.Extensions
  href: Mewdeko.Extensions.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: Mewdeko.Extensions.Extensions
- uid: Mewdeko.Extensions
  commentId: N:Mewdeko.Extensions
  href: Mewdeko.html
  name: Mewdeko.Extensions
  nameWithType: Mewdeko.Extensions
  fullName: Mewdeko.Extensions
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Extensions
    name: Extensions
    href: Mewdeko.Extensions.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Extensions
    name: Extensions
    href: Mewdeko.Extensions.html
- uid: Mewdeko.Modules.Currency.Services.ICurrencyService.AddUserBalanceAsync*
  commentId: Overload:Mewdeko.Modules.Currency.Services.ICurrencyService.AddUserBalanceAsync
  href: Mewdeko.Modules.Currency.Services.ICurrencyService.html#Mewdeko_Modules_Currency_Services_ICurrencyService_AddUserBalanceAsync_System_UInt64_System_Int64_System_Nullable_System_UInt64__
  name: AddUserBalanceAsync
  nameWithType: ICurrencyService.AddUserBalanceAsync
  fullName: Mewdeko.Modules.Currency.Services.ICurrencyService.AddUserBalanceAsync
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: System.Nullable{System.UInt64}
  commentId: T:System.Nullable{System.UInt64}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong?
  nameWithType: ulong?
  fullName: ulong?
  nameWithType.vb: ULong?
  fullName.vb: ULong?
  name.vb: ULong?
  spec.csharp:
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: '?'
  spec.vb:
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: '?'
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Mewdeko.Modules.Currency.Services.ICurrencyService.GetUserBalanceAsync*
  commentId: Overload:Mewdeko.Modules.Currency.Services.ICurrencyService.GetUserBalanceAsync
  href: Mewdeko.Modules.Currency.Services.ICurrencyService.html#Mewdeko_Modules_Currency_Services_ICurrencyService_GetUserBalanceAsync_System_UInt64_System_Nullable_System_UInt64__
  name: GetUserBalanceAsync
  nameWithType: ICurrencyService.GetUserBalanceAsync
  fullName: Mewdeko.Modules.Currency.Services.ICurrencyService.GetUserBalanceAsync
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<long>
  nameWithType: Task<long>
  fullName: System.Threading.Tasks.Task<long>
  nameWithType.vb: Task(Of Long)
  fullName.vb: System.Threading.Tasks.Task(Of Long)
  name.vb: Task(Of Long)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: Mewdeko.Modules.Currency.Services.ICurrencyService.AddTransactionAsync*
  commentId: Overload:Mewdeko.Modules.Currency.Services.ICurrencyService.AddTransactionAsync
  href: Mewdeko.Modules.Currency.Services.ICurrencyService.html#Mewdeko_Modules_Currency_Services_ICurrencyService_AddTransactionAsync_System_UInt64_System_Int64_System_String_System_Nullable_System_UInt64__
  name: AddTransactionAsync
  nameWithType: ICurrencyService.AddTransactionAsync
  fullName: Mewdeko.Modules.Currency.Services.ICurrencyService.AddTransactionAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Mewdeko.Modules.Currency.Services.ICurrencyService.GetTransactionsAsync*
  commentId: Overload:Mewdeko.Modules.Currency.Services.ICurrencyService.GetTransactionsAsync
  href: Mewdeko.Modules.Currency.Services.ICurrencyService.html#Mewdeko_Modules_Currency_Services_ICurrencyService_GetTransactionsAsync_System_UInt64_System_Nullable_System_UInt64__
  name: GetTransactionsAsync
  nameWithType: ICurrencyService.GetTransactionsAsync
  fullName: Mewdeko.Modules.Currency.Services.ICurrencyService.GetTransactionsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Mewdeko.Database.Models.TransactionHistory}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Mewdeko.Database.Models.TransactionHistory}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IEnumerable<TransactionHistory>>
  nameWithType: Task<IEnumerable<TransactionHistory>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Mewdeko.Database.Models.TransactionHistory>>
  nameWithType.vb: Task(Of IEnumerable(Of TransactionHistory))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Mewdeko.Database.Models.TransactionHistory))
  name.vb: Task(Of IEnumerable(Of TransactionHistory))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Mewdeko.Database.Models.TransactionHistory
    name: TransactionHistory
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Database.Models.TransactionHistory
    name: TransactionHistory
  - name: )
  - name: )
- uid: Mewdeko.Modules.Currency.Services.ICurrencyService.GetCurrencyEmote*
  commentId: Overload:Mewdeko.Modules.Currency.Services.ICurrencyService.GetCurrencyEmote
  href: Mewdeko.Modules.Currency.Services.ICurrencyService.html#Mewdeko_Modules_Currency_Services_ICurrencyService_GetCurrencyEmote_System_Nullable_System_UInt64__
  name: GetCurrencyEmote
  nameWithType: ICurrencyService.GetCurrencyEmote
  fullName: Mewdeko.Modules.Currency.Services.ICurrencyService.GetCurrencyEmote
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Mewdeko.Modules.Currency.Services.ICurrencyService.GetAllUserBalancesAsync*
  commentId: Overload:Mewdeko.Modules.Currency.Services.ICurrencyService.GetAllUserBalancesAsync
  href: Mewdeko.Modules.Currency.Services.ICurrencyService.html#Mewdeko_Modules_Currency_Services_ICurrencyService_GetAllUserBalancesAsync_System_Nullable_System_UInt64__
  name: GetAllUserBalancesAsync
  nameWithType: ICurrencyService.GetAllUserBalancesAsync
  fullName: Mewdeko.Modules.Currency.Services.ICurrencyService.GetAllUserBalancesAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Mewdeko.Modules.Currency.Services.Impl.LbCurrency}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Mewdeko.Modules.Currency.Services.Impl.LbCurrency}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IEnumerable<LbCurrency>>
  nameWithType: Task<IEnumerable<LbCurrency>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Mewdeko.Modules.Currency.Services.Impl.LbCurrency>>
  nameWithType.vb: Task(Of IEnumerable(Of LbCurrency))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Mewdeko.Modules.Currency.Services.Impl.LbCurrency))
  name.vb: Task(Of IEnumerable(Of LbCurrency))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Mewdeko.Modules.Currency.Services.Impl.LbCurrency
    name: LbCurrency
    href: Mewdeko.Modules.Currency.Services.Impl.LbCurrency.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Modules.Currency.Services.Impl.LbCurrency
    name: LbCurrency
    href: Mewdeko.Modules.Currency.Services.Impl.LbCurrency.html
  - name: )
  - name: )
- uid: Mewdeko.Modules.Currency.Services.ICurrencyService.SetReward*
  commentId: Overload:Mewdeko.Modules.Currency.Services.ICurrencyService.SetReward
  href: Mewdeko.Modules.Currency.Services.ICurrencyService.html#Mewdeko_Modules_Currency_Services_ICurrencyService_SetReward_System_Int32_System_Int32_System_Nullable_System_UInt64__
  name: SetReward
  nameWithType: ICurrencyService.SetReward
  fullName: Mewdeko.Modules.Currency.Services.ICurrencyService.SetReward
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Mewdeko.Modules.Currency.Services.ICurrencyService.GetReward*
  commentId: Overload:Mewdeko.Modules.Currency.Services.ICurrencyService.GetReward
  href: Mewdeko.Modules.Currency.Services.ICurrencyService.html#Mewdeko_Modules_Currency_Services_ICurrencyService_GetReward_System_Nullable_System_UInt64__
  name: GetReward
  nameWithType: ICurrencyService.GetReward
  fullName: Mewdeko.Modules.Currency.Services.ICurrencyService.GetReward
- uid: System.Threading.Tasks.Task{System.ValueTuple{System.Int32,System.Int32}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{System.Int32,System.Int32}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<(int, int)>
  nameWithType: Task<(int, int)>
  fullName: System.Threading.Tasks.Task<(int, int)>
  nameWithType.vb: Task(Of (Integer, Integer))
  fullName.vb: System.Threading.Tasks.Task(Of (Integer, Integer))
  name.vb: Task(Of (Integer, Integer))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: )
