### YamlMime:ManagedReference
items:
- uid: Mewdeko.Modules.Utility.Utility
  commentId: T:Mewdeko.Modules.Utility.Utility
  id: Utility
  parent: Mewdeko.Modules.Utility
  children:
  - Mewdeko.Modules.Utility.Utility.#ctor(Discord.WebSocket.DiscordSocketClient,Mewdeko.Services.IStatsService,Mewdeko.Services.IBotCredentials,Mewdeko.Common.DownloadTracker,Fergun.Interactive.InteractiveService,Mewdeko.Services.ICoordinator,Mewdeko.Services.GuildSettingsService,System.Net.Http.HttpClient,Mewdeko.Services.Settings.BotConfigService,Mewdeko.Database.DbService)
  - Mewdeko.Modules.Utility.Utility.Banner(Discord.IGuildUser)
  - Mewdeko.Modules.Utility.Utility.ChannelId
  - Mewdeko.Modules.Utility.Utility.ChannelTopic(Discord.ITextChannel)
  - Mewdeko.Modules.Utility.Utility.DebugEmbed(System.String)
  - Mewdeko.Modules.Utility.Utility.EditSnipe
  - Mewdeko.Modules.Utility.Utility.EditSnipe(Discord.ITextChannel)
  - Mewdeko.Modules.Utility.Utility.EditSnipe(Discord.ITextChannel,Discord.IUser)
  - Mewdeko.Modules.Utility.Utility.EditSnipe(Discord.IUser)
  - Mewdeko.Modules.Utility.Utility.EditSnipeList(Discord.ITextChannel,Discord.IUser,System.Int32)
  - Mewdeko.Modules.Utility.Utility.EditSnipeList(Discord.ITextChannel,System.Int32)
  - Mewdeko.Modules.Utility.Utility.EditSnipeList(Discord.IUser,System.Int32)
  - Mewdeko.Modules.Utility.Utility.EditSnipeList(System.Int32)
  - Mewdeko.Modules.Utility.Utility.EmoteList(System.String)
  - Mewdeko.Modules.Utility.Utility.GetJson(Discord.ITextChannel,System.UInt64)
  - Mewdeko.Modules.Utility.Utility.GetJson(System.UInt64,Discord.ITextChannel)
  - Mewdeko.Modules.Utility.Utility.GetTraceRoute(System.String)
  - Mewdeko.Modules.Utility.Utility.InRole(Discord.IRole)
  - Mewdeko.Modules.Utility.Utility.InRoles(Discord.IRole,Discord.IRole)
  - Mewdeko.Modules.Utility.Utility.Invite
  - Mewdeko.Modules.Utility.Utility.OwoIfy(System.String)
  - Mewdeko.Modules.Utility.Utility.Ping
  - Mewdeko.Modules.Utility.Utility.RoleId(Discord.IRole)
  - Mewdeko.Modules.Utility.Utility.RolePermList(Discord.GuildPermission[])
  - Mewdeko.Modules.Utility.Utility.RolePermList(Mewdeko.Modules.Utility.Utility.PermissionType,Discord.GuildPermission[])
  - Mewdeko.Modules.Utility.Utility.Roles(Discord.IGuildUser)
  - Mewdeko.Modules.Utility.Utility.Roll(System.String)
  - Mewdeko.Modules.Utility.Utility.SaveChat(Mewdeko.Common.TypeReaders.Models.StoopidTime,Discord.ITextChannel)
  - Mewdeko.Modules.Utility.Utility.Say(Discord.ITextChannel,System.String)
  - Mewdeko.Modules.Utility.Utility.Say(System.String)
  - Mewdeko.Modules.Utility.Utility.ServerId
  - Mewdeko.Modules.Utility.Utility.Showemojis(System.String)
  - Mewdeko.Modules.Utility.Utility.Snipe
  - Mewdeko.Modules.Utility.Utility.Snipe(Discord.ITextChannel)
  - Mewdeko.Modules.Utility.Utility.Snipe(Discord.ITextChannel,Discord.IUser)
  - Mewdeko.Modules.Utility.Utility.Snipe(Discord.IUser)
  - Mewdeko.Modules.Utility.Utility.SnipeList(Discord.ITextChannel,Discord.IUser,System.Int32)
  - Mewdeko.Modules.Utility.Utility.SnipeList(Discord.ITextChannel,System.Int32)
  - Mewdeko.Modules.Utility.Utility.SnipeList(Discord.IUser,System.Int32)
  - Mewdeko.Modules.Utility.Utility.SnipeList(System.Int32)
  - Mewdeko.Modules.Utility.Utility.SnipeSet(Mewdeko.Common.TypeReaders.Models.PermissionAction)
  - Mewdeko.Modules.Utility.Utility.Stats
  - Mewdeko.Modules.Utility.Utility.Traceroute(System.String)
  - Mewdeko.Modules.Utility.Utility.UserId(Discord.IGuildUser)
  - Mewdeko.Modules.Utility.Utility.VCheck(System.String)
  - Mewdeko.Modules.Utility.Utility.Vote
  - Mewdeko.Modules.Utility.Utility.WhosPlaying(System.String)
  langs:
  - csharp
  - vb
  name: Utility
  nameWithType: Utility
  fullName: Mewdeko.Modules.Utility.Utility
  type: Class
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/VerboseErrorCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Utility
    path: src/Mewdeko/Modules/Utility/VerboseErrorCommands.cs
    startLine: 6
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Contains various utility commands like sniping deleted messages, getting a list of roles with specific permissions, etc.
  example: []
  syntax:
    content: 'public class Utility : MewdekoModuleBase<UtilityService>, IModuleBase'
    content.vb: Public Class Utility Inherits MewdekoModuleBase(Of UtilityService) Implements IModuleBase
  inheritance:
  - System.Object
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  - Discord.Commands.ModuleBase
  - Mewdeko.Common.MewdekoModule
  - Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Utility.Services.UtilityService}
  implements:
  - Discord.Commands.IModuleBase
  inheritedMembers:
  - Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Utility.Services.UtilityService}.Service
  - Mewdeko.Common.MewdekoModule.CultureInfo
  - Mewdeko.Common.MewdekoModule.Strings
  - Mewdeko.Common.MewdekoModule.Localization
  - Mewdeko.Common.MewdekoModule.ctx
  - Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  - Mewdeko.Common.MewdekoModule.GetText(System.String)
  - Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
  - Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
  - Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  - Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  - Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  - Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  - Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
  - Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  - Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.Context
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Mewdeko.Modules.Utility.Utility.Mewdeko.Extensions.Extensions.ThrowIfNull``1(System.String)
- uid: Mewdeko.Modules.Utility.Utility.Banner(Discord.IGuildUser)
  commentId: M:Mewdeko.Modules.Utility.Utility.Banner(Discord.IGuildUser)
  id: Banner(Discord.IGuildUser)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: Banner(IGuildUser?)
  nameWithType: Utility.Banner(IGuildUser?)
  fullName: Mewdeko.Modules.Utility.Utility.Banner(Discord.IGuildUser?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/InfoCommands.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Banner
    path: src/Mewdeko/Modules/Utility/InfoCommands.cs
    startLine: 311
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Displays the banner of a specified user or the command invoker.
  example: []
  syntax:
    content: >-
      [Cmd("Banner")]

      [Aliases("Banner")]

      [RequireContext(ContextType.Guild)]

      public Task Banner(IGuildUser? usr = null)
    parameters:
    - id: usr
      type: Discord.IGuildUser
      description: Optional. The user whose banner to display.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
    content.vb: >-
      <Cmd("Banner")>

      <Aliases("Banner")>

      <RequireContext(ContextType.Guild)>

      Public Function Banner(usr As IGuildUser = Nothing) As Task
  overload: Mewdeko.Modules.Utility.Utility.Banner*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Banner
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Banner
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  nameWithType.vb: Utility.Banner(IGuildUser)
  fullName.vb: Mewdeko.Modules.Utility.Utility.Banner(Discord.IGuildUser)
  name.vb: Banner(IGuildUser)
- uid: Mewdeko.Modules.Utility.Utility.Traceroute(System.String)
  commentId: M:Mewdeko.Modules.Utility.Utility.Traceroute(System.String)
  id: Traceroute(System.String)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: Traceroute(string)
  nameWithType: Utility.Traceroute(string)
  fullName: Mewdeko.Modules.Utility.Utility.Traceroute(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/NetworkUtilities.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Traceroute
    path: src/Mewdeko/Modules/Utility/NetworkUtilities.cs
    startLine: 126
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Executes a traceroute operation to the specified hostname, displaying the route that packets take to reach an IP address or domain.
  remarks: >-
    This command simulates the traceroute utility commonly found in Unix-based operating systems, tracing the path packets take to reach a network host.

    It's useful for diagnosing network issues by identifying points of failure or delay in the route to the target host.

    Due to the nature of ICMP protocol limitations and network configurations, some hops may not respond (e.g., due to firewalls),

    resulting in incomplete paths. The operation might take a while depending on the number of hops and network conditions, hence the bot will show a typing indicator during execution.
  example: []
  syntax:
    content: >-
      [Cmd("Traceroute")]

      [Aliases("Traceroute")]

      [Ratelimit(10)]

      public Task Traceroute(string hostname)
    parameters:
    - id: hostname
      type: System.String
      description: The IP address or domain name to trace the route to.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation of sending the traceroute results as a message.
    content.vb: >-
      <Cmd("Traceroute")>

      <Aliases("Traceroute")>

      <Ratelimit(10)>

      Public Function Traceroute(hostname As String) As Task
  overload: Mewdeko.Modules.Utility.Utility.Traceroute*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Traceroute
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Traceroute
  - type: Mewdeko.Common.Attributes.TextCommands.RatelimitAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.RatelimitAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 10
  nameWithType.vb: Utility.Traceroute(String)
  fullName.vb: Mewdeko.Modules.Utility.Utility.Traceroute(String)
  name.vb: Traceroute(String)
- uid: Mewdeko.Modules.Utility.Utility.GetTraceRoute(System.String)
  commentId: M:Mewdeko.Modules.Utility.Utility.GetTraceRoute(System.String)
  id: GetTraceRoute(System.String)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: GetTraceRoute(string)
  nameWithType: Utility.GetTraceRoute(string)
  fullName: Mewdeko.Modules.Utility.Utility.GetTraceRoute(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/NetworkUtilities.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetTraceRoute
    path: src/Mewdeko/Modules/Utility/NetworkUtilities.cs
    startLine: 155
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Generates the sequence of IP addresses representing the path taken to the specified hostname using ICMP echo requests.
  remarks: >-
    This method sends ICMP packets with incrementing Time-to-Live (TTL) values to trace the route to the specified target.

    Each hop along the route decrements the TTL by one, and when it reaches zero, it responds with an ICMP "Time Exceeded" message,

    allowing the traceroute operation to identify each router or hop along the path.

    If the operation reaches the target or encounters an error before the maximum TTL, it terminates early.
  example: []
  syntax:
    content: public static IEnumerable<IPAddress> GetTraceRoute(string hostname)
    parameters:
    - id: hostname
      type: System.String
      description: The target hostname or IP address for the traceroute operation.
    return:
      type: System.Collections.Generic.IEnumerable{System.Net.IPAddress}
      description: An enumerable collection of IP addresses representing each hop in the route.
    content.vb: Public Shared Function GetTraceRoute(hostname As String) As IEnumerable(Of IPAddress)
  overload: Mewdeko.Modules.Utility.Utility.GetTraceRoute*
  nameWithType.vb: Utility.GetTraceRoute(String)
  fullName.vb: Mewdeko.Modules.Utility.Utility.GetTraceRoute(String)
  name.vb: GetTraceRoute(String)
- uid: Mewdeko.Modules.Utility.Utility.#ctor(Discord.WebSocket.DiscordSocketClient,Mewdeko.Services.IStatsService,Mewdeko.Services.IBotCredentials,Mewdeko.Common.DownloadTracker,Fergun.Interactive.InteractiveService,Mewdeko.Services.ICoordinator,Mewdeko.Services.GuildSettingsService,System.Net.Http.HttpClient,Mewdeko.Services.Settings.BotConfigService,Mewdeko.Database.DbService)
  commentId: M:Mewdeko.Modules.Utility.Utility.#ctor(Discord.WebSocket.DiscordSocketClient,Mewdeko.Services.IStatsService,Mewdeko.Services.IBotCredentials,Mewdeko.Common.DownloadTracker,Fergun.Interactive.InteractiveService,Mewdeko.Services.ICoordinator,Mewdeko.Services.GuildSettingsService,System.Net.Http.HttpClient,Mewdeko.Services.Settings.BotConfigService,Mewdeko.Database.DbService)
  id: '#ctor(Discord.WebSocket.DiscordSocketClient,Mewdeko.Services.IStatsService,Mewdeko.Services.IBotCredentials,Mewdeko.Common.DownloadTracker,Fergun.Interactive.InteractiveService,Mewdeko.Services.ICoordinator,Mewdeko.Services.GuildSettingsService,System.Net.Http.HttpClient,Mewdeko.Services.Settings.BotConfigService,Mewdeko.Database.DbService)'
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: Utility(DiscordSocketClient, IStatsService, IBotCredentials, DownloadTracker, InteractiveService, ICoordinator, GuildSettingsService, HttpClient, BotConfigService, DbService)
  nameWithType: Utility.Utility(DiscordSocketClient, IStatsService, IBotCredentials, DownloadTracker, InteractiveService, ICoordinator, GuildSettingsService, HttpClient, BotConfigService, DbService)
  fullName: Mewdeko.Modules.Utility.Utility.Utility(Discord.WebSocket.DiscordSocketClient, Mewdeko.Services.IStatsService, Mewdeko.Services.IBotCredentials, Mewdeko.Common.DownloadTracker, Fergun.Interactive.InteractiveService, Mewdeko.Services.ICoordinator, Mewdeko.Services.GuildSettingsService, System.Net.Http.HttpClient, Mewdeko.Services.Settings.BotConfigService, Mewdeko.Database.DbService)
  type: Constructor
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: .ctor
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 34
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Contains various utility commands like sniping deleted messages, getting a list of roles with specific permissions, etc.
  example: []
  syntax:
    content: public Utility(DiscordSocketClient client, IStatsService stats, IBotCredentials creds, DownloadTracker tracker, InteractiveService serv, ICoordinator coordinator, GuildSettingsService guildSettings, HttpClient httpClient, BotConfigService config, DbService db)
    parameters:
    - id: client
      type: Discord.WebSocket.DiscordSocketClient
      description: ''
    - id: stats
      type: Mewdeko.Services.IStatsService
      description: ''
    - id: creds
      type: Mewdeko.Services.IBotCredentials
      description: ''
    - id: tracker
      type: Mewdeko.Common.DownloadTracker
      description: ''
    - id: serv
      type: Fergun.Interactive.InteractiveService
      description: ''
    - id: coordinator
      type: Mewdeko.Services.ICoordinator
      description: ''
    - id: guildSettings
      type: Mewdeko.Services.GuildSettingsService
      description: ''
    - id: httpClient
      type: System.Net.Http.HttpClient
      description: ''
    - id: config
      type: Mewdeko.Services.Settings.BotConfigService
      description: ''
    - id: db
      type: Mewdeko.Database.DbService
      description: ''
    content.vb: Public Sub New(client As DiscordSocketClient, stats As IStatsService, creds As IBotCredentials, tracker As DownloadTracker, serv As InteractiveService, coordinator As ICoordinator, guildSettings As GuildSettingsService, httpClient As HttpClient, config As BotConfigService, db As DbService)
  overload: Mewdeko.Modules.Utility.Utility.#ctor*
  nameWithType.vb: Utility.New(DiscordSocketClient, IStatsService, IBotCredentials, DownloadTracker, InteractiveService, ICoordinator, GuildSettingsService, HttpClient, BotConfigService, DbService)
  fullName.vb: Mewdeko.Modules.Utility.Utility.New(Discord.WebSocket.DiscordSocketClient, Mewdeko.Services.IStatsService, Mewdeko.Services.IBotCredentials, Mewdeko.Common.DownloadTracker, Fergun.Interactive.InteractiveService, Mewdeko.Services.ICoordinator, Mewdeko.Services.GuildSettingsService, System.Net.Http.HttpClient, Mewdeko.Services.Settings.BotConfigService, Mewdeko.Database.DbService)
  name.vb: New(DiscordSocketClient, IStatsService, IBotCredentials, DownloadTracker, InteractiveService, ICoordinator, GuildSettingsService, HttpClient, BotConfigService, DbService)
- uid: Mewdeko.Modules.Utility.Utility.DebugEmbed(System.String)
  commentId: M:Mewdeko.Modules.Utility.Utility.DebugEmbed(System.String)
  id: DebugEmbed(System.String)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: DebugEmbed(string)
  nameWithType: Utility.DebugEmbed(string)
  fullName: Mewdeko.Modules.Utility.Utility.DebugEmbed(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: DebugEmbed
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 68
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Debug command to test parsing of embeds.
  example: []
  syntax:
    content: >-
      [Cmd("DebugEmbed")]

      [Aliases("DebugEmbed")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.Administrator)]

      public Task DebugEmbed(string embedText)
    parameters:
    - id: embedText
      type: System.String
      description: The text to parse as an embed.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("DebugEmbed")>

      <Aliases("DebugEmbed")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.Administrator)>

      Public Function DebugEmbed(embedText As String) As Task
  overload: Mewdeko.Modules.Utility.Utility.DebugEmbed*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: DebugEmbed
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DebugEmbed
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  nameWithType.vb: Utility.DebugEmbed(String)
  fullName.vb: Mewdeko.Modules.Utility.Utility.DebugEmbed(String)
  name.vb: DebugEmbed(String)
- uid: Mewdeko.Modules.Utility.Utility.RolePermList(Mewdeko.Modules.Utility.Utility.PermissionType,Discord.GuildPermission[])
  commentId: M:Mewdeko.Modules.Utility.Utility.RolePermList(Mewdeko.Modules.Utility.Utility.PermissionType,Discord.GuildPermission[])
  id: RolePermList(Mewdeko.Modules.Utility.Utility.PermissionType,Discord.GuildPermission[])
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: RolePermList(PermissionType, params GuildPermission[])
  nameWithType: Utility.RolePermList(Utility.PermissionType, params GuildPermission[])
  fullName: Mewdeko.Modules.Utility.Utility.RolePermList(Mewdeko.Modules.Utility.Utility.PermissionType, params Discord.GuildPermission[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RolePermList
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 101
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Lists all roles that have the specified permissions.
  example: []
  syntax:
    content: >-
      [Cmd("RolePermList")]

      [Aliases("RolePermList")]

      [RequireContext(ContextType.Guild)]

      public Task RolePermList(Utility.PermissionType searchType = PermissionType.And, params GuildPermission[] perms)
    parameters:
    - id: searchType
      type: Mewdeko.Modules.Utility.Utility.PermissionType
      description: The type of permission search (And or Or).
    - id: perms
      type: Discord.GuildPermission[]
      description: The permissions to search for.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("RolePermList")>

      <Aliases("RolePermList")>

      <RequireContext(ContextType.Guild)>

      Public Function RolePermList(searchType As Utility.PermissionType = PermissionType.And, ParamArray perms As GuildPermission()) As Task
  overload: Mewdeko.Modules.Utility.Utility.RolePermList*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RolePermList
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RolePermList
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  nameWithType.vb: Utility.RolePermList(Utility.PermissionType, ParamArray GuildPermission())
  fullName.vb: Mewdeko.Modules.Utility.Utility.RolePermList(Mewdeko.Modules.Utility.Utility.PermissionType, ParamArray Discord.GuildPermission())
  name.vb: RolePermList(PermissionType, ParamArray GuildPermission())
- uid: Mewdeko.Modules.Utility.Utility.RolePermList(Discord.GuildPermission[])
  commentId: M:Mewdeko.Modules.Utility.Utility.RolePermList(Discord.GuildPermission[])
  id: RolePermList(Discord.GuildPermission[])
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: RolePermList(params GuildPermission[])
  nameWithType: Utility.RolePermList(params GuildPermission[])
  fullName: Mewdeko.Modules.Utility.Utility.RolePermList(params Discord.GuildPermission[])
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RolePermList
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 177
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Lists all roles that have the specified permissions. Default search type is And.
  example: []
  syntax:
    content: >-
      [Cmd("RolePermList")]

      [Aliases("RolePermList")]

      [RequireContext(ContextType.Guild)]

      public Task RolePermList(params GuildPermission[] perms)
    parameters:
    - id: perms
      type: Discord.GuildPermission[]
      description: The permissions to search for.
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Cmd("RolePermList")>

      <Aliases("RolePermList")>

      <RequireContext(ContextType.Guild)>

      Public Function RolePermList(ParamArray perms As GuildPermission()) As Task
  overload: Mewdeko.Modules.Utility.Utility.RolePermList*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RolePermList
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RolePermList
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  nameWithType.vb: Utility.RolePermList(ParamArray GuildPermission())
  fullName.vb: Mewdeko.Modules.Utility.Utility.RolePermList(ParamArray Discord.GuildPermission())
  name.vb: RolePermList(ParamArray GuildPermission())
- uid: Mewdeko.Modules.Utility.Utility.GetJson(System.UInt64,Discord.ITextChannel)
  commentId: M:Mewdeko.Modules.Utility.Utility.GetJson(System.UInt64,Discord.ITextChannel)
  id: GetJson(System.UInt64,Discord.ITextChannel)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: GetJson(ulong, ITextChannel)
  nameWithType: Utility.GetJson(ulong, ITextChannel)
  fullName: Mewdeko.Modules.Utility.Utility.GetJson(ulong, Discord.ITextChannel)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetJson
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 186
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Gets the mewdeko specific json of a message.
  example: []
  syntax:
    content: >-
      [Cmd("GetJson")]

      [Aliases("GetJson")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageMessages)]

      public Task GetJson(ulong id, ITextChannel channel = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The id of the message to get the json of.
    - id: channel
      type: Discord.ITextChannel
      description: The channel of the message.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("GetJson")>

      <Aliases("GetJson")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageMessages)>

      Public Function GetJson(id As ULong, channel As ITextChannel = Nothing) As Task
  overload: Mewdeko.Modules.Utility.Utility.GetJson*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: GetJson
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: GetJson
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8192"
  nameWithType.vb: Utility.GetJson(ULong, ITextChannel)
  fullName.vb: Mewdeko.Modules.Utility.Utility.GetJson(ULong, Discord.ITextChannel)
  name.vb: GetJson(ULong, ITextChannel)
- uid: Mewdeko.Modules.Utility.Utility.GetJson(Discord.ITextChannel,System.UInt64)
  commentId: M:Mewdeko.Modules.Utility.Utility.GetJson(Discord.ITextChannel,System.UInt64)
  id: GetJson(Discord.ITextChannel,System.UInt64)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: GetJson(ITextChannel, ulong)
  nameWithType: Utility.GetJson(ITextChannel, ulong)
  fullName: Mewdeko.Modules.Utility.Utility.GetJson(Discord.ITextChannel, ulong)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: GetJson
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 213
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Gets the mewdeko specific json of a message.
  example: []
  syntax:
    content: >-
      [Cmd("GetJson")]

      [Aliases("GetJson")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageMessages)]

      public Task GetJson(ITextChannel channel, ulong messageId)
    parameters:
    - id: channel
      type: Discord.ITextChannel
      description: The channel of the message.
    - id: messageId
      type: System.UInt64
      description: The id of the message to get the json of.
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Cmd("GetJson")>

      <Aliases("GetJson")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageMessages)>

      Public Function GetJson(channel As ITextChannel, messageId As ULong) As Task
  overload: Mewdeko.Modules.Utility.Utility.GetJson*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: GetJson
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: GetJson
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8192"
  nameWithType.vb: Utility.GetJson(ITextChannel, ULong)
  fullName.vb: Mewdeko.Modules.Utility.Utility.GetJson(Discord.ITextChannel, ULong)
  name.vb: GetJson(ITextChannel, ULong)
- uid: Mewdeko.Modules.Utility.Utility.SaveChat(Mewdeko.Common.TypeReaders.Models.StoopidTime,Discord.ITextChannel)
  commentId: M:Mewdeko.Modules.Utility.Utility.SaveChat(Mewdeko.Common.TypeReaders.Models.StoopidTime,Discord.ITextChannel)
  id: SaveChat(Mewdeko.Common.TypeReaders.Models.StoopidTime,Discord.ITextChannel)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: SaveChat(StoopidTime, ITextChannel?)
  nameWithType: Utility.SaveChat(StoopidTime, ITextChannel?)
  fullName: Mewdeko.Modules.Utility.Utility.SaveChat(Mewdeko.Common.TypeReaders.Models.StoopidTime, Discord.ITextChannel?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SaveChat
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 222
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Saves the chat log of a channel. Public mewdeko saves this to the nginx cdn then sends you a link to display it on the cdn
  example: []
  syntax:
    content: >-
      [Cmd("SaveChat")]

      [Aliases("SaveChat")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageMessages)]

      public Task SaveChat(StoopidTime time, ITextChannel? channel = null)
    parameters:
    - id: time
      type: Mewdeko.Common.TypeReaders.Models.StoopidTime
      description: ''
    - id: channel
      type: Discord.ITextChannel
      description: ''
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SaveChat")>

      <Aliases("SaveChat")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageMessages)>

      Public Function SaveChat(time As StoopidTime, channel As ITextChannel = Nothing) As Task
  overload: Mewdeko.Modules.Utility.Utility.SaveChat*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SaveChat
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SaveChat
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8192"
  nameWithType.vb: Utility.SaveChat(StoopidTime, ITextChannel)
  fullName.vb: Mewdeko.Modules.Utility.Utility.SaveChat(Mewdeko.Common.TypeReaders.Models.StoopidTime, Discord.ITextChannel)
  name.vb: SaveChat(StoopidTime, ITextChannel)
- uid: Mewdeko.Modules.Utility.Utility.EmoteList(System.String)
  commentId: M:Mewdeko.Modules.Utility.Utility.EmoteList(System.String)
  id: EmoteList(System.String)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: EmoteList(string?)
  nameWithType: Utility.EmoteList(string?)
  fullName: Mewdeko.Modules.Utility.Utility.EmoteList(string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: EmoteList
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 284
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Gets the emotes in a guild. If an emote type is specified, only the emotes of that type will be listed.
  example: []
  syntax:
    content: >-
      [Cmd("EmoteList")]

      [Aliases("EmoteList")]

      public Task EmoteList(string? emotetype = null)
    parameters:
    - id: emotetype
      type: System.String
      description: The type of emotes to list (animated or nonanimated).
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("EmoteList")>

      <Aliases("EmoteList")>

      Public Function EmoteList(emotetype As String = Nothing) As Task
  overload: Mewdeko.Modules.Utility.Utility.EmoteList*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: EmoteList
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: EmoteList
  nameWithType.vb: Utility.EmoteList(String)
  fullName.vb: Mewdeko.Modules.Utility.Utility.EmoteList(String)
  name.vb: EmoteList(String)
- uid: Mewdeko.Modules.Utility.Utility.Invite
  commentId: M:Mewdeko.Modules.Utility.Utility.Invite
  id: Invite
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: Invite()
  nameWithType: Utility.Invite()
  fullName: Mewdeko.Modules.Utility.Utility.Invite()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Invite
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 335
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Gets the bots invite link. As well as showing the website, docs, and support server.
  example: []
  syntax:
    content: >-
      [Cmd("Invite")]

      [Aliases("Invite")]

      public Task Invite()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Invite")>

      <Aliases("Invite")>

      Public Function Invite() As Task
  overload: Mewdeko.Modules.Utility.Utility.Invite*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Invite
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Invite
- uid: Mewdeko.Modules.Utility.Utility.SnipeSet(Mewdeko.Common.TypeReaders.Models.PermissionAction)
  commentId: M:Mewdeko.Modules.Utility.Utility.SnipeSet(Mewdeko.Common.TypeReaders.Models.PermissionAction)
  id: SnipeSet(Mewdeko.Common.TypeReaders.Models.PermissionAction)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: SnipeSet(PermissionAction)
  nameWithType: Utility.SnipeSet(PermissionAction)
  fullName: Mewdeko.Modules.Utility.Utility.SnipeSet(Mewdeko.Common.TypeReaders.Models.PermissionAction)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SnipeSet
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 351
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Enables or disables sniping of deleted messages. Default is disabled.
  example: []
  syntax:
    content: >-
      [Cmd("SnipeSet")]

      [Aliases("SnipeSet")]

      [UserPerm(GuildPermission.Administrator)]

      [RequireContext(ContextType.Guild)]

      public Task SnipeSet(PermissionAction value)
    parameters:
    - id: value
      type: Mewdeko.Common.TypeReaders.Models.PermissionAction
      description: The value to set.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SnipeSet")>

      <Aliases("SnipeSet")>

      <UserPerm(GuildPermission.Administrator)>

      <RequireContext(ContextType.Guild)>

      Public Function SnipeSet(value As PermissionAction) As Task
  overload: Mewdeko.Modules.Utility.Utility.SnipeSet*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SnipeSet
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SnipeSet
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8"
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
- uid: Mewdeko.Modules.Utility.Utility.Snipe
  commentId: M:Mewdeko.Modules.Utility.Utility.Snipe
  id: Snipe
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: Snipe()
  nameWithType: Utility.Snipe()
  fullName: Mewdeko.Modules.Utility.Utility.Snipe()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Snipe
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 363
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Snipes the last deleted message in the channel.
  example: []
  syntax:
    content: >-
      [Cmd("Snipe")]

      [Aliases("Snipe")]

      [RequireContext(ContextType.Guild)]

      public Task Snipe()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Snipe")>

      <Aliases("Snipe")>

      <RequireContext(ContextType.Guild)>

      Public Function Snipe() As Task
  overload: Mewdeko.Modules.Utility.Utility.Snipe*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Snipe
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Snipe
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
- uid: Mewdeko.Modules.Utility.Utility.SnipeList(System.Int32)
  commentId: M:Mewdeko.Modules.Utility.Utility.SnipeList(System.Int32)
  id: SnipeList(System.Int32)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: SnipeList(int)
  nameWithType: Utility.SnipeList(int)
  fullName: Mewdeko.Modules.Utility.Utility.SnipeList(int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SnipeList
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 418
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Gets the last x amount of deleted messages in a channel.
  example: []
  syntax:
    content: >-
      [Cmd("SnipeList")]

      [Aliases("SnipeList")]

      [RequireContext(ContextType.Guild)]

      public Task SnipeList(int amount = 5)
    parameters:
    - id: amount
      type: System.Int32
      description: The amount of messages to get.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SnipeList")>

      <Aliases("SnipeList")>

      <RequireContext(ContextType.Guild)>

      Public Function SnipeList(amount As Integer = 5) As Task
  overload: Mewdeko.Modules.Utility.Utility.SnipeList*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SnipeList
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SnipeList
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  nameWithType.vb: Utility.SnipeList(Integer)
  fullName.vb: Mewdeko.Modules.Utility.Utility.SnipeList(Integer)
  name.vb: SnipeList(Integer)
- uid: Mewdeko.Modules.Utility.Utility.SnipeList(Discord.IUser,System.Int32)
  commentId: M:Mewdeko.Modules.Utility.Utility.SnipeList(Discord.IUser,System.Int32)
  id: SnipeList(Discord.IUser,System.Int32)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: SnipeList(IUser, int)
  nameWithType: Utility.SnipeList(IUser, int)
  fullName: Mewdeko.Modules.Utility.Utility.SnipeList(Discord.IUser, int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SnipeList
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 479
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Gets the last x amount of deleted messages by a user in a channel.
  example: []
  syntax:
    content: >-
      [Cmd("SnipeList")]

      [Aliases("SnipeList")]

      [RequireContext(ContextType.Guild)]

      public Task SnipeList(IUser user, int amount = 5)
    parameters:
    - id: user
      type: Discord.IUser
      description: The user to get the messages of.
    - id: amount
      type: System.Int32
      description: The amount of messages to get.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SnipeList")>

      <Aliases("SnipeList")>

      <RequireContext(ContextType.Guild)>

      Public Function SnipeList(user As IUser, amount As Integer = 5) As Task
  overload: Mewdeko.Modules.Utility.Utility.SnipeList*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SnipeList
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SnipeList
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  nameWithType.vb: Utility.SnipeList(IUser, Integer)
  fullName.vb: Mewdeko.Modules.Utility.Utility.SnipeList(Discord.IUser, Integer)
  name.vb: SnipeList(IUser, Integer)
- uid: Mewdeko.Modules.Utility.Utility.SnipeList(Discord.ITextChannel,System.Int32)
  commentId: M:Mewdeko.Modules.Utility.Utility.SnipeList(Discord.ITextChannel,System.Int32)
  id: SnipeList(Discord.ITextChannel,System.Int32)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: SnipeList(ITextChannel, int)
  nameWithType: Utility.SnipeList(ITextChannel, int)
  fullName: Mewdeko.Modules.Utility.Utility.SnipeList(Discord.ITextChannel, int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SnipeList
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 540
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Gets the last x amount of deleted messages in a channel.
  example: []
  syntax:
    content: >-
      [Cmd("SnipeList")]

      [Aliases("SnipeList")]

      [RequireContext(ContextType.Guild)]

      public Task SnipeList(ITextChannel channel, int amount = 5)
    parameters:
    - id: channel
      type: Discord.ITextChannel
      description: The channel to get the messages of.
    - id: amount
      type: System.Int32
      description: The amount of messages to get.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SnipeList")>

      <Aliases("SnipeList")>

      <RequireContext(ContextType.Guild)>

      Public Function SnipeList(channel As ITextChannel, amount As Integer = 5) As Task
  overload: Mewdeko.Modules.Utility.Utility.SnipeList*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SnipeList
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SnipeList
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  nameWithType.vb: Utility.SnipeList(ITextChannel, Integer)
  fullName.vb: Mewdeko.Modules.Utility.Utility.SnipeList(Discord.ITextChannel, Integer)
  name.vb: SnipeList(ITextChannel, Integer)
- uid: Mewdeko.Modules.Utility.Utility.SnipeList(Discord.ITextChannel,Discord.IUser,System.Int32)
  commentId: M:Mewdeko.Modules.Utility.Utility.SnipeList(Discord.ITextChannel,Discord.IUser,System.Int32)
  id: SnipeList(Discord.ITextChannel,Discord.IUser,System.Int32)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: SnipeList(ITextChannel, IUser, int)
  nameWithType: Utility.SnipeList(ITextChannel, IUser, int)
  fullName: Mewdeko.Modules.Utility.Utility.SnipeList(Discord.ITextChannel, Discord.IUser, int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: SnipeList
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 602
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Gets the last x amount of deleted messages by a user in a specified channel.
  example: []
  syntax:
    content: >-
      [Cmd("SnipeList")]

      [Aliases("SnipeList")]

      [RequireContext(ContextType.Guild)]

      public Task SnipeList(ITextChannel channel, IUser user, int amount = 5)
    parameters:
    - id: channel
      type: Discord.ITextChannel
      description: The channel to get the messages of.
    - id: user
      type: Discord.IUser
      description: The user to get the messages of.
    - id: amount
      type: System.Int32
      description: The amount of messages to get.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("SnipeList")>

      <Aliases("SnipeList")>

      <RequireContext(ContextType.Guild)>

      Public Function SnipeList(channel As ITextChannel, user As IUser, amount As Integer = 5) As Task
  overload: Mewdeko.Modules.Utility.Utility.SnipeList*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: SnipeList
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SnipeList
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  nameWithType.vb: Utility.SnipeList(ITextChannel, IUser, Integer)
  fullName.vb: Mewdeko.Modules.Utility.Utility.SnipeList(Discord.ITextChannel, Discord.IUser, Integer)
  name.vb: SnipeList(ITextChannel, IUser, Integer)
- uid: Mewdeko.Modules.Utility.Utility.EditSnipeList(System.Int32)
  commentId: M:Mewdeko.Modules.Utility.Utility.EditSnipeList(System.Int32)
  id: EditSnipeList(System.Int32)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: EditSnipeList(int)
  nameWithType: Utility.EditSnipeList(int)
  fullName: Mewdeko.Modules.Utility.Utility.EditSnipeList(int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: EditSnipeList
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 662
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Gets the last x amount of edited messages in the current channel.
  example: []
  syntax:
    content: >-
      [Cmd("EditSnipeList")]

      [Aliases("EditSnipeList")]

      [RequireContext(ContextType.Guild)]

      public Task EditSnipeList(int amount = 5)
    parameters:
    - id: amount
      type: System.Int32
      description: The amount of messages to get.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("EditSnipeList")>

      <Aliases("EditSnipeList")>

      <RequireContext(ContextType.Guild)>

      Public Function EditSnipeList(amount As Integer = 5) As Task
  overload: Mewdeko.Modules.Utility.Utility.EditSnipeList*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: EditSnipeList
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: EditSnipeList
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  nameWithType.vb: Utility.EditSnipeList(Integer)
  fullName.vb: Mewdeko.Modules.Utility.Utility.EditSnipeList(Integer)
  name.vb: EditSnipeList(Integer)
- uid: Mewdeko.Modules.Utility.Utility.EditSnipeList(Discord.IUser,System.Int32)
  commentId: M:Mewdeko.Modules.Utility.Utility.EditSnipeList(Discord.IUser,System.Int32)
  id: EditSnipeList(Discord.IUser,System.Int32)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: EditSnipeList(IUser, int)
  nameWithType: Utility.EditSnipeList(IUser, int)
  fullName: Mewdeko.Modules.Utility.Utility.EditSnipeList(Discord.IUser, int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: EditSnipeList
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 723
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Gets the last x amount of edited messages in a channel by a user.
  example: []
  syntax:
    content: >-
      [Cmd("EditSnipeList")]

      [Aliases("EditSnipeList")]

      [RequireContext(ContextType.Guild)]

      public Task EditSnipeList(IUser user, int amount = 5)
    parameters:
    - id: user
      type: Discord.IUser
      description: The user to get the messages of.
    - id: amount
      type: System.Int32
      description: The amount of messages to get.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("EditSnipeList")>

      <Aliases("EditSnipeList")>

      <RequireContext(ContextType.Guild)>

      Public Function EditSnipeList(user As IUser, amount As Integer = 5) As Task
  overload: Mewdeko.Modules.Utility.Utility.EditSnipeList*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: EditSnipeList
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: EditSnipeList
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  nameWithType.vb: Utility.EditSnipeList(IUser, Integer)
  fullName.vb: Mewdeko.Modules.Utility.Utility.EditSnipeList(Discord.IUser, Integer)
  name.vb: EditSnipeList(IUser, Integer)
- uid: Mewdeko.Modules.Utility.Utility.EditSnipeList(Discord.ITextChannel,System.Int32)
  commentId: M:Mewdeko.Modules.Utility.Utility.EditSnipeList(Discord.ITextChannel,System.Int32)
  id: EditSnipeList(Discord.ITextChannel,System.Int32)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: EditSnipeList(ITextChannel, int)
  nameWithType: Utility.EditSnipeList(ITextChannel, int)
  fullName: Mewdeko.Modules.Utility.Utility.EditSnipeList(Discord.ITextChannel, int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: EditSnipeList
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 784
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Gets the last x amount of edited messages in a channel.
  example: []
  syntax:
    content: >-
      [Cmd("EditSnipeList")]

      [Aliases("EditSnipeList")]

      [RequireContext(ContextType.Guild)]

      public Task EditSnipeList(ITextChannel channel, int amount = 5)
    parameters:
    - id: channel
      type: Discord.ITextChannel
      description: The channel to get the messages of.
    - id: amount
      type: System.Int32
      description: The amount of messages to get.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("EditSnipeList")>

      <Aliases("EditSnipeList")>

      <RequireContext(ContextType.Guild)>

      Public Function EditSnipeList(channel As ITextChannel, amount As Integer = 5) As Task
  overload: Mewdeko.Modules.Utility.Utility.EditSnipeList*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: EditSnipeList
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: EditSnipeList
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  nameWithType.vb: Utility.EditSnipeList(ITextChannel, Integer)
  fullName.vb: Mewdeko.Modules.Utility.Utility.EditSnipeList(Discord.ITextChannel, Integer)
  name.vb: EditSnipeList(ITextChannel, Integer)
- uid: Mewdeko.Modules.Utility.Utility.EditSnipeList(Discord.ITextChannel,Discord.IUser,System.Int32)
  commentId: M:Mewdeko.Modules.Utility.Utility.EditSnipeList(Discord.ITextChannel,Discord.IUser,System.Int32)
  id: EditSnipeList(Discord.ITextChannel,Discord.IUser,System.Int32)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: EditSnipeList(ITextChannel, IUser, int)
  nameWithType: Utility.EditSnipeList(ITextChannel, IUser, int)
  fullName: Mewdeko.Modules.Utility.Utility.EditSnipeList(Discord.ITextChannel, Discord.IUser, int)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: EditSnipeList
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 846
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Gets the last x amount of edited messages by a user in a specified channel.
  example: []
  syntax:
    content: >-
      [Cmd("EditSnipeList")]

      [Aliases("EditSnipeList")]

      [RequireContext(ContextType.Guild)]

      public Task EditSnipeList(ITextChannel channel, IUser user, int amount = 5)
    parameters:
    - id: channel
      type: Discord.ITextChannel
      description: The channel to get the messages of.
    - id: user
      type: Discord.IUser
      description: The user to get the messages of.
    - id: amount
      type: System.Int32
      description: The amount of messages to get.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("EditSnipeList")>

      <Aliases("EditSnipeList")>

      <RequireContext(ContextType.Guild)>

      Public Function EditSnipeList(channel As ITextChannel, user As IUser, amount As Integer = 5) As Task
  overload: Mewdeko.Modules.Utility.Utility.EditSnipeList*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: EditSnipeList
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: EditSnipeList
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  nameWithType.vb: Utility.EditSnipeList(ITextChannel, IUser, Integer)
  fullName.vb: Mewdeko.Modules.Utility.Utility.EditSnipeList(Discord.ITextChannel, Discord.IUser, Integer)
  name.vb: EditSnipeList(ITextChannel, IUser, Integer)
- uid: Mewdeko.Modules.Utility.Utility.Snipe(Discord.IUser)
  commentId: M:Mewdeko.Modules.Utility.Utility.Snipe(Discord.IUser)
  id: Snipe(Discord.IUser)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: Snipe(IUser)
  nameWithType: Utility.Snipe(IUser)
  fullName: Mewdeko.Modules.Utility.Utility.Snipe(Discord.IUser)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Snipe
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 907
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Snipes the last deleted message by a user in the current channel.
  example: []
  syntax:
    content: >-
      [Cmd("Snipe")]

      [Aliases("Snipe")]

      [RequireContext(ContextType.Guild)]

      [Priority(1)]

      public Task Snipe(IUser user1)
    parameters:
    - id: user1
      type: Discord.IUser
      description: The user to get the message of.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Snipe")>

      <Aliases("Snipe")>

      <RequireContext(ContextType.Guild)>

      <Priority(1)>

      Public Function Snipe(user1 As IUser) As Task
  overload: Mewdeko.Modules.Utility.Utility.Snipe*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Snipe
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Snipe
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Discord.Commands.PriorityAttribute
    ctor: Discord.Commands.PriorityAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 1
- uid: Mewdeko.Modules.Utility.Utility.VCheck(System.String)
  commentId: M:Mewdeko.Modules.Utility.Utility.VCheck(System.String)
  id: VCheck(System.String)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: VCheck(string?)
  nameWithType: Utility.VCheck(string?)
  fullName: Mewdeko.Modules.Utility.Utility.VCheck(string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: VCheck
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 961
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Checks a url for viruses using the virustotal api.
  example: []
  syntax:
    content: >-
      [Cmd("VCheck")]

      [Aliases("VCheck")]

      [RequireContext(ContextType.Guild)]

      [Priority(2)]

      public Task VCheck(string? url = null)
    parameters:
    - id: url
      type: System.String
      description: The url to check.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("VCheck")>

      <Aliases("VCheck")>

      <RequireContext(ContextType.Guild)>

      <Priority(2)>

      Public Function VCheck(url As String = Nothing) As Task
  overload: Mewdeko.Modules.Utility.Utility.VCheck*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: VCheck
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: VCheck
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Discord.Commands.PriorityAttribute
    ctor: Discord.Commands.PriorityAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 2
  nameWithType.vb: Utility.VCheck(String)
  fullName.vb: Mewdeko.Modules.Utility.Utility.VCheck(String)
  name.vb: VCheck(String)
- uid: Mewdeko.Modules.Utility.Utility.Snipe(Discord.ITextChannel)
  commentId: M:Mewdeko.Modules.Utility.Utility.Snipe(Discord.ITextChannel)
  id: Snipe(Discord.ITextChannel)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: Snipe(ITextChannel)
  nameWithType: Utility.Snipe(ITextChannel)
  fullName: Mewdeko.Modules.Utility.Utility.Snipe(Discord.ITextChannel)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Snipe
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 984
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Snipes the last deleted message in a specified channel.
  example: []
  syntax:
    content: >-
      [Cmd("Snipe")]

      [Aliases("Snipe")]

      [RequireContext(ContextType.Guild)]

      [Priority(2)]

      public Task Snipe(ITextChannel chan)
    parameters:
    - id: chan
      type: Discord.ITextChannel
      description: The channel to get the message of.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Snipe")>

      <Aliases("Snipe")>

      <RequireContext(ContextType.Guild)>

      <Priority(2)>

      Public Function Snipe(chan As ITextChannel) As Task
  overload: Mewdeko.Modules.Utility.Utility.Snipe*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Snipe
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Snipe
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Discord.Commands.PriorityAttribute
    ctor: Discord.Commands.PriorityAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 2
- uid: Mewdeko.Modules.Utility.Utility.Snipe(Discord.ITextChannel,Discord.IUser)
  commentId: M:Mewdeko.Modules.Utility.Utility.Snipe(Discord.ITextChannel,Discord.IUser)
  id: Snipe(Discord.ITextChannel,Discord.IUser)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: Snipe(ITextChannel, IUser)
  nameWithType: Utility.Snipe(ITextChannel, IUser)
  fullName: Mewdeko.Modules.Utility.Utility.Snipe(Discord.ITextChannel, Discord.IUser)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Snipe
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1040
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Snipes the last deleted message by a user in a specified channel.
  example: []
  syntax:
    content: >-
      [Cmd("Snipe")]

      [Aliases("Snipe")]

      [RequireContext(ContextType.Guild)]

      [Priority(2)]

      public Task Snipe(ITextChannel chan, IUser user1)
    parameters:
    - id: chan
      type: Discord.ITextChannel
      description: The channel to get the message of.
    - id: user1
      type: Discord.IUser
      description: The user to get the message of.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Snipe")>

      <Aliases("Snipe")>

      <RequireContext(ContextType.Guild)>

      <Priority(2)>

      Public Function Snipe(chan As ITextChannel, user1 As IUser) As Task
  overload: Mewdeko.Modules.Utility.Utility.Snipe*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Snipe
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Snipe
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Discord.Commands.PriorityAttribute
    ctor: Discord.Commands.PriorityAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 2
- uid: Mewdeko.Modules.Utility.Utility.EditSnipe
  commentId: M:Mewdeko.Modules.Utility.Utility.EditSnipe
  id: EditSnipe
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: EditSnipe()
  nameWithType: Utility.EditSnipe()
  fullName: Mewdeko.Modules.Utility.Utility.EditSnipe()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: EditSnipe
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1097
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Snipes the last edited message in the current channel.
  example: []
  syntax:
    content: >-
      [Cmd("EditSnipe")]

      [Aliases("EditSnipe")]

      [RequireContext(ContextType.Guild)]

      public Task EditSnipe()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("EditSnipe")>

      <Aliases("EditSnipe")>

      <RequireContext(ContextType.Guild)>

      Public Function EditSnipe() As Task
  overload: Mewdeko.Modules.Utility.Utility.EditSnipe*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: EditSnipe
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: EditSnipe
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
- uid: Mewdeko.Modules.Utility.Utility.EditSnipe(Discord.IUser)
  commentId: M:Mewdeko.Modules.Utility.Utility.EditSnipe(Discord.IUser)
  id: EditSnipe(Discord.IUser)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: EditSnipe(IUser)
  nameWithType: Utility.EditSnipe(IUser)
  fullName: Mewdeko.Modules.Utility.Utility.EditSnipe(Discord.IUser)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: EditSnipe
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1154
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Snipes the last edited message by a user in the current channel.
  example: []
  syntax:
    content: >-
      [Cmd("EditSnipe")]

      [Aliases("EditSnipe")]

      [RequireContext(ContextType.Guild)]

      [Priority(1)]

      public Task EditSnipe(IUser user1)
    parameters:
    - id: user1
      type: Discord.IUser
      description: The user to get the message of.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("EditSnipe")>

      <Aliases("EditSnipe")>

      <RequireContext(ContextType.Guild)>

      <Priority(1)>

      Public Function EditSnipe(user1 As IUser) As Task
  overload: Mewdeko.Modules.Utility.Utility.EditSnipe*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: EditSnipe
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: EditSnipe
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Discord.Commands.PriorityAttribute
    ctor: Discord.Commands.PriorityAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 1
- uid: Mewdeko.Modules.Utility.Utility.EditSnipe(Discord.ITextChannel)
  commentId: M:Mewdeko.Modules.Utility.Utility.EditSnipe(Discord.ITextChannel)
  id: EditSnipe(Discord.ITextChannel)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: EditSnipe(ITextChannel)
  nameWithType: Utility.EditSnipe(ITextChannel)
  fullName: Mewdeko.Modules.Utility.Utility.EditSnipe(Discord.ITextChannel)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: EditSnipe
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1212
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Snipes the last edited message in a specified channel.
  example: []
  syntax:
    content: >-
      [Cmd("EditSnipe")]

      [Aliases("EditSnipe")]

      [RequireContext(ContextType.Guild)]

      [Priority(1)]

      public Task EditSnipe(ITextChannel chan)
    parameters:
    - id: chan
      type: Discord.ITextChannel
      description: The channel to get the message of.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("EditSnipe")>

      <Aliases("EditSnipe")>

      <RequireContext(ContextType.Guild)>

      <Priority(1)>

      Public Function EditSnipe(chan As ITextChannel) As Task
  overload: Mewdeko.Modules.Utility.Utility.EditSnipe*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: EditSnipe
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: EditSnipe
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Discord.Commands.PriorityAttribute
    ctor: Discord.Commands.PriorityAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 1
- uid: Mewdeko.Modules.Utility.Utility.EditSnipe(Discord.ITextChannel,Discord.IUser)
  commentId: M:Mewdeko.Modules.Utility.Utility.EditSnipe(Discord.ITextChannel,Discord.IUser)
  id: EditSnipe(Discord.ITextChannel,Discord.IUser)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: EditSnipe(ITextChannel, IUser)
  nameWithType: Utility.EditSnipe(ITextChannel, IUser)
  fullName: Mewdeko.Modules.Utility.Utility.EditSnipe(Discord.ITextChannel, Discord.IUser)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: EditSnipe
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1272
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Snipes the last edited message by a user in a specified channel.
  example: []
  syntax:
    content: >-
      [Cmd("EditSnipe")]

      [Aliases("EditSnipe")]

      [RequireContext(ContextType.Guild)]

      [Priority(1)]

      public Task EditSnipe(ITextChannel chan, IUser user1)
    parameters:
    - id: chan
      type: Discord.ITextChannel
      description: The channel to get the message of.
    - id: user1
      type: Discord.IUser
      description: The user to get the message of.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("EditSnipe")>

      <Aliases("EditSnipe")>

      <RequireContext(ContextType.Guild)>

      <Priority(1)>

      Public Function EditSnipe(chan As ITextChannel, user1 As IUser) As Task
  overload: Mewdeko.Modules.Utility.Utility.EditSnipe*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: EditSnipe
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: EditSnipe
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Discord.Commands.PriorityAttribute
    ctor: Discord.Commands.PriorityAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 1
- uid: Mewdeko.Modules.Utility.Utility.WhosPlaying(System.String)
  commentId: M:Mewdeko.Modules.Utility.Utility.WhosPlaying(System.String)
  id: WhosPlaying(System.String)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: WhosPlaying(string?)
  nameWithType: Utility.WhosPlaying(string?)
  fullName: Mewdeko.Modules.Utility.Utility.WhosPlaying(string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: WhosPlaying
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1331
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Shows a list of users playing a specified game.
  example: []
  syntax:
    content: >-
      [Cmd("WhosPlaying")]

      [Aliases("WhosPlaying")]

      [RequireContext(ContextType.Guild)]

      public Task WhosPlaying(string? game)
    parameters:
    - id: game
      type: System.String
      description: The game to search for.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("WhosPlaying")>

      <Aliases("WhosPlaying")>

      <RequireContext(ContextType.Guild)>

      Public Function WhosPlaying(game As String) As Task
  overload: Mewdeko.Modules.Utility.Utility.WhosPlaying*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: WhosPlaying
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: WhosPlaying
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  nameWithType.vb: Utility.WhosPlaying(String)
  fullName.vb: Mewdeko.Modules.Utility.Utility.WhosPlaying(String)
  name.vb: WhosPlaying(String)
- uid: Mewdeko.Modules.Utility.Utility.Vote
  commentId: M:Mewdeko.Modules.Utility.Utility.Vote
  id: Vote
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: Vote()
  nameWithType: Utility.Vote()
  fullName: Mewdeko.Modules.Utility.Utility.Vote()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Vote
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1385
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Shows a link to vote for mewdeko.
  example: []
  syntax:
    content: >-
      [Cmd("Vote")]

      [Aliases("Vote")]

      [RequireContext(ContextType.Guild)]

      public Task Vote()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Vote")>

      <Aliases("Vote")>

      <RequireContext(ContextType.Guild)>

      Public Function Vote() As Task
  overload: Mewdeko.Modules.Utility.Utility.Vote*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Vote
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Vote
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
- uid: Mewdeko.Modules.Utility.Utility.InRole(Discord.IRole)
  commentId: M:Mewdeko.Modules.Utility.Utility.InRole(Discord.IRole)
  id: InRole(Discord.IRole)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: InRole(IRole)
  nameWithType: Utility.InRole(IRole)
  fullName: Mewdeko.Modules.Utility.Utility.InRole(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: InRole
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1396
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Shows a list of users in a specified role.
  example: []
  syntax:
    content: >-
      [Cmd("InRole")]

      [Aliases("InRole")]

      [RequireContext(ContextType.Guild)]

      public Task InRole(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to search for.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("InRole")>

      <Aliases("InRole")>

      <RequireContext(ContextType.Guild)>

      Public Function InRole(role As IRole) As Task
  overload: Mewdeko.Modules.Utility.Utility.InRole*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: InRole
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: InRole
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
- uid: Mewdeko.Modules.Utility.Utility.InRoles(Discord.IRole,Discord.IRole)
  commentId: M:Mewdeko.Modules.Utility.Utility.InRoles(Discord.IRole,Discord.IRole)
  id: InRoles(Discord.IRole,Discord.IRole)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: InRoles(IRole, IRole)
  nameWithType: Utility.InRoles(IRole, IRole)
  fullName: Mewdeko.Modules.Utility.Utility.InRoles(Discord.IRole, Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: InRoles
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1437
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Shows a list of users in the specified roles.
  example: []
  syntax:
    content: >-
      [Cmd("InRoles")]

      [Aliases("InRoles")]

      [RequireContext(ContextType.Guild)]

      public Task InRoles(IRole role, IRole role2)
    parameters:
    - id: role
      type: Discord.IRole
      description: The first role to search for.
    - id: role2
      type: Discord.IRole
      description: The second role to search for.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("InRoles")>

      <Aliases("InRoles")>

      <RequireContext(ContextType.Guild)>

      Public Function InRoles(role As IRole, role2 As IRole) As Task
  overload: Mewdeko.Modules.Utility.Utility.InRoles*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: InRoles
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: InRoles
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
- uid: Mewdeko.Modules.Utility.Utility.UserId(Discord.IGuildUser)
  commentId: M:Mewdeko.Modules.Utility.Utility.UserId(Discord.IGuildUser)
  id: UserId(Discord.IGuildUser)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: UserId(IGuildUser?)
  nameWithType: Utility.UserId(IGuildUser?)
  fullName: Mewdeko.Modules.Utility.Utility.UserId(Discord.IGuildUser?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: UserId
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1475
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Gets the user id of a specified user.
  example: []
  syntax:
    content: >-
      [Cmd("UserId")]

      [Aliases("UserId")]

      [RequireContext(ContextType.Guild)]

      public Task UserId(IGuildUser? target = null)
    parameters:
    - id: target
      type: Discord.IGuildUser
      description: The user to get the id of.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("UserId")>

      <Aliases("UserId")>

      <RequireContext(ContextType.Guild)>

      Public Function UserId(target As IGuildUser = Nothing) As Task
  overload: Mewdeko.Modules.Utility.Utility.UserId*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: UserId
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: UserId
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  nameWithType.vb: Utility.UserId(IGuildUser)
  fullName.vb: Mewdeko.Modules.Utility.Utility.UserId(Discord.IGuildUser)
  name.vb: UserId(IGuildUser)
- uid: Mewdeko.Modules.Utility.Utility.RoleId(Discord.IRole)
  commentId: M:Mewdeko.Modules.Utility.Utility.RoleId(Discord.IRole)
  id: RoleId(Discord.IRole)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: RoleId(IRole)
  nameWithType: Utility.RoleId(IRole)
  fullName: Mewdeko.Modules.Utility.Utility.RoleId(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: RoleId
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1487
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Gets the role id of a specified role.
  example: []
  syntax:
    content: >-
      [Cmd("RoleId")]

      [Aliases("RoleId")]

      [RequireContext(ContextType.Guild)]

      public Task RoleId(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to get the id of.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("RoleId")>

      <Aliases("RoleId")>

      <RequireContext(ContextType.Guild)>

      Public Function RoleId(role As IRole) As Task
  overload: Mewdeko.Modules.Utility.Utility.RoleId*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: RoleId
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RoleId
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
- uid: Mewdeko.Modules.Utility.Utility.ChannelId
  commentId: M:Mewdeko.Modules.Utility.Utility.ChannelId
  id: ChannelId
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: ChannelId()
  nameWithType: Utility.ChannelId()
  fullName: Mewdeko.Modules.Utility.Utility.ChannelId()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ChannelId
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1495
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Gets the channel id of the current channel.
  example: []
  syntax:
    content: >-
      [Cmd("ChannelId")]

      [Aliases("ChannelId")]

      public Task ChannelId()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ChannelId")>

      <Aliases("ChannelId")>

      Public Function ChannelId() As Task
  overload: Mewdeko.Modules.Utility.Utility.ChannelId*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ChannelId
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ChannelId
- uid: Mewdeko.Modules.Utility.Utility.ServerId
  commentId: M:Mewdeko.Modules.Utility.Utility.ServerId
  id: ServerId
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: ServerId()
  nameWithType: Utility.ServerId()
  fullName: Mewdeko.Modules.Utility.Utility.ServerId()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ServerId
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1503
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Gets the server id of the current server.
  example: []
  syntax:
    content: >-
      [Cmd("ServerId")]

      [Aliases("ServerId")]

      [RequireContext(ContextType.Guild)]

      public Task ServerId()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ServerId")>

      <Aliases("ServerId")>

      <RequireContext(ContextType.Guild)>

      Public Function ServerId() As Task
  overload: Mewdeko.Modules.Utility.Utility.ServerId*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ServerId
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ServerId
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
- uid: Mewdeko.Modules.Utility.Utility.Roles(Discord.IGuildUser)
  commentId: M:Mewdeko.Modules.Utility.Utility.Roles(Discord.IGuildUser)
  id: Roles(Discord.IGuildUser)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: Roles(IGuildUser?)
  nameWithType: Utility.Roles(IGuildUser?)
  fullName: Mewdeko.Modules.Utility.Utility.Roles(Discord.IGuildUser?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Roles
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1512
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Gets a list of roles in the current server. Shows a user's roles if a user is specified.
  example: []
  syntax:
    content: >-
      [Cmd("Roles")]

      [Aliases("Roles")]

      [RequireContext(ContextType.Guild)]

      public Task Roles(IGuildUser? target = null)
    parameters:
    - id: target
      type: Discord.IGuildUser
      description: The user to get the roles of.
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Roles")>

      <Aliases("Roles")>

      <RequireContext(ContextType.Guild)>

      Public Function Roles(target As IGuildUser = Nothing) As Task
  overload: Mewdeko.Modules.Utility.Utility.Roles*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Roles
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Roles
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  nameWithType.vb: Utility.Roles(IGuildUser)
  fullName.vb: Mewdeko.Modules.Utility.Utility.Roles(Discord.IGuildUser)
  name.vb: Roles(IGuildUser)
- uid: Mewdeko.Modules.Utility.Utility.ChannelTopic(Discord.ITextChannel)
  commentId: M:Mewdeko.Modules.Utility.Utility.ChannelTopic(Discord.ITextChannel)
  id: ChannelTopic(Discord.ITextChannel)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: ChannelTopic(ITextChannel?)
  nameWithType: Utility.ChannelTopic(ITextChannel?)
  fullName: Mewdeko.Modules.Utility.Utility.ChannelTopic(Discord.ITextChannel?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: ChannelTopic
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1591
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Gets the topic of the current channel. Shows the topic of a specified channel if one is specified.
  example: []
  syntax:
    content: >-
      [Cmd("ChannelTopic")]

      [Aliases("ChannelTopic")]

      [RequireContext(ContextType.Guild)]

      public Task ChannelTopic(ITextChannel? channel = null)
    parameters:
    - id: channel
      type: Discord.ITextChannel
      description: The channel to get the topic of.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("ChannelTopic")>

      <Aliases("ChannelTopic")>

      <RequireContext(ContextType.Guild)>

      Public Function ChannelTopic(channel As ITextChannel = Nothing) As Task
  overload: Mewdeko.Modules.Utility.Utility.ChannelTopic*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: ChannelTopic
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ChannelTopic
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  nameWithType.vb: Utility.ChannelTopic(ITextChannel)
  fullName.vb: Mewdeko.Modules.Utility.Utility.ChannelTopic(Discord.ITextChannel)
  name.vb: ChannelTopic(ITextChannel)
- uid: Mewdeko.Modules.Utility.Utility.Say(Discord.ITextChannel,System.String)
  commentId: M:Mewdeko.Modules.Utility.Utility.Say(Discord.ITextChannel,System.String)
  id: Say(Discord.ITextChannel,System.String)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: Say(ITextChannel, string?)
  nameWithType: Utility.Say(ITextChannel, string?)
  fullName: Mewdeko.Modules.Utility.Utility.Say(Discord.ITextChannel, string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Say
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1608
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Used to say or embed a message as the bot.
  example: []
  syntax:
    content: >-
      [Cmd("Say")]

      [Aliases("Say")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageMessages)]

      [Priority(1)]

      public Task Say(ITextChannel channel, string? message)
    parameters:
    - id: channel
      type: Discord.ITextChannel
      description: The channel to send the message to.
    - id: message
      type: System.String
      description: The message to send.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Say")>

      <Aliases("Say")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageMessages)>

      <Priority(1)>

      Public Function Say(channel As ITextChannel, message As String) As Task
  overload: Mewdeko.Modules.Utility.Utility.Say*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Say
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Say
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8192"
  - type: Discord.Commands.PriorityAttribute
    ctor: Discord.Commands.PriorityAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 1
  nameWithType.vb: Utility.Say(ITextChannel, String)
  fullName.vb: Mewdeko.Modules.Utility.Utility.Say(Discord.ITextChannel, String)
  name.vb: Say(ITextChannel, String)
- uid: Mewdeko.Modules.Utility.Utility.Say(System.String)
  commentId: M:Mewdeko.Modules.Utility.Utility.Say(System.String)
  id: Say(System.String)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: Say(string?)
  nameWithType: Utility.Say(string?)
  fullName: Mewdeko.Modules.Utility.Utility.Say(string?)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Say
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1733
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Used to say or embed a message as the bot.
  example: []
  syntax:
    content: >-
      [Cmd("Say")]

      [Aliases("Say")]

      [RequireContext(ContextType.Guild)]

      [UserPerm(GuildPermission.ManageMessages)]

      [Priority(0)]

      public Task Say(string? message = null)
    parameters:
    - id: message
      type: System.String
      description: The message to send.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
    content.vb: >-
      <Cmd("Say")>

      <Aliases("Say")>

      <RequireContext(ContextType.Guild)>

      <UserPerm(GuildPermission.ManageMessages)>

      <Priority(0)>

      Public Function Say(message As String = Nothing) As Task
  overload: Mewdeko.Modules.Utility.Utility.Say*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Say
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Say
  - type: Discord.Commands.RequireContextAttribute
    ctor: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
    arguments:
    - type: Discord.Commands.ContextType
      value: 1
  - type: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.UserPermAttribute.#ctor(Discord.GuildPermission)
    arguments:
    - type: Discord.GuildPermission
      value: "8192"
  - type: Discord.Commands.PriorityAttribute
    ctor: Discord.Commands.PriorityAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 0
  nameWithType.vb: Utility.Say(String)
  fullName.vb: Mewdeko.Modules.Utility.Utility.Say(String)
  name.vb: Say(String)
- uid: Mewdeko.Modules.Utility.Utility.Stats
  commentId: M:Mewdeko.Modules.Utility.Utility.Stats
  id: Stats
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: Stats()
  nameWithType: Utility.Stats()
  fullName: Mewdeko.Modules.Utility.Utility.Stats()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Stats
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1739
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Shows the bot's stats.
  example: []
  syntax:
    content: >-
      [Cmd("Stats")]

      [Aliases("Stats")]

      public Task Stats()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Stats")>

      <Aliases("Stats")>

      Public Function Stats() As Task
  overload: Mewdeko.Modules.Utility.Utility.Stats*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Stats
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Stats
- uid: Mewdeko.Modules.Utility.Utility.Showemojis(System.String)
  commentId: M:Mewdeko.Modules.Utility.Utility.Showemojis(System.String)
  id: Showemojis(System.String)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: Showemojis(string)
  nameWithType: Utility.Showemojis(string)
  fullName: Mewdeko.Modules.Utility.Utility.Showemojis(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Showemojis
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1770
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Enlarges one or more specified emojis.
  example: []
  syntax:
    content: >-
      [Cmd("Showemojis")]

      [Aliases("Showemojis")]

      public Task Showemojis(string _)
    parameters:
    - id: _
      type: System.String
      description: ''
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Showemojis")>

      <Aliases("Showemojis")>

      Public Function Showemojis(_ As String) As Task
  overload: Mewdeko.Modules.Utility.Utility.Showemojis*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Showemojis
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Showemojis
  nameWithType.vb: Utility.Showemojis(String)
  fullName.vb: Mewdeko.Modules.Utility.Utility.Showemojis(String)
  name.vb: Showemojis(String)
- uid: Mewdeko.Modules.Utility.Utility.Ping
  commentId: M:Mewdeko.Modules.Utility.Utility.Ping
  id: Ping
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: Ping()
  nameWithType: Utility.Ping()
  fullName: Mewdeko.Modules.Utility.Utility.Ping()
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Ping
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1786
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Shows the bot's ping.
  example: []
  syntax:
    content: >-
      [Cmd("Ping")]

      [Ratelimit(30)]

      public Task Ping()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Ping")>

      <Ratelimit(30)>

      Public Function Ping() As Task
  overload: Mewdeko.Modules.Utility.Utility.Ping*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Ping
  - type: Mewdeko.Common.Attributes.TextCommands.RatelimitAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.RatelimitAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 30
- uid: Mewdeko.Modules.Utility.Utility.Roll(System.String)
  commentId: M:Mewdeko.Modules.Utility.Utility.Roll(System.String)
  id: Roll(System.String)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: Roll(string)
  nameWithType: Utility.Roll(string)
  fullName: Mewdeko.Modules.Utility.Utility.Roll(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: Roll
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1813
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: Rolls a dice with the specified number of sides. Dnd dice are supported.
  example: []
  syntax:
    content: >-
      [Cmd("Roll")]

      [Aliases("Roll")]

      public Task Roll(string roll)
    parameters:
    - id: roll
      type: System.String
      description: The roll to make.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("Roll")>

      <Aliases("Roll")>

      Public Function Roll(roll As String) As Task
  overload: Mewdeko.Modules.Utility.Utility.Roll*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: Roll
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Roll
  nameWithType.vb: Utility.Roll(String)
  fullName.vb: Mewdeko.Modules.Utility.Utility.Roll(String)
  name.vb: Roll(String)
- uid: Mewdeko.Modules.Utility.Utility.OwoIfy(System.String)
  commentId: M:Mewdeko.Modules.Utility.Utility.OwoIfy(System.String)
  id: OwoIfy(System.String)
  parent: Mewdeko.Modules.Utility.Utility
  langs:
  - csharp
  - vb
  name: OwoIfy(string)
  nameWithType: Utility.OwoIfy(string)
  fullName: Mewdeko.Modules.Utility.Utility.OwoIfy(string)
  type: Method
  source:
    remote:
      path: src/Mewdeko/Modules/Utility/Utility.cs
      branch: psqldeko
      repo: https://github.com/Sylveon76/Mewdeko.git
    id: OwoIfy
    path: src/Mewdeko/Modules/Utility/Utility.cs
    startLine: 1860
  assemblies:
  - Mewdeko
  namespace: Mewdeko.Modules.Utility
  summary: O-OwoIfy WoIfy's the specified input.
  example: []
  syntax:
    content: >-
      [Cmd("OwoIfy")]

      [Aliases("OwoIfy")]

      public Task OwoIfy(string input)
    parameters:
    - id: input
      type: System.String
      description: The input to owoify woify.
      attributes:
      - type: Discord.Commands.RemainderAttribute
        ctor: Discord.Commands.RemainderAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Cmd("OwoIfy")>

      <Aliases("OwoIfy")>

      Public Function OwoIfy(input As String) As Task
  overload: Mewdeko.Modules.Utility.Utility.OwoIfy*
  attributes:
  - type: Mewdeko.Common.Attributes.TextCommands.Cmd
    ctor: Mewdeko.Common.Attributes.TextCommands.Cmd.#ctor(System.String)
    arguments:
    - type: System.String
      value: OwoIfy
  - type: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute
    ctor: Mewdeko.Common.Attributes.TextCommands.AliasesAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: OwoIfy
  nameWithType.vb: Utility.OwoIfy(String)
  fullName.vb: Mewdeko.Modules.Utility.Utility.OwoIfy(String)
  name.vb: OwoIfy(String)
references:
- uid: Mewdeko.Modules.Utility
  commentId: N:Mewdeko.Modules.Utility
  href: Mewdeko.html
  name: Mewdeko.Modules.Utility
  nameWithType: Mewdeko.Modules.Utility
  fullName: Mewdeko.Modules.Utility
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Modules
    name: Modules
    href: Mewdeko.Modules.html
  - name: .
  - uid: Mewdeko.Modules.Utility
    name: Utility
    href: Mewdeko.Modules.Utility.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Modules
    name: Modules
    href: Mewdeko.Modules.html
  - name: .
  - uid: Mewdeko.Modules.Utility
    name: Utility
    href: Mewdeko.Modules.Utility.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  commentId: T:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  parent: Discord.Commands
  definition: Discord.Commands.ModuleBase`1
  name: ModuleBase<ICommandContext>
  nameWithType: ModuleBase<ICommandContext>
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>
  nameWithType.vb: ModuleBase(Of ICommandContext)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext)
  name.vb: ModuleBase(Of ICommandContext)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: <
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase
  commentId: T:Discord.Commands.ModuleBase
  parent: Discord.Commands
  isExternal: true
  name: ModuleBase
  nameWithType: ModuleBase
  fullName: Discord.Commands.ModuleBase
- uid: Mewdeko.Common.MewdekoModule
  commentId: T:Mewdeko.Common.MewdekoModule
  parent: Mewdeko.Common
  href: Mewdeko.Common.MewdekoModule.html
  name: MewdekoModule
  nameWithType: MewdekoModule
  fullName: Mewdeko.Common.MewdekoModule
- uid: Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Utility.Services.UtilityService}
  commentId: T:Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Utility.Services.UtilityService}
  parent: Mewdeko.Common
  definition: Mewdeko.Common.MewdekoModuleBase`1
  href: Mewdeko.Common.MewdekoModuleBase-1.html
  name: MewdekoModuleBase<UtilityService>
  nameWithType: MewdekoModuleBase<UtilityService>
  fullName: Mewdeko.Common.MewdekoModuleBase<Mewdeko.Modules.Utility.Services.UtilityService>
  nameWithType.vb: MewdekoModuleBase(Of UtilityService)
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of Mewdeko.Modules.Utility.Services.UtilityService)
  name.vb: MewdekoModuleBase(Of UtilityService)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: <
  - uid: Mewdeko.Modules.Utility.Services.UtilityService
    name: UtilityService
    href: Mewdeko.Modules.Utility.Services.UtilityService.html
  - name: '>'
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Modules.Utility.Services.UtilityService
    name: UtilityService
    href: Mewdeko.Modules.Utility.Services.UtilityService.html
  - name: )
- uid: Discord.Commands.IModuleBase
  commentId: T:Discord.Commands.IModuleBase
  parent: Discord.Commands
  isExternal: true
  name: IModuleBase
  nameWithType: IModuleBase
  fullName: Discord.Commands.IModuleBase
- uid: Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Utility.Services.UtilityService}.Service
  commentId: P:Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Utility.Services.UtilityService}.Service
  parent: Mewdeko.Common.MewdekoModuleBase{Mewdeko.Modules.Utility.Services.UtilityService}
  definition: Mewdeko.Common.MewdekoModuleBase`1.Service
  href: Mewdeko.Common.MewdekoModuleBase-1.html#Mewdeko_Common_MewdekoModuleBase_1_Service
  name: Service
  nameWithType: MewdekoModuleBase<UtilityService>.Service
  fullName: Mewdeko.Common.MewdekoModuleBase<Mewdeko.Modules.Utility.Services.UtilityService>.Service
  nameWithType.vb: MewdekoModuleBase(Of UtilityService).Service
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of Mewdeko.Modules.Utility.Services.UtilityService).Service
- uid: Mewdeko.Common.MewdekoModule.CultureInfo
  commentId: P:Mewdeko.Common.MewdekoModule.CultureInfo
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CultureInfo
  name: CultureInfo
  nameWithType: MewdekoModule.CultureInfo
  fullName: Mewdeko.Common.MewdekoModule.CultureInfo
- uid: Mewdeko.Common.MewdekoModule.Strings
  commentId: P:Mewdeko.Common.MewdekoModule.Strings
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_Strings
  name: Strings
  nameWithType: MewdekoModule.Strings
  fullName: Mewdeko.Common.MewdekoModule.Strings
- uid: Mewdeko.Common.MewdekoModule.Localization
  commentId: P:Mewdeko.Common.MewdekoModule.Localization
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_Localization
  name: Localization
  nameWithType: MewdekoModule.Localization
  fullName: Mewdeko.Common.MewdekoModule.Localization
- uid: Mewdeko.Common.MewdekoModule.ctx
  commentId: P:Mewdeko.Common.MewdekoModule.ctx
  parent: Mewdeko.Common.MewdekoModule
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ctx
  name: ctx
  nameWithType: MewdekoModule.ctx
  fullName: Mewdeko.Common.MewdekoModule.ctx
- uid: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  commentId: M:Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_BeforeExecute_Discord_Commands_CommandInfo_
  name: BeforeExecute(CommandInfo)
  nameWithType: MewdekoModule.BeforeExecute(CommandInfo)
  fullName: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
    name: BeforeExecute
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_BeforeExecute_Discord_Commands_CommandInfo_
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.BeforeExecute(Discord.Commands.CommandInfo)
    name: BeforeExecute
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_BeforeExecute_Discord_Commands_CommandInfo_
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Mewdeko.Common.MewdekoModule.GetText(System.String)
  commentId: M:Mewdeko.Common.MewdekoModule.GetText(System.String)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_
  name: GetText(string)
  nameWithType: MewdekoModule.GetText(string)
  fullName: Mewdeko.Common.MewdekoModule.GetText(string)
  nameWithType.vb: MewdekoModule.GetText(String)
  fullName.vb: Mewdeko.Common.MewdekoModule.GetText(String)
  name.vb: GetText(String)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String)
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String)
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_System_Object___
  name: GetText(string, params object[])
  nameWithType: MewdekoModule.GetText(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.GetText(string, params object[])
  nameWithType.vb: MewdekoModule.GetText(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.GetText(String, ParamArray Object())
  name.vb: GetText(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.GetText(System.String,System.Object[])
    name: GetText
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetText_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ErrorLocalizedAsync_System_String_System_Object___
  name: ErrorLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ErrorLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ErrorLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(String, ParamArray Object())
  name.vb: ErrorLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
    name: ErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ErrorLocalizedAsync(System.String,System.Object[])
    name: ErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyErrorLocalizedAsync_System_String_System_Object___
  name: ReplyErrorLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ReplyErrorLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ReplyErrorLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(String, ParamArray Object())
  name.vb: ReplyErrorLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
    name: ReplyErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ReplyErrorLocalizedAsync(System.String,System.Object[])
    name: ReplyErrorLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyErrorLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ConfirmLocalizedAsync_System_String_System_Object___
  name: ConfirmLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ConfirmLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ConfirmLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(String, ParamArray Object())
  name.vb: ConfirmLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
    name: ConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ConfirmLocalizedAsync(System.String,System.Object[])
    name: ConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
  commentId: M:Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyConfirmLocalizedAsync_System_String_System_Object___
  name: ReplyConfirmLocalizedAsync(string, params object[])
  nameWithType: MewdekoModule.ReplyConfirmLocalizedAsync(string, params object[])
  fullName: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(string, params object[])
  nameWithType.vb: MewdekoModule.ReplyConfirmLocalizedAsync(String, ParamArray Object())
  fullName.vb: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(String, ParamArray Object())
  name.vb: ReplyConfirmLocalizedAsync(String, ParamArray Object())
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
    name: ReplyConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.ReplyConfirmLocalizedAsync(System.String,System.Object[])
    name: ReplyConfirmLocalizedAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_ReplyConfirmLocalizedAsync_System_String_System_Object___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_System_String_System_UInt64_
  name: PromptUserConfirmAsync(string, ulong)
  nameWithType: MewdekoModule.PromptUserConfirmAsync(string, ulong)
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(string, ulong)
  nameWithType.vb: MewdekoModule.PromptUserConfirmAsync(String, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(String, ULong)
  name.vb: PromptUserConfirmAsync(String, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_System_String_System_UInt64_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(System.String,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_System_String_System_UInt64_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_EmbedBuilder_System_UInt64_
  name: PromptUserConfirmAsync(EmbedBuilder, ulong)
  nameWithType: MewdekoModule.PromptUserConfirmAsync(EmbedBuilder, ulong)
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder, ulong)
  nameWithType.vb: MewdekoModule.PromptUserConfirmAsync(EmbedBuilder, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder, ULong)
  name.vb: PromptUserConfirmAsync(EmbedBuilder, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  commentId: M:Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CheckRoleHierarchy_Discord_IGuildUser_System_Boolean_
  name: CheckRoleHierarchy(IGuildUser, bool)
  nameWithType: MewdekoModule.CheckRoleHierarchy(IGuildUser, bool)
  fullName: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser, bool)
  nameWithType.vb: MewdekoModule.CheckRoleHierarchy(IGuildUser, Boolean)
  fullName.vb: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser, Boolean)
  name.vb: CheckRoleHierarchy(IGuildUser, Boolean)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
    name: CheckRoleHierarchy
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CheckRoleHierarchy_Discord_IGuildUser_System_Boolean_
  - name: (
  - uid: Discord.IGuildUser
    name: IGuildUser
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.CheckRoleHierarchy(Discord.IGuildUser,System.Boolean)
    name: CheckRoleHierarchy
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_CheckRoleHierarchy_Discord_IGuildUser_System_Boolean_
  - name: (
  - uid: Discord.IGuildUser
    name: IGuildUser
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_IUserMessage_Discord_EmbedBuilder_System_UInt64_
  name: PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ulong)
  nameWithType: MewdekoModule.PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ulong)
  fullName: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage, Discord.EmbedBuilder, ulong)
  nameWithType.vb: MewdekoModule.PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage, Discord.EmbedBuilder, ULong)
  name.vb: PromptUserConfirmAsync(IUserMessage, EmbedBuilder, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_IUserMessage_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.PromptUserConfirmAsync(Discord.IUserMessage,Discord.EmbedBuilder,System.UInt64)
    name: PromptUserConfirmAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_PromptUserConfirmAsync_Discord_IUserMessage_Discord_EmbedBuilder_System_UInt64_
  - name: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.EmbedBuilder
    name: EmbedBuilder
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  commentId: M:Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetButtonInputAsync_System_UInt64_System_UInt64_System_UInt64_System_Boolean_
  name: GetButtonInputAsync(ulong, ulong, ulong, bool)
  nameWithType: MewdekoModule.GetButtonInputAsync(ulong, ulong, ulong, bool)
  fullName: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(ulong, ulong, ulong, bool)
  nameWithType.vb: MewdekoModule.GetButtonInputAsync(ULong, ULong, ULong, Boolean)
  fullName.vb: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(ULong, ULong, ULong, Boolean)
  name.vb: GetButtonInputAsync(ULong, ULong, ULong, Boolean)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
    name: GetButtonInputAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetButtonInputAsync_System_UInt64_System_UInt64_System_UInt64_System_Boolean_
  - name: (
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.GetButtonInputAsync(System.UInt64,System.UInt64,System.UInt64,System.Boolean)
    name: GetButtonInputAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_GetButtonInputAsync_System_UInt64_System_UInt64_System_UInt64_System_Boolean_
  - name: (
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextMessageAsync_System_UInt64_System_UInt64_
  name: NextMessageAsync(ulong, ulong)
  nameWithType: MewdekoModule.NextMessageAsync(ulong, ulong)
  fullName: Mewdeko.Common.MewdekoModule.NextMessageAsync(ulong, ulong)
  nameWithType.vb: MewdekoModule.NextMessageAsync(ULong, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.NextMessageAsync(ULong, ULong)
  name.vb: NextMessageAsync(ULong, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
    name: NextMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.NextMessageAsync(System.UInt64,System.UInt64)
    name: NextMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
  commentId: M:Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
  parent: Mewdeko.Common.MewdekoModule
  isExternal: true
  href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextFullMessageAsync_System_UInt64_System_UInt64_
  name: NextFullMessageAsync(ulong, ulong)
  nameWithType: MewdekoModule.NextFullMessageAsync(ulong, ulong)
  fullName: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(ulong, ulong)
  nameWithType.vb: MewdekoModule.NextFullMessageAsync(ULong, ULong)
  fullName.vb: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(ULong, ULong)
  name.vb: NextFullMessageAsync(ULong, ULong)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
    name: NextFullMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextFullMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModule.NextFullMessageAsync(System.UInt64,System.UInt64)
    name: NextFullMessageAsync
    href: Mewdeko.Common.MewdekoModule.html#Mewdeko_Common_MewdekoModule_NextFullMessageAsync_System_UInt64_System_UInt64_
  - name: (
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  nameWithType: ModuleBase<ICommandContext>.ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.ReplyAsync(string, bool, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker[], Discord.Embed[], Discord.MessageFlags)
  nameWithType.vb: ModuleBase(Of ICommandContext).ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).ReplyAsync(String, Boolean, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker(), Discord.Embed(), Discord.MessageFlags)
  name.vb: ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  name: BeforeExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.BeforeExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).BeforeExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).BeforeExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
  name: AfterExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.AfterExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.AfterExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).AfterExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).AfterExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  name: AfterExecute(CommandInfo)
  nameWithType: ModuleBase<ICommandContext>.AfterExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.AfterExecute(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of ICommandContext).AfterExecute(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).AfterExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  commentId: M:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  name: OnModuleBuilding(CommandService, ModuleBuilder)
  nameWithType: ModuleBase<ICommandContext>.OnModuleBuilding(CommandService, ModuleBuilder)
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  nameWithType.vb: ModuleBase(Of ICommandContext).OnModuleBuilding(CommandService, ModuleBuilder)
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.Context
  commentId: P:Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}.Context
  parent: Discord.Commands.ModuleBase{Discord.Commands.ICommandContext}
  definition: Discord.Commands.ModuleBase`1.Context
  name: Context
  nameWithType: ModuleBase<ICommandContext>.Context
  fullName: Discord.Commands.ModuleBase<Discord.Commands.ICommandContext>.Context
  nameWithType.vb: ModuleBase(Of ICommandContext).Context
  fullName.vb: Discord.Commands.ModuleBase(Of Discord.Commands.ICommandContext).Context
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Mewdeko.Modules.Utility.Utility.Mewdeko.Extensions.Extensions.ThrowIfNull``1(System.String)
  commentId: M:Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  parent: Mewdeko.Extensions.Extensions
  definition: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  name: ThrowIfNull<Utility>(Utility, string)
  nameWithType: Extensions.ThrowIfNull<Utility>(Utility, string)
  fullName: Mewdeko.Extensions.Extensions.ThrowIfNull<Mewdeko.Modules.Utility.Utility>(Mewdeko.Modules.Utility.Utility, string)
  nameWithType.vb: Extensions.ThrowIfNull(Of Utility)(Utility, String)
  fullName.vb: Mewdeko.Extensions.Extensions.ThrowIfNull(Of Mewdeko.Modules.Utility.Utility)(Mewdeko.Modules.Utility.Utility, String)
  name.vb: ThrowIfNull(Of Utility)(Utility, String)
  spec.csharp:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(Mewdeko.Modules.Utility.Utility,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: <
  - uid: Mewdeko.Modules.Utility.Utility
    name: Utility
    href: Mewdeko.Modules.Utility.Utility.html
  - name: '>'
  - name: (
  - uid: Mewdeko.Modules.Utility.Utility
    name: Utility
    href: Mewdeko.Modules.Utility.Utility.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(Mewdeko.Modules.Utility.Utility,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: (
  - name: Of
  - name: " "
  - uid: Mewdeko.Modules.Utility.Utility
    name: Utility
    href: Mewdeko.Modules.Utility.Utility.html
  - name: )
  - name: (
  - uid: Mewdeko.Modules.Utility.Utility
    name: Utility
    href: Mewdeko.Modules.Utility.Utility.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Commands.ModuleBase`1
  commentId: T:Discord.Commands.ModuleBase`1
  isExternal: true
  name: ModuleBase<T>
  nameWithType: ModuleBase<T>
  fullName: Discord.Commands.ModuleBase<T>
  nameWithType.vb: ModuleBase(Of T)
  fullName.vb: Discord.Commands.ModuleBase(Of T)
  name.vb: ModuleBase(Of T)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1
    name: ModuleBase
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Discord.Commands
  commentId: N:Discord.Commands
  isExternal: true
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
  spec.csharp:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.Commands
    name: Commands
    isExternal: true
  spec.vb:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.Commands
    name: Commands
    isExternal: true
- uid: Mewdeko.Common
  commentId: N:Mewdeko.Common
  href: Mewdeko.html
  name: Mewdeko.Common
  nameWithType: Mewdeko.Common
  fullName: Mewdeko.Common
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
- uid: Mewdeko.Common.MewdekoModuleBase`1
  commentId: T:Mewdeko.Common.MewdekoModuleBase`1
  href: Mewdeko.Common.MewdekoModuleBase-1.html
  name: MewdekoModuleBase<TService>
  nameWithType: MewdekoModuleBase<TService>
  fullName: Mewdeko.Common.MewdekoModuleBase<TService>
  nameWithType.vb: MewdekoModuleBase(Of TService)
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of TService)
  name.vb: MewdekoModuleBase(Of TService)
  spec.csharp:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: <
  - name: TService
  - name: '>'
  spec.vb:
  - uid: Mewdeko.Common.MewdekoModuleBase`1
    name: MewdekoModuleBase
    href: Mewdeko.Common.MewdekoModuleBase-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TService
  - name: )
- uid: Mewdeko.Common.MewdekoModuleBase`1.Service
  commentId: P:Mewdeko.Common.MewdekoModuleBase`1.Service
  href: Mewdeko.Common.MewdekoModuleBase-1.html#Mewdeko_Common_MewdekoModuleBase_1_Service
  name: Service
  nameWithType: MewdekoModuleBase<TService>.Service
  fullName: Mewdeko.Common.MewdekoModuleBase<TService>.Service
  nameWithType.vb: MewdekoModuleBase(Of TService).Service
  fullName.vb: Mewdeko.Common.MewdekoModuleBase(Of TService).Service
- uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  commentId: M:Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  nameWithType: ModuleBase<T>.ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags)
  fullName: Discord.Commands.ModuleBase<T>.ReplyAsync(string, bool, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker[], Discord.Embed[], Discord.MessageFlags)
  nameWithType.vb: ModuleBase(Of T).ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  fullName.vb: Discord.Commands.ModuleBase(Of T).ReplyAsync(String, Boolean, Discord.Embed, Discord.RequestOptions, Discord.AllowedMentions, Discord.MessageReference, Discord.MessageComponent, Discord.ISticker(), Discord.Embed(), Discord.MessageFlags)
  name.vb: ReplyAsync(String, Boolean, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker(), Embed(), MessageFlags)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags)
    name: ReplyAsync
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.RequestOptions
    name: RequestOptions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.AllowedMentions
    name: AllowedMentions
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageReference
    name: MessageReference
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.MessageComponent
    name: MessageComponent
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.ISticker
    name: ISticker
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.Embed
    name: Embed
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Discord.MessageFlags
    name: MessageFlags
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  isExternal: true
  name: BeforeExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<T>.BeforeExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.BeforeExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).BeforeExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).BeforeExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.BeforeExecuteAsync(Discord.Commands.CommandInfo)
    name: BeforeExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
  isExternal: true
  name: AfterExecuteAsync(CommandInfo)
  nameWithType: ModuleBase<T>.AfterExecuteAsync(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.AfterExecuteAsync(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).AfterExecuteAsync(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).AfterExecuteAsync(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.AfterExecuteAsync(Discord.Commands.CommandInfo)
    name: AfterExecuteAsync
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  isExternal: true
  name: AfterExecute(CommandInfo)
  nameWithType: ModuleBase<T>.AfterExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.AfterExecute(Discord.Commands.CommandInfo)
  nameWithType.vb: ModuleBase(Of T).AfterExecute(CommandInfo)
  fullName.vb: Discord.Commands.ModuleBase(Of T).AfterExecute(Discord.Commands.CommandInfo)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
    name: AfterExecute
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  commentId: M:Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  isExternal: true
  name: OnModuleBuilding(CommandService, ModuleBuilder)
  nameWithType: ModuleBase<T>.OnModuleBuilding(CommandService, ModuleBuilder)
  fullName: Discord.Commands.ModuleBase<T>.OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  nameWithType.vb: ModuleBase(Of T).OnModuleBuilding(CommandService, ModuleBuilder)
  fullName.vb: Discord.Commands.ModuleBase(Of T).OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  spec.csharp:
  - uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
  spec.vb:
  - uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
    name: OnModuleBuilding
    isExternal: true
  - name: (
  - uid: Discord.Commands.CommandService
    name: CommandService
    isExternal: true
  - name: ','
  - name: " "
  - uid: Discord.Commands.Builders.ModuleBuilder
    name: ModuleBuilder
    isExternal: true
  - name: )
- uid: Discord.Commands.ModuleBase`1.Context
  commentId: P:Discord.Commands.ModuleBase`1.Context
  isExternal: true
  name: Context
  nameWithType: ModuleBase<T>.Context
  fullName: Discord.Commands.ModuleBase<T>.Context
  nameWithType.vb: ModuleBase(Of T).Context
  fullName.vb: Discord.Commands.ModuleBase(Of T).Context
- uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  commentId: M:Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
  isExternal: true
  href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  name: ThrowIfNull<T>(T, string)
  nameWithType: Extensions.ThrowIfNull<T>(T, string)
  fullName: Mewdeko.Extensions.Extensions.ThrowIfNull<T>(T, string)
  nameWithType.vb: Extensions.ThrowIfNull(Of T)(T, String)
  fullName.vb: Mewdeko.Extensions.Extensions.ThrowIfNull(Of T)(T, String)
  name.vb: ThrowIfNull(Of T)(T, String)
  spec.csharp:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Mewdeko.Extensions.Extensions.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull
    href: Mewdeko.Extensions.Extensions.html#Mewdeko_Extensions_Extensions_ThrowIfNull__1___0_System_String_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Mewdeko.Extensions.Extensions
  commentId: T:Mewdeko.Extensions.Extensions
  parent: Mewdeko.Extensions
  href: Mewdeko.Extensions.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: Mewdeko.Extensions.Extensions
- uid: Mewdeko.Extensions
  commentId: N:Mewdeko.Extensions
  href: Mewdeko.html
  name: Mewdeko.Extensions
  nameWithType: Mewdeko.Extensions
  fullName: Mewdeko.Extensions
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Extensions
    name: Extensions
    href: Mewdeko.Extensions.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Extensions
    name: Extensions
    href: Mewdeko.Extensions.html
- uid: Mewdeko.Modules.Utility.Utility.Banner*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.Banner
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_Banner_Discord_IGuildUser_
  name: Banner
  nameWithType: Utility.Banner
  fullName: Mewdeko.Modules.Utility.Utility.Banner
- uid: Discord.IGuildUser
  commentId: T:Discord.IGuildUser
  parent: Discord
  isExternal: true
  name: IGuildUser
  nameWithType: IGuildUser
  fullName: Discord.IGuildUser
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Discord
  commentId: N:Discord
  isExternal: true
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Mewdeko.Modules.Utility.Utility.Traceroute*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.Traceroute
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_Traceroute_System_String_
  name: Traceroute
  nameWithType: Utility.Traceroute
  fullName: Mewdeko.Modules.Utility.Utility.Traceroute
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Mewdeko.Modules.Utility.Utility.GetTraceRoute*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.GetTraceRoute
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_GetTraceRoute_System_String_
  name: GetTraceRoute
  nameWithType: Utility.GetTraceRoute
  fullName: Mewdeko.Modules.Utility.Utility.GetTraceRoute
- uid: System.Collections.Generic.IEnumerable{System.Net.IPAddress}
  commentId: T:System.Collections.Generic.IEnumerable{System.Net.IPAddress}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IPAddress>
  nameWithType: IEnumerable<IPAddress>
  fullName: System.Collections.Generic.IEnumerable<System.Net.IPAddress>
  nameWithType.vb: IEnumerable(Of IPAddress)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Net.IPAddress)
  name.vb: IEnumerable(Of IPAddress)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Net.IPAddress
    name: IPAddress
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.ipaddress
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Net.IPAddress
    name: IPAddress
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.ipaddress
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Mewdeko.Modules.Utility.Utility.#ctor*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.#ctor
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility__ctor_Discord_WebSocket_DiscordSocketClient_Mewdeko_Services_IStatsService_Mewdeko_Services_IBotCredentials_Mewdeko_Common_DownloadTracker_Fergun_Interactive_InteractiveService_Mewdeko_Services_ICoordinator_Mewdeko_Services_GuildSettingsService_System_Net_Http_HttpClient_Mewdeko_Services_Settings_BotConfigService_Mewdeko_Database_DbService_
  name: Utility
  nameWithType: Utility.Utility
  fullName: Mewdeko.Modules.Utility.Utility.Utility
  nameWithType.vb: Utility.New
  fullName.vb: Mewdeko.Modules.Utility.Utility.New
  name.vb: New
- uid: Discord.WebSocket.DiscordSocketClient
  commentId: T:Discord.WebSocket.DiscordSocketClient
  parent: Discord.WebSocket
  isExternal: true
  name: DiscordSocketClient
  nameWithType: DiscordSocketClient
  fullName: Discord.WebSocket.DiscordSocketClient
- uid: Mewdeko.Services.IStatsService
  commentId: T:Mewdeko.Services.IStatsService
  parent: Mewdeko.Services
  href: Mewdeko.Services.IStatsService.html
  name: IStatsService
  nameWithType: IStatsService
  fullName: Mewdeko.Services.IStatsService
- uid: Mewdeko.Services.IBotCredentials
  commentId: T:Mewdeko.Services.IBotCredentials
  parent: Mewdeko.Services
  href: Mewdeko.Services.IBotCredentials.html
  name: IBotCredentials
  nameWithType: IBotCredentials
  fullName: Mewdeko.Services.IBotCredentials
- uid: Mewdeko.Common.DownloadTracker
  commentId: T:Mewdeko.Common.DownloadTracker
  parent: Mewdeko.Common
  href: Mewdeko.Common.DownloadTracker.html
  name: DownloadTracker
  nameWithType: DownloadTracker
  fullName: Mewdeko.Common.DownloadTracker
- uid: Fergun.Interactive.InteractiveService
  commentId: T:Fergun.Interactive.InteractiveService
  parent: Fergun.Interactive
  isExternal: true
  name: InteractiveService
  nameWithType: InteractiveService
  fullName: Fergun.Interactive.InteractiveService
- uid: Mewdeko.Services.ICoordinator
  commentId: T:Mewdeko.Services.ICoordinator
  parent: Mewdeko.Services
  href: Mewdeko.Services.ICoordinator.html
  name: ICoordinator
  nameWithType: ICoordinator
  fullName: Mewdeko.Services.ICoordinator
- uid: Mewdeko.Services.GuildSettingsService
  commentId: T:Mewdeko.Services.GuildSettingsService
  parent: Mewdeko.Services
  href: Mewdeko.Services.GuildSettingsService.html
  name: GuildSettingsService
  nameWithType: GuildSettingsService
  fullName: Mewdeko.Services.GuildSettingsService
- uid: System.Net.Http.HttpClient
  commentId: T:System.Net.Http.HttpClient
  parent: System.Net.Http
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.net.http.httpclient
  name: HttpClient
  nameWithType: HttpClient
  fullName: System.Net.Http.HttpClient
- uid: Mewdeko.Services.Settings.BotConfigService
  commentId: T:Mewdeko.Services.Settings.BotConfigService
  parent: Mewdeko.Services.Settings
  href: Mewdeko.Services.Settings.BotConfigService.html
  name: BotConfigService
  nameWithType: BotConfigService
  fullName: Mewdeko.Services.Settings.BotConfigService
- uid: Mewdeko.Database.DbService
  commentId: T:Mewdeko.Database.DbService
  parent: Mewdeko.Database
  href: Mewdeko.Database.DbService.html
  name: DbService
  nameWithType: DbService
  fullName: Mewdeko.Database.DbService
- uid: Discord.WebSocket
  commentId: N:Discord.WebSocket
  isExternal: true
  name: Discord.WebSocket
  nameWithType: Discord.WebSocket
  fullName: Discord.WebSocket
  spec.csharp:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.WebSocket
    name: WebSocket
    isExternal: true
  spec.vb:
  - uid: Discord
    name: Discord
    isExternal: true
  - name: .
  - uid: Discord.WebSocket
    name: WebSocket
    isExternal: true
- uid: Mewdeko.Services
  commentId: N:Mewdeko.Services
  href: Mewdeko.html
  name: Mewdeko.Services
  nameWithType: Mewdeko.Services
  fullName: Mewdeko.Services
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
- uid: Fergun.Interactive
  commentId: N:Fergun.Interactive
  isExternal: true
  name: Fergun.Interactive
  nameWithType: Fergun.Interactive
  fullName: Fergun.Interactive
  spec.csharp:
  - uid: Fergun
    name: Fergun
    isExternal: true
  - name: .
  - uid: Fergun.Interactive
    name: Interactive
    isExternal: true
  spec.vb:
  - uid: Fergun
    name: Fergun
    isExternal: true
  - name: .
  - uid: Fergun.Interactive
    name: Interactive
    isExternal: true
- uid: System.Net.Http
  commentId: N:System.Net.Http
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Net.Http
  nameWithType: System.Net.Http
  fullName: System.Net.Http
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Net
    name: Net
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net
  - name: .
  - uid: System.Net.Http
    name: Http
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.http
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Net
    name: Net
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net
  - name: .
  - uid: System.Net.Http
    name: Http
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.http
- uid: Mewdeko.Services.Settings
  commentId: N:Mewdeko.Services.Settings
  href: Mewdeko.html
  name: Mewdeko.Services.Settings
  nameWithType: Mewdeko.Services.Settings
  fullName: Mewdeko.Services.Settings
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
  - name: .
  - uid: Mewdeko.Services.Settings
    name: Settings
    href: Mewdeko.Services.Settings.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Services
    name: Services
    href: Mewdeko.Services.html
  - name: .
  - uid: Mewdeko.Services.Settings
    name: Settings
    href: Mewdeko.Services.Settings.html
- uid: Mewdeko.Database
  commentId: N:Mewdeko.Database
  href: Mewdeko.html
  name: Mewdeko.Database
  nameWithType: Mewdeko.Database
  fullName: Mewdeko.Database
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Database
    name: Database
    href: Mewdeko.Database.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Database
    name: Database
    href: Mewdeko.Database.html
- uid: Mewdeko.Modules.Utility.Utility.DebugEmbed*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.DebugEmbed
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_DebugEmbed_System_String_
  name: DebugEmbed
  nameWithType: Utility.DebugEmbed
  fullName: Mewdeko.Modules.Utility.Utility.DebugEmbed
- uid: Mewdeko.Modules.Utility.Utility.RolePermList*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.RolePermList
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_RolePermList_Mewdeko_Modules_Utility_Utility_PermissionType_Discord_GuildPermission___
  name: RolePermList
  nameWithType: Utility.RolePermList
  fullName: Mewdeko.Modules.Utility.Utility.RolePermList
- uid: Mewdeko.Modules.Utility.Utility.PermissionType
  commentId: T:Mewdeko.Modules.Utility.Utility.PermissionType
  parent: Mewdeko.Modules.Utility
  href: Mewdeko.Modules.Utility.Utility.html
  name: Utility.PermissionType
  nameWithType: Utility.PermissionType
  fullName: Mewdeko.Modules.Utility.Utility.PermissionType
  spec.csharp:
  - uid: Mewdeko.Modules.Utility.Utility
    name: Utility
    href: Mewdeko.Modules.Utility.Utility.html
  - name: .
  - uid: Mewdeko.Modules.Utility.Utility.PermissionType
    name: PermissionType
    href: Mewdeko.Modules.Utility.Utility.PermissionType.html
  spec.vb:
  - uid: Mewdeko.Modules.Utility.Utility
    name: Utility
    href: Mewdeko.Modules.Utility.Utility.html
  - name: .
  - uid: Mewdeko.Modules.Utility.Utility.PermissionType
    name: PermissionType
    href: Mewdeko.Modules.Utility.Utility.PermissionType.html
- uid: Discord.GuildPermission[]
  isExternal: true
  name: GuildPermission[]
  nameWithType: GuildPermission[]
  fullName: Discord.GuildPermission[]
  nameWithType.vb: GuildPermission()
  fullName.vb: Discord.GuildPermission()
  name.vb: GuildPermission()
  spec.csharp:
  - uid: Discord.GuildPermission
    name: GuildPermission
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Discord.GuildPermission
    name: GuildPermission
    isExternal: true
  - name: (
  - name: )
- uid: Mewdeko.Modules.Utility.Utility.GetJson*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.GetJson
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_GetJson_System_UInt64_Discord_ITextChannel_
  name: GetJson
  nameWithType: Utility.GetJson
  fullName: Mewdeko.Modules.Utility.Utility.GetJson
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: Discord.ITextChannel
  commentId: T:Discord.ITextChannel
  parent: Discord
  isExternal: true
  name: ITextChannel
  nameWithType: ITextChannel
  fullName: Discord.ITextChannel
- uid: Mewdeko.Modules.Utility.Utility.SaveChat*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.SaveChat
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_SaveChat_Mewdeko_Common_TypeReaders_Models_StoopidTime_Discord_ITextChannel_
  name: SaveChat
  nameWithType: Utility.SaveChat
  fullName: Mewdeko.Modules.Utility.Utility.SaveChat
- uid: Mewdeko.Common.TypeReaders.Models.StoopidTime
  commentId: T:Mewdeko.Common.TypeReaders.Models.StoopidTime
  parent: Mewdeko.Common.TypeReaders.Models
  href: Mewdeko.Common.TypeReaders.Models.StoopidTime.html
  name: StoopidTime
  nameWithType: StoopidTime
  fullName: Mewdeko.Common.TypeReaders.Models.StoopidTime
- uid: Mewdeko.Common.TypeReaders.Models
  commentId: N:Mewdeko.Common.TypeReaders.Models
  href: Mewdeko.html
  name: Mewdeko.Common.TypeReaders.Models
  nameWithType: Mewdeko.Common.TypeReaders.Models
  fullName: Mewdeko.Common.TypeReaders.Models
  spec.csharp:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
  - name: .
  - uid: Mewdeko.Common.TypeReaders
    name: TypeReaders
    href: Mewdeko.Common.TypeReaders.html
  - name: .
  - uid: Mewdeko.Common.TypeReaders.Models
    name: Models
    href: Mewdeko.Common.TypeReaders.Models.html
  spec.vb:
  - uid: Mewdeko
    name: Mewdeko
    href: Mewdeko.html
  - name: .
  - uid: Mewdeko.Common
    name: Common
    href: Mewdeko.Common.html
  - name: .
  - uid: Mewdeko.Common.TypeReaders
    name: TypeReaders
    href: Mewdeko.Common.TypeReaders.html
  - name: .
  - uid: Mewdeko.Common.TypeReaders.Models
    name: Models
    href: Mewdeko.Common.TypeReaders.Models.html
- uid: Mewdeko.Modules.Utility.Utility.EmoteList*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.EmoteList
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_EmoteList_System_String_
  name: EmoteList
  nameWithType: Utility.EmoteList
  fullName: Mewdeko.Modules.Utility.Utility.EmoteList
- uid: Mewdeko.Modules.Utility.Utility.Invite*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.Invite
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_Invite
  name: Invite
  nameWithType: Utility.Invite
  fullName: Mewdeko.Modules.Utility.Utility.Invite
- uid: Mewdeko.Modules.Utility.Utility.SnipeSet*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.SnipeSet
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_SnipeSet_Mewdeko_Common_TypeReaders_Models_PermissionAction_
  name: SnipeSet
  nameWithType: Utility.SnipeSet
  fullName: Mewdeko.Modules.Utility.Utility.SnipeSet
- uid: Mewdeko.Common.TypeReaders.Models.PermissionAction
  commentId: T:Mewdeko.Common.TypeReaders.Models.PermissionAction
  parent: Mewdeko.Common.TypeReaders.Models
  href: Mewdeko.Common.TypeReaders.Models.PermissionAction.html
  name: PermissionAction
  nameWithType: PermissionAction
  fullName: Mewdeko.Common.TypeReaders.Models.PermissionAction
- uid: Mewdeko.Modules.Utility.Utility.Snipe*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.Snipe
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_Snipe
  name: Snipe
  nameWithType: Utility.Snipe
  fullName: Mewdeko.Modules.Utility.Utility.Snipe
- uid: Mewdeko.Modules.Utility.Utility.SnipeList*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.SnipeList
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_SnipeList_System_Int32_
  name: SnipeList
  nameWithType: Utility.SnipeList
  fullName: Mewdeko.Modules.Utility.Utility.SnipeList
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  isExternal: true
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Mewdeko.Modules.Utility.Utility.EditSnipeList*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.EditSnipeList
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_EditSnipeList_System_Int32_
  name: EditSnipeList
  nameWithType: Utility.EditSnipeList
  fullName: Mewdeko.Modules.Utility.Utility.EditSnipeList
- uid: Mewdeko.Modules.Utility.Utility.VCheck*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.VCheck
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_VCheck_System_String_
  name: VCheck
  nameWithType: Utility.VCheck
  fullName: Mewdeko.Modules.Utility.Utility.VCheck
- uid: Mewdeko.Modules.Utility.Utility.EditSnipe*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.EditSnipe
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_EditSnipe
  name: EditSnipe
  nameWithType: Utility.EditSnipe
  fullName: Mewdeko.Modules.Utility.Utility.EditSnipe
- uid: Mewdeko.Modules.Utility.Utility.WhosPlaying*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.WhosPlaying
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_WhosPlaying_System_String_
  name: WhosPlaying
  nameWithType: Utility.WhosPlaying
  fullName: Mewdeko.Modules.Utility.Utility.WhosPlaying
- uid: Mewdeko.Modules.Utility.Utility.Vote*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.Vote
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_Vote
  name: Vote
  nameWithType: Utility.Vote
  fullName: Mewdeko.Modules.Utility.Utility.Vote
- uid: Mewdeko.Modules.Utility.Utility.InRole*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.InRole
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_InRole_Discord_IRole_
  name: InRole
  nameWithType: Utility.InRole
  fullName: Mewdeko.Modules.Utility.Utility.InRole
- uid: Discord.IRole
  commentId: T:Discord.IRole
  parent: Discord
  isExternal: true
  name: IRole
  nameWithType: IRole
  fullName: Discord.IRole
- uid: Mewdeko.Modules.Utility.Utility.InRoles*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.InRoles
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_InRoles_Discord_IRole_Discord_IRole_
  name: InRoles
  nameWithType: Utility.InRoles
  fullName: Mewdeko.Modules.Utility.Utility.InRoles
- uid: Mewdeko.Modules.Utility.Utility.UserId*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.UserId
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_UserId_Discord_IGuildUser_
  name: UserId
  nameWithType: Utility.UserId
  fullName: Mewdeko.Modules.Utility.Utility.UserId
- uid: Mewdeko.Modules.Utility.Utility.RoleId*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.RoleId
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_RoleId_Discord_IRole_
  name: RoleId
  nameWithType: Utility.RoleId
  fullName: Mewdeko.Modules.Utility.Utility.RoleId
- uid: Mewdeko.Modules.Utility.Utility.ChannelId*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.ChannelId
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_ChannelId
  name: ChannelId
  nameWithType: Utility.ChannelId
  fullName: Mewdeko.Modules.Utility.Utility.ChannelId
- uid: Mewdeko.Modules.Utility.Utility.ServerId*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.ServerId
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_ServerId
  name: ServerId
  nameWithType: Utility.ServerId
  fullName: Mewdeko.Modules.Utility.Utility.ServerId
- uid: Mewdeko.Modules.Utility.Utility.Roles*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.Roles
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_Roles_Discord_IGuildUser_
  name: Roles
  nameWithType: Utility.Roles
  fullName: Mewdeko.Modules.Utility.Utility.Roles
- uid: Mewdeko.Modules.Utility.Utility.ChannelTopic*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.ChannelTopic
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_ChannelTopic_Discord_ITextChannel_
  name: ChannelTopic
  nameWithType: Utility.ChannelTopic
  fullName: Mewdeko.Modules.Utility.Utility.ChannelTopic
- uid: Mewdeko.Modules.Utility.Utility.Say*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.Say
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_Say_Discord_ITextChannel_System_String_
  name: Say
  nameWithType: Utility.Say
  fullName: Mewdeko.Modules.Utility.Utility.Say
- uid: Mewdeko.Modules.Utility.Utility.Stats*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.Stats
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_Stats
  name: Stats
  nameWithType: Utility.Stats
  fullName: Mewdeko.Modules.Utility.Utility.Stats
- uid: Mewdeko.Modules.Utility.Utility.Showemojis*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.Showemojis
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_Showemojis_System_String_
  name: Showemojis
  nameWithType: Utility.Showemojis
  fullName: Mewdeko.Modules.Utility.Utility.Showemojis
- uid: Mewdeko.Modules.Utility.Utility.Ping*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.Ping
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_Ping
  name: Ping
  nameWithType: Utility.Ping
  fullName: Mewdeko.Modules.Utility.Utility.Ping
- uid: Mewdeko.Modules.Utility.Utility.Roll*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.Roll
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_Roll_System_String_
  name: Roll
  nameWithType: Utility.Roll
  fullName: Mewdeko.Modules.Utility.Utility.Roll
- uid: Mewdeko.Modules.Utility.Utility.OwoIfy*
  commentId: Overload:Mewdeko.Modules.Utility.Utility.OwoIfy
  href: Mewdeko.Modules.Utility.Utility.html#Mewdeko_Modules_Utility_Utility_OwoIfy_System_String_
  name: OwoIfy
  nameWithType: Utility.OwoIfy
  fullName: Mewdeko.Modules.Utility.Utility.OwoIfy
